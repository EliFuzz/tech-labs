{
  "key": "python",
  "metadata": {
    "name": "Python",
    "url": "https://www.python.org/",
    "logo": "/static/img/lang/py.svg"
  },
  "dataTypes": [
    {
      "name": "bool",
      "description": "Boolean",
      "code": "False"
    },
    {
      "name": "noneType",
      "description": "None Type",
      "code": "NoneType"
    },
    {
      "name": "str",
      "description": "UTF-8 string",
      "code": "\"Hello, World!\""
    },
    {
      "name": "int",
      "description": "Integer",
      "code": "0"
    },
    {
      "name": "float",
      "description": "Float",
      "code": "0.0"
    },
    {
      "name": "complex",
      "description": "Complex",
      "code": "0j"
    },
    {
      "name": "list",
      "description": "List",
      "code": "[]"
    },
    {
      "name": "tuple",
      "description": "Tuple",
      "code": "()"
    },
    {
      "name": "range",
      "description": "Range",
      "code": "range()"
    },
    {
      "name": "dict",
      "description": "Dictionary",
      "code": "{}"
    },
    {
      "name": "set",
      "description": "Set",
      "code": "set()"
    },
    {
      "name": "frozenset",
      "description": "Frozen Set",
      "code": "frozenset()"
    },
    {
      "name": "bytes",
      "description": "Bytes",
      "code": "b\"\""
    },
    {
      "name": "bytearray",
      "description": "Bytearray",
      "code": "bytearray()"
    },
    {
      "name": "memoryview",
      "description": "Memoryview",
      "code": "memoryview()"
    }
  ],
  "reservedKeywords": [
    "and",
    "as",
    "assert",
    "break",
    "class",
    "continue",
    "def",
    "del",
    "elif",
    "else",
    "except",
    "False",
    "finally",
    "for",
    "from",
    "global",
    "if",
    "import",
    "in",
    "is",
    "lambda",
    "None",
    "nonlocal",
    "not",
    "or",
    "pass",
    "raise",
    "return",
    "True",
    "try",
    "while",
    "with",
    "yield"
  ],
  "syntax": {
    "examples": [
      {
        "name": "hello_world",
        "description": "Hello World",
        "code": "if __name__ == \"__main__\":\n    print(\"Hello, World!\")"
      }
    ],
    "comments": [
      {
        "name": "single_line_comment",
        "description": "Single line comment",
        "code": "# Single line comment"
      },
      {
        "name": "multi_line_comment",
        "description": "Multi-line comment",
        "code": "''' Multi-line\ncomment '''"
      }
    ],
    "namespaces": [
      {
        "name": "namespace",
        "description": "Namespace",
        "code": "# based on the package structure"
      }
    ],
    "imports": [
      {
        "name": "import_module",
        "description": "Import",
        "code": "import os"
      },
      {
        "name": "import_partial",
        "description": "Import partially",
        "code": "from math import pi, ceil"
      },
      {
        "name": "import_alias",
        "description": "Import alias",
        "code": "from os import path as p"
      }
    ],
    "variables": [
      {
        "name": "variable",
        "description": "Variable",
        "code": "x = 0"
      },
      {
        "name": "multiple_variables",
        "description": "Multiple variables",
        "code": "x = y = z = 0"
      },
      {
        "name": "multiple_variable_assignment",
        "description": "Multiple variable assignment",
        "code": "x, y, z = 0, 1, 2"
      },
      {
        "name": "variadic_variable_assignment",
        "description": "Variadic variable assignment",
        "code": "x, *y, z = 0, 1, 2, 3"
      },
      {
        "name": "variadic_function_parameter",
        "description": "Variadic function parameter",
        "code": "def f(*args):\n    pass"
      },
      {
        "name": "keyword_arguments",
        "description": "Keyword arguments",
        "code": "def f(**kwargs):\n    pass"
      },
      {
        "name": "string",
        "description": "String",
        "code": "x = \"Hello, World!\""
      },
      {
        "name": "int",
        "description": "Integer",
        "code": "x = 0"
      },
      {
        "name": "float",
        "description": "Float",
        "code": "x = 0.0"
      },
      {
        "name": "complex",
        "description": "Complex",
        "code": "x = 0j"
      },
      {
        "name": "list_variable_assignment",
        "description": "List variable assignment",
        "code": "x = [0, 1, 2]"
      },
      {
        "name": "dict_variable_assignment",
        "description": "Dict variable assignment",
        "code": "x = {\"a\": 0, \"b\": 1, \"c\": 2}"
      },
      {
        "name": "set_variable_assignment",
        "description": "Set variable assignment",
        "code": "x = set(0, 1, 2)"
      },
      {
        "name": "frozenset_variable_assignment",
        "description": "Frozen set variable assignment",
        "code": "x = frozenset(0, 1, 2)"
      }
    ],
    "bitwiseOperators": [
      {
        "name": "and",
        "description": "AND",
        "code": "x = x & y"
      },
      {
        "name": "or",
        "description": "OR",
        "code": "x = x | y"
      },
      {
        "name": "xor",
        "description": "XOR",
        "code": "x = x ^ y"
      },
      {
        "name": "not",
        "description": "NOT",
        "code": "x = ~x"
      },
      {
        "name": "left_shift",
        "description": "Left shift (preserve sign bit)",
        "code": "x = x << y"
      },
      {
        "name": "right_shift",
        "description": "Right shift (preserve sign bit)",
        "code": "x = x >> y"
      }
    ],
    "functions": [
      {
        "name": "main",
        "description": "Main function",
        "code": "def main():\n    print(\"Hello, World!\")"
      },
      {
        "name": "function_declaration",
        "description": "Function declaration",
        "code": "def myFunc()"
      },
      {
        "name": "function_with_parameters",
        "description": "Function with parameters",
        "code": "def myFunc(x, y)"
      },
      {
        "name": "function_with_return",
        "description": "Function with return",
        "code": "def myFunc():\n    return 0"
      },
      {
        "name": "function_short",
        "description": "Function shortcut",
        "code": "def even(x): return x % 2 == 0"
      },
      {
        "name": "lambda",
        "description": "Lambda function",
        "code": "lambda x: x + 1"
      },
      {
        "name": "generator",
        "description": "Generator function",
        "code": "def myFunc():\n    yield 0"
      }
    ],
    "flowControls": [
      {
        "name": "if",
        "description": "If statement",
        "code": "if x:\n    print(\"True\")"
      },
      {
        "name": "if_else",
        "description": "If-else statement",
        "code": "if x:\n    print(\"True\")\nelse:\n    print(\"False\")"
      },
      {
        "name": "while",
        "description": "While loop",
        "code": "while x:\n    print(1)"
      },
      {
        "name": "for_range",
        "description": "For loop (increment)",
        "code": "for x in range(10):\n    print(x)"
      },
      {
        "name": "for_with_step",
        "description": "For loop with step (increment)",
        "code": "for x in range(0, 10, 2):\n    print(x)"
      },
      {
        "name": "for_decrement",
        "description": "For loop (decrement)",
        "code": "for x in range(10, 0, -1):\n    print(x)"
      },
      {
        "name": "for_in",
        "description": "For loop",
        "code": "for x in y:\n    print(x)"
      },
      {
        "name": "for_enumerate",
        "description": "For loop with enumerate",
        "code": "for index, value in enumerate(my_list):\n    print(index, value)"
      },
      {
        "name": "break",
        "description": "Break",
        "code": "for x in range(10):\n    if x == 5:\n    break\n    print(x)"
      },
      {
        "name": "continue",
        "description": "Continue",
        "code": "for x in range(10):\n    if x == 5:\n    continue\n    print(x)"
      }
    ],
    "structures": [
      {
        "name": "class",
        "description": "Class",
        "code": "class MyClass:\n    pass"
      },
      {
        "name": "constructor",
        "description": "Constructor",
        "code": "class MyClass:\n    def __init__(self):\n        pass"
      },
      {
        "name": "classmethod",
        "description": "Class method decorator",
        "code": "class MyClass:\n    @classmethod\n    def f(cls):\n        pass"
      },
      {
        "name": "staticmethod",
        "description": "Static method decorator",
        "code": "class MyClass:\n    @staticmethod\n    def f():\n        pass"
      },
      {
        "name": "property",
        "description": "Property decorator",
        "code": "class MyClass:\n    @property\n    def f(self):\n        pass"
      },
      {
        "name": "setter",
        "description": "Setter decorator",
        "code": "class MyClass:\n    @f.setter\n    def f(self):\n        pass"
      },
      {
        "name": "deleter",
        "description": "Deleter decorator",
        "code": "class MyClass:\n    @f.deleter\n    def f(self):\n        pass"
      },
      {
        "name": "list",
        "description": "List",
        "code": "x = [1, 2, 3]"
      },
      {
        "name": "dict",
        "description": "Dictionary",
        "code": "x = {'key': 'value'}\nx = dict(key='value')"
      },
      {
        "name": "set",
        "description": "Set",
        "code": "x = {1, 2, 3}\nx = set([1, 2, 3])"
      },
      {
        "name": "tuple",
        "description": "Tuple",
        "code": "x = (1, 2, 3)\nx = tuple([1, 2, 3])"
      },
      {
        "name": "range",
        "description": "Range",
        "code": "x = range(10)"
      },
      {
        "name": "generator",
        "description": "Generator",
        "code": "x = (x for x in range(10))"
      },
      {
        "name": "enum",
        "description": "Enumerate",
        "code": "x = enumerate(my_list)"
      }
    ],
    "errorHandling": [
      {
        "name": "try",
        "description": "Try statement",
        "code": "try:\n    # Do something\nexcept:\n    # Handle exception"
      },
      {
        "name": "try_except",
        "description": "Try-except statement",
        "code": "try:\n    # Do something\nexcept Exception as e:\n    # Handle exception"
      },
      {
        "name": "try_finally",
        "description": "Try-finally statement",
        "code": "try:\n    # Do something\nfinally:\n    # Cleanup"
      },
      {
        "name": "raise",
        "description": "Raise exception",
        "code": "raise Exception(\"Error\")"
      }
    ],
    "concurrency": [
      {
        "name": "async",
        "description": "Async",
        "code": "#with help of asyncio\nasync def myFunc():\n    print(1)\n\nresponse = await myFunc()"
      },
      {
        "name": "thread",
        "description": "Thread",
        "code": "import threading\n\ndef myFunc():\n    print(1)\n\nthread = threading.Thread(target=myFunc())\nthread.start()"
      },
      {
        "name": "multiprocessing",
        "description": "Multiprocessing",
        "code": "import multiprocessing\n\ndef myFunc():\n    print(1)\n\nprocess = multiprocessing.Process(target=myFunc())\nprocess.start()"
      }
    ]
  }
}
