{
  "key": "kotlin",
  "metadata": {
    "name": "Kotlin",
    "url": "https://kotlinlang.org/",
    "logo": "/static/img/lang/kt.svg"
  },
  "dataTypes": [
    {
      "name": "boolean",
      "description": "Boolean",
      "code": "false"
    },
    {
      "name": "char",
      "description": "Character",
      "code": "'\\u0000'"
    },
    {
      "name": "string",
      "description": "UTF-16 string",
      "code": "\"Hello, World!\""
    },
    {
      "name": "array",
      "description": "Array",
      "code": "arrayOf()"
    },
    {
      "name": "byte",
      "description": "Byte (8-bit): -128(-2⁸) to 127(2⁸ - 1)",
      "code": "0"
    },
    {
      "name": "ubyte",
      "description": "UByte (8-bit): 0 to 255(2⁸ - 1)",
      "code": "0"
    },
    {
      "name": "short",
      "description": "Short (16-bit): -32768(-2¹⁶) to 32767(2¹⁶ - 1)",
      "code": "0"
    },
    {
      "name": "ushort",
      "description": "UShort (16-bit): 0 to 65535(2¹⁶ - 1)",
      "code": "0"
    },
    {
      "name": "int",
      "description": "Int (32-bit): -2147483648(-2³¹) to 2147483647(2³¹ - 1)",
      "code": "0"
    },
    {
      "name": "uint",
      "description": "UInt (32-bit): 0 to 4294967295(2³¹ - 1)",
      "code": "0"
    },
    {
      "name": "long",
      "description": "Long (64-bit): -9223372036854775808(-2⁶³) to 9223372036854775807(2⁶³ - 1)",
      "code": "0L"
    },
    {
      "name": "ulong",
      "description": "ULong (64-bit): 0 to 18446744073709551615(2⁶³ - 1)",
      "code": "0L"
    },
    {
      "name": "float",
      "description": "Float: -3.4028235E38 to 3.4028235E38",
      "code": "0.0f"
    },
    {
      "name": "double",
      "description": "Double: -1.7976931348623157E308 to 1.7976931348623157E308",
      "code": "0.0"
    }
  ],
  "reservedKeywords": [
    "as",
    "break",
    "class",
    "continue",
    "do",
    "else",
    "false",
    "for",
    "fun",
    "if",
    "in",
    "interface",
    "is",
    "null",
    "object",
    "package",
    "return",
    "super",
    "this",
    "throw",
    "true",
    "try",
    "typealias",
    "typeof",
    "val",
    "var",
    "when",
    "while"
  ],
  "syntax": {
    "examples": [
      {
        "name": "hello_world",
        "description": "Hello World",
        "code": "fun main() {\n  println(\"Hello, World!\")\n}"
      }
    ],
    "comments": [
      {
        "name": "single_line_comment",
        "description": "Single line comment",
        "code": "// Single line comment"
      },
      {
        "name": "multi_line_comment",
        "description": "Multi-line comment",
        "code": "/* Multi-line\ncomment */"
      }
    ],
    "namespaces": [
      {
        "name": "namespace",
        "description": "Namespace",
        "code": "package org.example"
      }
    ],
    "imports": [
      {
        "name": "import",
        "description": "Import",
        "code": "import org.example.Foo"
      },
      {
        "name": "import_all",
        "description": "Import all from the specified module",
        "code": "import org.example.*"
      },
      {
        "name": "import_static",
        "description": "Import static members from the specified module",
        "code": "import org.example.Foo.Companion.bar"
      },
      {
        "name": "import_alias",
        "description": "Import with an alias",
        "code": "import org.example.Foo as Bar"
      },
      {
        "name": "import_partial",
        "description": "Import specific functions or variables from a module",
        "code": "import org.example.Foo.{bar, baz}"
      }
    ],
    "variables": [
      {
        "name": "var",
        "description": "var: mutable variable",
        "code": "var x = 0"
      },
      {
        "name": "val",
        "description": "val: immutable variable",
        "code": "val x = 0"
      },
      {
        "name": "null",
        "description": "Null",
        "code": "val x: Int? = null"
      },
      {
        "name": "byte",
        "description": "Byte",
        "code": "val x: Byte = 10"
      },
      {
        "name": "short",
        "description": "Short",
        "code": "val x: Short = 10"
      },
      {
        "name": "int",
        "description": "Int",
        "code": "val x: Int = 10"
      },
      {
        "name": "long",
        "description": "Long",
        "code": "val x: Long = 10L"
      },
      {
        "name": "float",
        "description": "Float",
        "code": "val x: Float = 10.0f"
      },
      {
        "name": "double",
        "description": "Double",
        "code": "val x: Double = 10.0"
      },
      {
        "name": "char",
        "description": "Char",
        "code": "val x: Char = 'a'"
      },
      {
        "name": "string",
        "description": "String",
        "code": "val x: String = \"Hello, World!\""
      },
      {
        "name": "boolean",
        "description": "Boolean",
        "code": "val x: Boolean = true"
      },
      {
        "name": "unit",
        "description": "Unit",
        "code": "val x: Unit = Unit"
      },
      {
        "name": "array",
        "description": "Array",
        "code": "val x: Array<Int> = arrayOf(1, 2, 3)"
      },
      {
        "name": "list_immutable",
        "description": "List immutable",
        "code": "val x: List<Int> = listOf(1, 2, 3)"
      },
      {
        "name": "list_mutable",
        "description": "List mutable",
        "code": "val x: MutableList<Int> = mutableListOf(1, 2, 3)"
      },
      {
        "name": "set",
        "description": "Set",
        "code": "val x: Set<Int> = setOf(1, 2, 3)"
      },
      {
        "name": "map",
        "description": "Map",
        "code": "val x: Map<String, Int> = mapOf(\"a\" to 1, \"b\" to 2, \"c\" to 3)\nval y = mapOf<String, Int>(\"a\" to 1, \"b\" to 2, \"c\" to 3)"
      }
    ],
    "bitwiseOperators": [
      {
        "name": "and",
        "description": "AND",
        "code": "val x = x and y"
      },
      {
        "name": "or",
        "description": "OR",
        "code": "val x = x or y"
      },
      {
        "name": "xor",
        "description": "XOR",
        "code": "val x = x xor y"
      },
      {
        "name": "inverse",
        "description": "Inverse (~)",
        "code": "val x = x.inv()"
      },
      {
        "name": "shift_left",
        "description": "Signed shift left",
        "code": "val x = x shl y"
      },
      {
        "name": "shift_right",
        "description": "Signed shift right",
        "code": "val x = x shr y"
      },
      {
        "name": "shift_right_unsigned",
        "description": "Unsigned shift right",
        "code": "val x = x ushr y"
      }
    ],
    "functions": [
      {
        "name": "main function",
        "description": "Main function",
        "code": "fun main() {\n  println(\"Hello, World!\")\n}"
      },
      {
        "name": "function_declaration",
        "description": "Function declaration",
        "code": "fun myFunc() {}"
      },
      {
        "name": "function_with_parameters",
        "description": "Function with parameters",
        "code": "fun myFunc(x: Int) {}"
      },
      {
        "name": "function_with_return",
        "description": "Function with return",
        "code": "fun myFunc(): Int {}"
      },
      {
        "name": "function_short",
        "description": "Function shortcut",
        "code": "fun even(x: Int) = x % 2 == 0"
      },
      {
        "name": "function_throws_exception",
        "description": "Function throws (propagates) exception to the next function",
        "code": "fun myFunc() {\n  throw Exception()\n}"
      },
      {
        "name": "function_generic_declaration",
        "description": "Generic function declaration",
        "code": "fun <T, R> myFunc(x: T): R {}"
      },
      {
        "name": "lambda",
        "description": "Lambda",
        "code": "val add = { x: Int, y: Int -> x + y }"
      },
      {
        "name": "inline_function",
        "description": "Inline function",
        "code": "inline fun myFunc(x: Int) {}"
      }
    ],
    "flowControls": [
      {
        "name": "if",
        "description": "If",
        "code": "if (true) {}"
      },
      {
        "name": "if_else",
        "description": "If-else"
      },
      {
        "name": "elvis_operator",
        "description": "Elvis operator",
        "code": "val x = y ?: z"
      },
      {
        "name": "safe_call_operator",
        "description": "Safe call operator",
        "code": "val x = y?.z"
      },
      {
        "name": "for_increment",
        "description": "For loop increment",
        "code": "for (i in 1..10) {}"
      },
      {
        "name": "for_increment_step",
        "description": "For loop increment with step",
        "code": "for (i in 1..10 step 2) {}"
      },
      {
        "name": "for_decrement",
        "description": "For loop decrement",
        "code": "for (i in 10 downTo 1) {}"
      },
      {
        "name": "foreach",
        "description": "forEach loop",
        "code": "for (x in xs) {}"
      },
      {
        "name": "for_break",
        "description": "For loop with break",
        "code": "for (i in 1..10) {\n  if (i == 5) break;\n}"
      },
      {
        "name": "for_continue",
        "description": "For loop with continue",
        "code": "for (i in 1..10) {\n  if (i == 5) continue;\n}"
      },
      {
        "name": "while",
        "description": "While",
        "code": "while (true) {}"
      },
      {
        "name": "do_while",
        "description": "Do-while",
        "code": "do {} while (true)"
      }
    ],
    "structures": [
      {
        "name": "object_declaration",
        "description": "Object declaration",
        "code": "val myObj = MyObject()"
      },
      {
        "name": "class_declaration",
        "description": "Class declaration",
        "code": "class MyClass {}"
      },
      {
        "name": "data_class_declaration",
        "description": "Data class declaration",
        "code": "data class MyDataClass(val x: Int, val y: Int)"
      },
      {
        "name": "object",
        "description": "Object (singleton)",
        "code": "object MyObject {}"
      },
      {
        "name": "class_with_constructor",
        "description": "Class with constructor",
        "code": "class MyClass(val x: Int, val y: Int)"
      },
      {
        "name": "class_with_overloaded_constructor",
        "description": "Class with overloaded constructor",
        "code": "class MyClass(val x: Int, val y: Int) {\n  constructor(x: Int): this(x, 0)\n}"
      },
      {
        "name": "interface_declaration",
        "description": "Interface declaration",
        "code": "interface MyInterface {}"
      },
      {
        "name": "enum_declaration",
        "description": "Enum declaration",
        "code": "enum class MyEnum { RED, GREEN, BLUE }"
      },
      {
        "name": "class_inheritance",
        "description": "Class inheritance",
        "code": "class MyClass: MySuperClass {}"
      },
      {
        "name": "interface_implementation",
        "description": "Interface implementation",
        "code": "class MyClass: MyInterface {}"
      },
      {
        "name": "class_inheritance_super_constructor",
        "description": "Class inheritance with super constructor",
        "code": "class MyClass(x: Int): MySuperClass(x)"
      },
      {
        "name": "nested_class",
        "description": "Nested class",
        "code": "class Outer {\n  class Inner {}\n}"
      },
      {
        "name": "generic_class",
        "description": "Generic class",
        "code": "class MyGenericClass<T>(val x: T)"
      },
      {
        "name": "generic_class_usage",
        "description": "Generic class usage",
        "code": "val x = MyGenericClass<String>(\"Hello\")"
      },
      {
        "name": "generic_enum",
        "description": "Generic enum",
        "code": "enum class MyGenericEnum<T>(val value: T)"
      },
      {
        "name": "generic_interface",
        "description": "Generic interface",
        "code": "interface MyGenericInterface<T>"
      }
    ],
    "errorHandling": [
      {
        "name": "try_catch",
        "description": "Try-catch statement",
        "code": "try {\n  // Do something\n} catch (e: Exception) {\n  // Handle exception\n}"
      },
      {
        "name": "throw",
        "description": "Throw statement",
        "code": "throw Exception()"
      },
      {
        "name": "try_finally",
        "description": "Try-finally statement",
        "code": "try {\n  // Do something\n} finally {\n  // Cleanup\n}"
      },
      {
        "name": "try_catch_finally",
        "description": "Try-catch-finally statement",
        "code": "try {\n  // Do something\n} catch (e: Exception) {\n  // Handle exception\n} finally {\n  // Cleanup\n}"
      },
      {
        "name": "try_with_resources",
        "description": "Try-with-resources statement",
        "code": "BufferedReader(FileReader(fileName)).use { reader ->\n    var line: String?\n    while (reader.readLine().also { line = it } != null) {\n        println(line)\n    }\n}"
      }
    ],
    "concurrency": [
      {
        "name": "thread",
        "description": "Thread",
        "code": "val thread = Thread {\n  // Do something\n}"
      },
      {
        "name": "coroutine",
        "description": "Coroutine",
        "code": "val coroutine = GlobalScope.launch {\n  // Do something\n}"
      },
      {
        "name": "suspend_function",
        "description": "Suspend function",
        "code": "suspend fun foo() {\n  // Do something\n}"
      }
    ]
  }
}
