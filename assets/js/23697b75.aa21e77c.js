"use strict";(self.webpackChunkclassic=self.webpackChunkclassic||[]).push([[9758],{20624:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>p,contentTitle:()=>f,default:()=>x,frontMatter:()=>g,metadata:()=>m,toc:()=>v});var r=t(11527),i=t(84135),a=t(40521),s=t(74109),c=t(80035);const o='package main\n\nimport (\n    "sort"\n)\n\nfunc bucketSort(arr []float64) {\n    if len(arr) <= 1 {\n        return\n    }\n\n    n := len(arr)\n    buckets := make([][]float64, n)\n\n    for _, v := range arr {\n        index := int(v * float64(n))\n        buckets[index] = append(buckets[index], v)\n    }\n\n    for i := 0; i < n; i++ {\n        sort.Float64s(buckets[i])\n    }\n\n    k := 0\n    for i := 0; i < n; i++ {\n        for j := 0; j < len(buckets[i]); j++ {\n            arr[k] = buckets[i][j]\n            k++\n        }\n    }\n}\n',l="import java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\n\npublic class BucketSort {\n\n  public static void bucketSort(double[] arr) {\n    if (arr.length <= 1) {\n      return;\n    }\n\n    int n = arr.length;\n    List<Double>[] buckets = new ArrayList[n];\n\n    for (int i = 0; i < n; i++) {\n      buckets[i] = new ArrayList<>();\n    }\n\n    for (double v : arr) {\n      int index = (int) (v * n);\n      buckets[index].add(v);\n    }\n\n    for (int i = 0; i < n; i++) {\n      Collections.sort(buckets[i]);\n    }\n\n    int k = 0;\n    for (int i = 0; i < n; i++) {\n      for (int j = 0; j < buckets[i].size(); j++) {\n        arr[k] = buckets[i].get(j);\n        k++;\n      }\n    }\n  }\n}\n",u="function bucketSort(arr) {\n  if (arr.length <= 1) {\n    return arr;\n  }\n\n  const n = arr.length;\n  const buckets = Array.from({ length: n }, () => []);\n\n  for (let i = 0; i < n; i++) {\n    const index = Math.floor(arr[i] * n);\n    buckets[index].push(arr[i]);\n  }\n\n  for (let i = 0; i < n; i++) {\n    buckets[i].sort((a, b) => a - b);\n  }\n\n  let k = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < buckets[i].length; j++) {\n      arr[k] = buckets[i][j];\n      k++;\n    }\n  }\n}\n",d="fun bucketSort(arr: DoubleArray) {\n    if (arr.size <= 1) {\n        return\n    }\n\n    val n = arr.size\n    val buckets = Array(n) { mutableListOf<Double>() }\n\n    for (v in arr) {\n        val index = (v * n).toInt()\n        buckets[index].add(v)\n    }\n\n    for (i in 0 until n) {\n        buckets[i].sort()\n    }\n\n    var k = 0\n    for (i in 0 until n) {\n        for (j in 0 until buckets[i].size) {\n            arr[k] = buckets[i][j]\n            k++\n        }\n    }\n}\n",b="def bucket_sort(arr):\n    if len(arr) <= 1:\n        return\n\n    n = len(arr)\n    buckets = [[] for _ in range(n)]\n\n    for v in arr:\n        index = int(v * n)\n        buckets[index].append(v)\n\n    for bucket in buckets:\n        bucket.sort()\n\n    k = 0\n    for i in range(n):\n        for j in range(len(buckets[i])):\n            arr[k] = buckets[i][j]\n            k += 1\n",h="fn bucket_sort(arr: &mut [f64]) {\n    if arr.len() <= 1 {\n        return;\n    }\n\n    let n = arr.len();\n    let mut buckets: Vec<Vec<f64>> = vec![vec![]; n];\n\n    for &v in arr.iter() {\n        let index = (v * n as f64) as usize;\n        buckets[index].push(v);\n    }\n\n    for bucket in buckets.iter_mut() {\n        bucket.sort_by(|a, b| a.partial_cmp(b).unwrap());\n    }\n\n    let mut k = 0;\n    for bucket in buckets.iter() {\n        for &v in bucket.iter() {\n            arr[k] = v;\n            k += 1;\n        }\n    }\n}\n",k="function bucketSort(arr: number[]): void {\n  if (arr.length <= 1) {\n    return;\n  }\n\n  const n = arr.length;\n  const buckets: number[][] = Array.from({ length: n }, () => []);\n\n  for (const v of arr) {\n    const index = Math.floor(v * n);\n    buckets[index].push(v);\n  }\n\n  for (const bucket of buckets) {\n    bucket.sort((a, b) => a - b);\n  }\n\n  let k = 0;\n  for (const bucket of buckets) {\n    for (const v of bucket) {\n      arr[k] = v;\n      k++;\n    }\n  }\n}\n",g={title:"Bucket Sort",description:"Bucket Sort",hide_table_of_contents:!0},f=void 0,m={id:"education/computer-science/algorithms/algo/bucket-sort",title:"Bucket Sort",description:"Bucket Sort",source:"@site/docs/education/01-computer-science/10-algorithms/03-algo/bucket-sort.mdx",sourceDirName:"education/01-computer-science/10-algorithms/03-algo",slug:"/education/computer-science/algorithms/algo/bucket-sort",permalink:"/tech-labs/docs/education/computer-science/algorithms/algo/bucket-sort",draft:!1,unlisted:!1,editUrl:"https://github.com/EliFuzz/tech-labs/docs/education/01-computer-science/10-algorithms/03-algo/bucket-sort.mdx",tags:[],version:"current",frontMatter:{title:"Bucket Sort",description:"Bucket Sort",hide_table_of_contents:!0},sidebar:"education",previous:{title:"Bubble Sort",permalink:"/tech-labs/docs/education/computer-science/algorithms/algo/bubble-sort"},next:{title:"Caesar Cipher",permalink:"/tech-labs/docs/education/computer-science/algorithms/algo/caesar-cipher"}},p={},v=[{value:"Definition",id:"definition",level:2},{value:"Practice",id:"practice",level:2}];function j(n){const e={code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.a)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.h2,{id:"definition",children:"Definition"}),"\n",(0,r.jsxs)(a.Z,{children:[(0,r.jsx)(s.Z,{value:"definition",label:"Definition",children:(0,r.jsx)(e.p,{children:"Bucket Sort is a comparison sort algorithm that works by distributing the elements of an array into a number of buckets. Each bucket is then sorted individually, either using a different sorting algorithm or by recursively applying the bucket sort algorithm"})}),(0,r.jsx)(s.Z,{value:"how",label:"Explanation",children:(0,r.jsx)(e.p,{children:"The Bucket Sort algorithm starts by dividing the input data's range into equally-sized buckets. Then, it distributes each element from the input array into its corresponding bucket based on a predefined function. Subsequently, it sorts each bucket separately, employing either a recursive application of Bucket Sort or another sorting algorithm. Finally, it concatenates the sorted buckets to produce the final sorted array"})}),(0,r.jsx)(s.Z,{value:"guidance",label:"Guidance",children:(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Determine the range of the input data"}),"\n",(0,r.jsx)(e.li,{children:"Create an array of empty buckets"}),"\n",(0,r.jsx)(e.li,{children:"Iterate through the input array, placing each element into its corresponding bucket"}),"\n",(0,r.jsx)(e.li,{children:"Sort each bucket, either by recursively applying bucket sort or using another sorting algorithm"}),"\n",(0,r.jsx)(e.li,{children:"Concatenate the sorted buckets into a single sorted array"}),"\n"]})}),(0,r.jsx)(s.Z,{value:"tips",label:"Tips",children:(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"choose an appropriate function to map elements to buckets, ensuring even distribution"}),"\n",(0,r.jsx)(e.li,{children:"consider the distribution of input data when choosing the number and size of buckets"}),"\n",(0,r.jsx)(e.li,{children:"use an efficient sorting algorithm to sort individual buckets"}),"\n",(0,r.jsx)(e.li,{children:"be mindful of the memory usage when working with large datasets, as bucket sort can require additional space for the buckets"}),"\n"]})})]}),"\n",(0,r.jsx)(e.h2,{id:"practice",children:"Practice"}),"\n",(0,r.jsxs)(a.Z,{children:[(0,r.jsx)(s.Z,{value:"practice",label:"Practice",children:(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:"bucketSort(arr):\n  n = length(arr)\n  create n empty buckets\n  max_val = maximum value in arr\n  min_val = minimum value in arr\n  range = (max_val - min_val) / n\n\n  // Scatter elements into buckets\n  for each element in arr:\n    bucket_index = (element - min_val) / range\n    append element to bucket[bucket_index]\n\n  // Sort each bucket\n  for each bucket in buckets:\n    sort(bucket)\n\n  // Concatenate sorted buckets\n  sorted_arr = []\n  for each bucket in buckets:\n    append bucket to sorted_arr\n\n  return sorted_arr\n"})})}),(0,r.jsx)(s.Z,{value:"solution",label:"Solution",children:(0,r.jsxs)(a.Z,{queryString:"code",children:[(0,r.jsx)(s.Z,{value:"go",label:"",attributes:{title:"Go Lang",className:"code_lang go m"},children:(0,r.jsx)(c.Z,{language:"go",children:o})}),(0,r.jsx)(s.Z,{value:"java",label:"",attributes:{title:"Java",className:"code_lang java m"},children:(0,r.jsx)(c.Z,{language:"java",children:l})}),(0,r.jsx)(s.Z,{value:"js",label:"",attributes:{title:"JavaScript",className:"code_lang js m"},children:(0,r.jsx)(c.Z,{language:"js",children:u})}),(0,r.jsx)(s.Z,{value:"kotlin",label:"",attributes:{title:"Kotlin",className:"code_lang kotlin m"},children:(0,r.jsx)(c.Z,{language:"kotlin",children:d})}),(0,r.jsx)(s.Z,{value:"python",label:"",attributes:{title:"Python",className:"code_lang python m"},children:(0,r.jsx)(c.Z,{language:"python",children:b})}),(0,r.jsx)(s.Z,{value:"rust",label:"",attributes:{title:"Rust",className:"code_lang rust m"},children:(0,r.jsx)(c.Z,{language:"rust",children:h})}),(0,r.jsx)(s.Z,{value:"ts",label:"",attributes:{title:"TypeScript",className:"code_lang ts m"},children:(0,r.jsx)(c.Z,{language:"ts",children:k})})]})})]})]})}function x(n={}){const{wrapper:e}={...(0,i.a)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(j,{...n})}):j(n)}}}]);