"use strict";(self.webpackChunkclassic=self.webpackChunkclassic||[]).push([[571],{946:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>d,default:()=>h,frontMatter:()=>r,metadata:()=>c,toc:()=>o});var s=i(11527),t=i(88672);const r={title:"Bitwise Operations",description:"Bitwise Operations",hide_table_of_contents:!0},d=void 0,c={id:"education/programming-languages/bitwise-operations",title:"Bitwise Operations",description:"Bitwise Operations",source:"@site/docs/education/02-programming-languages/02-bitwise-operations.mdx",sourceDirName:"education/02-programming-languages",slug:"/education/programming-languages/bitwise-operations",permalink:"/tech-labs/docs/education/programming-languages/bitwise-operations",draft:!1,unlisted:!1,editUrl:"https://github.com/EliFuzz/tech-labs/docs/education/02-programming-languages/02-bitwise-operations.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"Bitwise Operations",description:"Bitwise Operations",hide_table_of_contents:!0},sidebar:"education",previous:{title:"Overview",permalink:"/tech-labs/docs/education/programming-languages/overview"},next:{title:"Software Development Lifecycle",permalink:"/tech-labs/docs/education/programming-languages/sdlc"}},l={},o=[{value:"Definition",id:"definition",level:2},{value:"Negative number conversion",id:"negative-number-conversion",level:2},{value:"Bitwise operations",id:"bitwise-operations",level:2}];function a(e){const n={code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"definition",children:"Definition"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Binary operation:"})," manipulation of individual bits in binary data or numbers."]}),"\n",(0,s.jsx)(n.h2,{id:"negative-number-conversion",children:"Negative number conversion"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Convert number into 2's complement (binary): ",(0,s.jsx)(n.code,{children:"7 -> 0111"})]}),"\n",(0,s.jsxs)(n.li,{children:["Invert all the bits: ",(0,s.jsx)(n.code,{children:"0111 -> 1000"})]}),"\n",(0,s.jsxs)(n.li,{children:["Add 1: ",(0,s.jsx)(n.code,{children:"1000 -> 1001"})]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"bitwise-operations",children:"Bitwise operations"}),"\n",(0,s.jsxs)("table",{children:[(0,s.jsx)("thead",{children:(0,s.jsxs)("tr",{children:[(0,s.jsx)("th",{style:{minWidth:"220px"},children:"Operator"}),(0,s.jsx)("th",{children:"Description"}),(0,s.jsx)("th",{children:"Example"})]})}),(0,s.jsxs)("tbody",{children:[(0,s.jsxs)("tr",{children:[(0,s.jsxs)("td",{children:["AND (",(0,s.jsx)(n.code,{children:"&"}),")"]}),(0,s.jsxs)("td",{children:["If both bits are ",(0,s.jsx)(n.code,{children:"1"}),", the result is ",(0,s.jsx)(n.code,{children:"1"}),"; otherwise ",(0,s.jsx)(n.code,{children:"0"})]}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-text",children:"0101 (5) &\n0011 (3)\n----\n0001 (1)\n"})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsxs)("td",{children:["OR (",(0,s.jsx)(n.code,{children:"|"}),")"]}),(0,s.jsxs)("td",{children:["If any bit is ",(0,s.jsx)(n.code,{children:"1"}),", the result is ",(0,s.jsx)(n.code,{children:"1"}),"; otherwise ",(0,s.jsx)(n.code,{children:"0"})]}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-text",children:"0101 (5) |\n0011 (3)\n----\n0111 (7)\n"})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsxs)("td",{children:["XOR: exclusive OR (",(0,s.jsx)(n.code,{children:"^"}),")"]}),(0,s.jsxs)("td",{children:["If the bits are different, the result is ",(0,s.jsx)(n.code,{children:"1"}),"; otherwise ",(0,s.jsx)(n.code,{children:"0"})]}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-text",children:"0101 (5) ^\n0011 (3)\n----\n0110 (6)\n"})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsxs)("td",{children:["NOT (",(0,s.jsx)(n.code,{children:"~"}),")"]}),(0,s.jsxs)("td",{children:["Flips the bits. Each ",(0,s.jsx)(n.code,{children:"0"})," becomes ",(0,s.jsx)(n.code,{children:"1"}),", and each ",(0,s.jsx)(n.code,{children:"1"})," becomes ",(0,s.jsx)(n.code,{children:"0"})]}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-text",children:"0000 0101 (5) ~\n--------\n1111 1010 (-6)\n"})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsxs)("td",{children:["Signed Left Shift (",(0,s.jsx)(n.code,{children:"<<"}),")"]}),(0,s.jsx)("td",{children:"Shifts the bits of the left operand to the left by a number of positions specified by the right operand"}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-text",children:"# positive number\n\n0000 0101 (5) <<\n0000 0010 (2)\n---------\n0001 0100 (20)\n\n# negative number\n\n1111 1011 (-5) <<\n0000 0010 (2)\n---------\n1110 1100 (-20)\n"})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsxs)("td",{children:["Signed Right Shift (",(0,s.jsx)(n.code,{children:">>"}),")"]}),(0,s.jsx)("td",{children:"Shifts the bits of the left operand to the right by a number of positions specified by the right operand"}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-text",children:"# positive number\n\n0101 (5) >>\n0010 (2)\n----\n0001 (1)\n\n# negative number\n\n1111 1011 (-5) >>\n0000 0010 (2)\n---------\n1111 1110 (-2)\n"})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsxs)("td",{children:["Unsigned Right Shift (",(0,s.jsx)(n.code,{children:">>>"}),")"]}),(0,s.jsx)("td",{children:"Similar to the right shift operator, but it treats the value as an unsigned integer. It fills the vacant bits on the left with zeros"}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-text",children:"# positive number\n\n0101 (5) >>>\n0010 (2)\n----\n0001 (1)\n\n# negative number\n\n1111 0101 (-5) >>>\n0000 0010 (2)\n---------\n0111 1111 1111 1111 1111 1111 1111 1110 (1073741822)\n"})})})]})]})]})]})}function h(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}}}]);