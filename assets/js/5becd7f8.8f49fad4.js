"use strict";(self.webpackChunkclassic=self.webpackChunkclassic||[]).push([[9327],{10917:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>_,contentTitle:()=>y,default:()=>j,frontMatter:()=>x,metadata:()=>b,toc:()=>v});var t=i(11527),o=i(88672),r=i(29140),a=i(52360),c=i(52296),s=i(92951);const d=e=>{let{data:n}=e;return(0,t.jsx)(t.Fragment,{children:(0,t.jsx)(r.Z,{children:n.map((e=>(0,t.jsx)(a.Z,{value:e.key,label:"",attributes:{title:"Go Lang",className:"code_lang m "+e.key},children:(0,t.jsxs)(r.Z,{queryString:"type",children:[(0,t.jsx)(a.Z,{value:"Syntax",label:"Syntax",children:(0,t.jsxs)(r.Z,{queryString:"syntax",children:[(0,t.jsx)(a.Z,{value:"Examples",label:"Examples",attributes:{className:"tabs__vertical"},children:e.syntax?.examples?.map((n=>(0,t.jsx)(c.Z,{language:e.key,title:n.description,children:n.code},n.name)))}),(0,t.jsx)(a.Z,{value:"Comments",label:"Comments",children:e.syntax?.comments?.map((n=>(0,t.jsx)(c.Z,{language:e.key,title:n.description,children:n.code},n.name)))}),(0,t.jsx)(a.Z,{value:"Namespaces",label:"Namespaces",children:e.syntax?.namespaces?.map((n=>(0,t.jsx)(c.Z,{language:e.key,title:n.description,children:n.code},n.name)))}),(0,t.jsx)(a.Z,{value:"Imports",label:"Imports",children:e.syntax?.imports?.map((n=>(0,t.jsx)(c.Z,{language:e.key,title:n.description,children:n.code},n.name)))}),(0,t.jsx)(a.Z,{value:"Variables",label:"Variables",children:e.syntax?.variables?.map((n=>(0,t.jsx)(c.Z,{language:e.key,title:n.description,children:n.code},n.name)))}),(0,t.jsx)(a.Z,{value:"bitwiseOperators",label:"Bitwise Operators",children:e.syntax?.bitwiseOperators?.map((n=>(0,t.jsx)(c.Z,{language:e.key,title:n.description,children:n.code},n.name)))}),(0,t.jsx)(a.Z,{value:"Functions",label:"Functions",children:e.syntax?.functions?.map((n=>(0,t.jsx)(c.Z,{language:e.key,title:n.description,children:n.code},n.name)))}),(0,t.jsx)(a.Z,{value:"Flow Controls",label:"Flow Controls",children:e.syntax?.flowControls?.map((n=>(0,t.jsx)(c.Z,{language:e.key,title:n.description,children:n.code},n.name)))}),(0,t.jsx)(a.Z,{value:"Structures",label:"Structures",children:e.syntax?.structures?.map((n=>(0,t.jsx)(c.Z,{language:e.key,title:n.description,children:n.code},n.name)))}),(0,t.jsx)(a.Z,{value:"Error Handling",label:"Error Handling",children:e.syntax?.errorHandling?.map((n=>(0,t.jsx)(c.Z,{language:e.key,title:n.description,children:n.code},n.name)))}),(0,t.jsx)(a.Z,{value:"Concurrency",label:"Concurrency",children:e.syntax?.concurrency?.map((n=>(0,t.jsx)(c.Z,{language:e.key,title:n.description,children:n.code},n.name)))})]})}),(0,t.jsx)(a.Z,{value:"Data Types",label:"Data Types",children:e?.dataTypes?.map((n=>(0,t.jsx)(c.Z,{language:e.key,title:`${n.name} - ${n.description}`,children:n.code},n.name)))}),(0,t.jsx)(a.Z,{value:"Keywords",label:"Reserved Keywords",children:(0,t.jsx)(s.Z,{size:"small",bordered:!0,dataSource:e.reservedKeywords||[],renderItem:e=>(0,t.jsx)(s.Z.Item,{children:e})})})]})},e.key)))})})},l=JSON.parse('{"key":"go","metadata":{"name":"Go","url":"https://golang.org/","logo":"/static/img/lang/go.svg"},"dataTypes":[{"name":"bool","description":"Boolean","code":"true"},{"name":"string","description":"UTF-8 string","code":"\\"Hello, World!\\""},{"name":"byte","description":"Byte (8-bit) - alias for uint8: 0 to 255(2\u2078 - 1)","code":"0"},{"name":"int8","description":"Signed Integer (8-bit): -128(-2\u2078) to 127(2\u2078 - 1)","code":"-0"},{"name":"uint8","description":"Unsigned Integer (8-bit): 0 to 255(2\u2078 - 1)","code":"0"},{"name":"int16","description":"Signed Integer (16-bit): -32768(-2\xb9\u2076) to 32767(2\xb9\u2076 - 1)","code":"-0"},{"name":"uint16","description":"Unsigned Integer (16-bit): 0 to 65535(2\xb9\u2076 - 1)","code":"0"},{"name":"int32","description":"Signed Integer (32-bit): -2147483648(-2\xb3\xb9) to 2147483647(2\xb3\xb9 - 1)","code":"-0"},{"name":"uint32","description":"Unsigned Integer (32-bit): 0 to 4294967295(2\xb3\xb9 - 1)","code":"0"},{"name":"int64","description":"Signed Integer (64-bit): -9223372036854775808(-2\u2076\xb3) to 9223372036854775807(2\u2076\xb3 - 1)","code":"-0"},{"name":"uint64","description":"Unsigned Integer (64-bit): 0 to 18446744073709551615(2\u2076\xb3 - 1)","code":"0"},{"name":"int","description":"Signed Integer (32/64-bit) - platform dependent","code":"0"},{"name":"uint","description":"Unsigned Integer (32/64-bit) - platform dependent","code":"0"},{"name":"uintptr","description":"Unsigned Integer (pointer size) - platform dependent","code":"0xc82000c290"},{"name":"rune","description":"Rune - alias for int32: represents a Unicode code point","code":"0"},{"name":"float32","description":"32-bit floating point: -3.4028234663852886e+38 to 3.4028234663852886e+38","code":"0.0"},{"name":"float64","description":"64-bit floating point: -1.7976931348623157e+308 to 1.7976931348623157e+308","code":"0.0"},{"name":"complex64","description":"32-bit complex number: -3.4028234663852886e+38 to 3.4028234663852886e+38","code":"complex(8,-5)"},{"name":"complex128","description":"64-bit complex number: -1.7976931348623157e+308 to 1.7976931348623157e+308","code":"complex(8,-5)"}],"reservedKeywords":["break","case","chan","const","continue","default","defer","else","fallthrough","for","func","go","goto","if","import","interface","map","package","range","return","select","struct","switch","type","var"],"syntax":{"examples":[{"name":"hello_world","description":"Hello World","code":"package main\\n\\nimport \\"fmt\\"\\n\\nfunc main() {\\n  fmt.Println(\\"Hello, World!\\")\\n}"}],"comments":[{"name":"single_line_comment","description":"Single line comment","code":"// Single line comment"},{"name":"multi_line_comment","description":"Multi-line comment","code":"/* Multi-line\\ncomment */"}],"namespaces":[{"name":"namespace","description":"Package: every source file begins with a package clause. \'main\' denotes an executable, not a library","code":"package main"}],"imports":[{"name":"package_standard_library","description":"package in the Go standard library","code":"import \\"fmt\\""},{"name":"package_nested","description":"Implements some I/O utility functions","code":"import \\"io/ioutil\\""},{"name":"package_alias","description":"Import with alias m","code":"import m \\"math\\""},{"name":"package_github","description":"Package in the github.com/google/uuid library","code":"import \\"github.com/google/uuid\\""}],"variables":[{"name":"variable_declaration","description":"Variable declaration","code":"var x int"},{"name":"variable_assignment","description":"Variable assignment","code":"var x int\\nx = 8"},{"name":"variable_assignment_with_type","description":"Variable assignment with type","code":"var x uint = 8"},{"name":"short_declaration","description":"Short declaration","code":"x:=8"},{"name":"multiple_return_values","description":"Multiple return values","code":"sum, prod := sum(x, y)"},{"name":"string","description":"String","code":"str := \\"Hello, World!\\""},{"name":"multiline_string","description":"Multiline string","code":"str := `A \\"raw\\" string literal\\n\\ncan include line breaks.`"},{"name":"string_interpolation","description":"String interpolation","code":"message := fmt.Sprintf(\\"Hello, my name is %s\\", name)"},{"name":"rune","description":"Rune, an alias for int32, represents a Unicode code point","code":"g := \'\u03a3\'"},{"name":"float","description":"Float64","code":"f := 3.14159"},{"name":"complex","description":"Complex128: represented internally with 2 float64\'s","code":"c := 3 + 4i"},{"name":"convertion_syntax","description":"Conversion syntax","code":"n := byte(\'\\\\n\')"},{"name":"byte_slice","description":"Byte slice","code":"bs := []byte(\\"hello\\")"},{"name":"array_initialization","description":"Array initialization with 0\'s","code":"var arr [4]int"},{"name":"array_initialization_with_values","description":"Array initialization with values","code":"arr := [...]int{3, 1, 8, 88, 100}"},{"name":"array_copy","description":"Copy of arr, 2 separate instances","code":"arr_copy := arr"},{"name":"array_update","description":"Update value at index 0, only arr_copy is affected","code":"arr_copy[0] = 8"},{"name":"2d_array_declaration","description":"2D array declaration with 0\'s","code":"var d2 [][]float64"},{"name":"slice_initialization_with_0","description":"Slice initialization with 0\'s","code":"sl := make([]int, 4)"},{"name":"slice_initialization_with_values","description":"Slice initialization with values","code":"sl := []int{4, 8, 9}"},{"name":"slice_copy","description":"Copy of slice. Both variables point to the same instance therefore update both","code":"sl_copy := sl\\nsl_copy[0] = 8"},{"name":"slice_append","description":"Append to slice","code":"sl = append(sl, 8)"},{"name":"slice_append_another_slice","description":"Append another slice","code":"sl = append(sl, []int{8, 9}...)"},{"name":"pointer","description":"Pointer","code":"p := 5\\nfmt.Println(*p)"},{"name":"unused_variable","description":"Unused variable","code":"_ := myFunc()"},{"name":"map_initialization","description":"Map initialization","code":"m := map[string]int{\\"3\\": 3, \\"4\\": 4}\\nm[\\"1\\"] = 1"},{"name":"variadic_parameters_func_input","description":"Variadic parameters function input","code":"func myFunc(x...int) {}"},{"name":"variadic_parameters_passing","description":"Variadic parameters passing to function","code":"myFunc(arr...)"}],"bitwiseOperators":[{"name":"and","description":"AND","code":"x := x & y\\nx &= y"},{"name":"or","description":"OR","code":"x := x | y\\nx |= y"},{"name":"xor","description":"XOR","code":"x := x ^ y\\nx ^= y"},{"name":"shift_left","description":"Shift left","code":"x := x << y\\nx <<= y"},{"name":"shift_right","description":"Shift right","code":"x := x >> y\\nx >>= y"},{"name":"bit_clear_not","description":"Bit clear (AND NOT)","code":"/*\\nclears bits in the first operand\\nwhere corresponding bits in the second operand are set (equal to 1),\\nwhile leaving the bits unchanged\\nwhere corresponding bits in the second operand are clear (equal to 0)\\n*/\\nx := x &^ y\\nx &^= y"}],"functions":[{"name":"main","description":"Main function","code":"func main() {}"},{"name":"custom_function_declaration","description":"Custom function declaration","code":"func myFunc() {}"},{"name":"function_with_parameters","description":"Function with parameters","code":"func myFunc(x int) {}"},{"name":"function_with_return","description":"Function with return","code":"func myFunc() int {}"},{"name":"function_with_multiple_return","description":"Function with multiple return","code":"func sum(x, y int) (sum, prod int) {\\n  return x + y, x * y\\n}"},{"name":"function_with_named_return","description":"Function with named return","code":"func sum(x, y int) (sum int) {\\n  sum = x + y\\n  return\\n}"},{"name":"call","description":"Call function","code":"myFunc()"},{"name":"call_with_parameters","description":"Call function with parameters","code":"myFunc(8)"},{"name":"closure_initialization","description":"Closure initialization","code":"x := func() bool {\\n  return x > 1000\\n}"},{"name":"closure_call","description":"Closure call","code":"x()"},{"name":"closure_inline","description":"Closure inline","code":"x := func() bool { return x > 1000 }()"},{"name":"anonymous_function","description":"Anonymous function","code":"func(a, b int) int {\\n  return (a + b) * 2\\n}(8, 2)"},{"name":"defer","description":"Defer statements execute function calls in reverse order after the surrounding function returns, commonly used for tasks like file closure to keep related operations close in code","code":"defer myFunc()"},{"name":"decorator","description":"Decorators","code":"func myFunc(str string) func(before, after string) string {\\n  return func(before, after string) string {\\n    return fmt.Sprintf(\\"%s %s %s\\", before, str, after)  \\n  }\\n}"}],"flowControls":[{"name":"if","description":"If statement","code":"if true {}"},{"name":"if_else","description":"If-else statement","code":"if true {} else {}"},{"name":"switch","description":"Switch statement","code":"x := 48.0\\nswitch x {\\n  case 0:\\n  case 1, 2:\\n  case 48:\\n  case 49:\\n    // Unreached.\\n  default:\\n}"},{"name":"type_switch","description":"Type switch statement","code":"var data interface{}\\ndata = \\"\\"\\nswitch c := data.(type) {\\n  case string:\\n    fmt.Println(c, \\"string\\")\\n  case int64:\\n    fmt.Printf(\\"%d int64\\\\n\\", c)\\n  default:\\n}"},{"name":"for","description":"For statement","code":"for x := 0; x < 3; x++ {\\n  fmt.Println(x)\\n}"},{"name":"for_break","description":"For statement with break","code":"for x := 0; x < 3; x++ {\\n  if x == 1 {\\n    break\\n  }\\n  fmt.Println(x)\\n}"},{"name":"for_continue","description":"For statement with continue","code":"for x := 0; x < 3; x++ {\\n  if x == 1 {\\n    continue\\n  }\\n  fmt.Println(x)\\n}"},{"name":"for_range","description":"For statement with range. Range is used to iterate over an array, a slice, a string, a map, or a channel","code":"for key, value := range map[string]int{\\"1\\": 1, \\"2\\": 2, \\"3\\": 3} {\\n  fmt.Printf(\\"key=%s, value=%d\\\\n\\", key, value)\\n}"}],"structures":[{"name":"interface_initialization","description":"Interface initialization","code":"type myInterface interface {\\n  myMethod()\\n}"},{"name":"interface_implementation","description":"Interface implementation","code":"type myInterface interface {\\n  myMethod()\\n}\\n\\nclass myClass implements myInterface {\\n  myMethod() {\\n    fmt.Println(\\"myMethod\\")\\n  }\\n}"},{"name":"struct_initialization","description":"Struct initialization","code":"type myStruct struct {\\n  myField int\\n}"}],"errorHandling":[{"name":"ok_idiom","description":"Ok idiom","code":"m := map[int]string{8: \\"8\\"}\\nif x, ok := m[1]; ok {\\n  fmt.Print(x)\\n} else {\\n  fmt.Print(\\"missing\\")\\n}"},{"name":"error_idiom","description":"Error idiom","code":"if _, err := myFunc(); err != nil {\\n  fmt.Println(err)\\n}"},{"name":"panic","description":"Panic: throw an error","code":"panic(\\"error\\")"},{"name":"recover","description":"Recover: catch an error","code":"if err := recover(); err != nil {\\n  fmt.Println(err)\\n}"}],"concurrency":[{"name":"goroutine","description":"Goroutine","code":"go myFunc()"},{"name":"channel_initialization","description":"Channel initialization","code":"c := make(chan int)"},{"name":"channel","description":"Channel","code":"func inc(i int, c chan int) {\\n  c <- i + 1\\n}"},{"name":"channel_send_inline","description":"Channel send inline","code":"c <- 8"},{"name":"channel_send_function","description":"Channel send function","code":"go inc(8, c)"},{"name":"channel_receive","description":"Channel receive","code":"x := <-c"}]}}'),m=JSON.parse('{"key":"java","metadata":{"name":"Java","url":"https://www.java.com/","logo":"/static/img/lang/java.svg"},"dataTypes":[{"name":"byte","description":"Byte: -128 to 127","code":"0"},{"name":"short","description":"Short: -32768 to 32767","code":"0"},{"name":"int","description":"Integer: -2147483648 to 2147483647","code":"0"},{"name":"long","description":"Long: -9223372036854775808 to 9223372036854775807","code":"0L"},{"name":"float","description":"Float: -3.4028235E38 to 3.4028235E38","code":"0.0f"},{"name":"double","description":"Double: -1.7976931348623157E308 to 1.7976931348623157E308","code":"0.0"},{"name":"char","description":"Character","code":"\'\\\\u0000\'"},{"name":"string","description":"UTF-16 string","code":"\\"Hello, World!\\""},{"name":"boolean","description":"Boolean","code":"true"}],"reservedKeywords":["abstract","continue","for","new","switch","assert","default","goto","package","synchronized","boolean","do","if","private","this","break","double","implements","protected","throw","byte","else","import","public","throws","case","enum","instanceof","return","transient","catch","extends","int","short","try","char","final","interface","static","void","class","finally","long","strictfp","volatile","const","float","native","super","while"],"syntax":{"examples":[{"name":"hello_world","description":"Hello World","code":"public class Main {\\n  public static void main(String[] args) {\\n    System.out.println(\\"Hello, World!\\");\\n  }\\n}"}],"comments":[{"name":"single_line_comment","description":"Single line comment","code":"// Single line comment"},{"name":"multi_line_comment","description":"Multi-line comment","code":"/* Multi-line\\ncomment */"},{"name":"JavaDoc_comment","description":"JavaDoc comment","code":"/**\\n * @author      Name (and contact information such as email) of author(s).\\n * @version     Current version of the program.\\n * @since       When this part of the program was first added.\\n * @param       For describing the different parameters for a method.\\n * @return      For describing what the method returns.\\n * @deprecated  For showing the code is outdated or shouldn\'t be used.\\n * @see         Links to another part of documentation.\\n*/"}],"namespaces":[{"name":"package","description":"Package organizes Java classes into namespaces (groups), providing a unique namespace for each type it contains","code":"package org.example"}],"imports":[{"name":"single_namespace","description":"Single namespace","code":"import java.util.ArrayList;"},{"name":"import_static","description":"Import static class","code":"import static java.lang.Math.PI;"},{"name":"multi_namespace","description":"Import all classes inside of the package","code":"import java.util.*;"}],"variables":[{"name":"var","description":"Variable","code":"var x = 1;"},{"name":"declare_variable","description":"Declare variable","code":"int x;"},{"name":"declare_multiple_variables","description":"Declare multiple variables","code":"int x, y, z;"},{"name":"variable_initialization","description":"Variable initialization","code":"int x = 0;"},{"name":"multiple_variable_initialization","description":"Multiple variable initialization","code":"int x, y, z;\\nx = y = z = 1;"},{"name":"multiple_variable_initialization_inline","description":"Multiple variable initialization inline","code":"int x = 1, y = 2, z = 3;"},{"name":"byte","description":"Byte","code":"byte x = 1; // primitive\\nByte y = 1; // object"},{"name":"short","description":"Short","code":"short x = 1; // primitive\\nShort x = 1; // object"},{"name":"integer","description":"Integer","code":"int = 1; // primitive\\nInteger x = 1; // object"},{"name":"long","description":"Long","code":"long x = 1L; // primitive\\nLong x = 1L; // object"},{"name":"float","description":"Float","code":"float x = 1.0f; // primitive\\nFloat x = 1.0f; // object"},{"name":"double","description":"Double","code":"double x = 1.0; // primitive\\nDouble x = 1.0; // object"},{"name":"character","description":"Character","code":"char x = \'a\'; // primitive\\nCharacter x = \'a\'; // object"},{"name":"boolean","description":"Boolean","code":"boolean x = true; // primitive\\nBoolean x = true; // object"},{"name":"big_integer","description":"BigInteger","code":"BigInteger x = new BigInteger(\\"1\\");"},{"name":"big_decimal","description":"BigDecimal","code":"BigDecimal x = new BigDecimal(\\"1\\");"},{"name":"string","description":"String","code":"String x = \\"Hello, World!\\" // string pool\\nString x = new String(\\"Hello, World!\\"); // heap"},{"name":"string_multiline","description":"Multiline string","code":"String x = \\"Hello,\\nWorld!\\";"},{"name":"string_interpolation","description":"String interpolation","code":"String x = String.format(\\"Hello, %s!\\", \\"World\\");"},{"name":"variadic_parameter","description":"Variadic parameter","code":"void myFunc(int... numbers) {}"},{"name":"variadic_usage","description":"Variadic usage","code":"myFunc(1, 2, 3, 4, 5);"},{"name":"object_declaration","description":"Object declaration","code":"Object obj = new Object();"},{"name":"array_declaration","description":"Array declaration","code":"int[] nums = new int[3];"},{"name":"map_declaration","description":"Map declaration","code":"Map<String, Integer> myMap = new HashMap<>();"},{"name":"set_declaration","description":"Set declaration","code":"Set<Integer> mySet = new HashSet<>();"},{"name":"collection_initialization","description":"Collection initialization","code":"List<Integer> nums = Arrays.asList(1, 2, 3);"}],"bitwiseOperators":[{"name":"and","description":"AND","code":"int x = x & y;\\nint x &= y;"},{"name":"or","description":"OR","code":"int x = x | y;\\nint x |= y;"},{"name":"xor","description":"XOR","code":"int x = x ^ y;\\nint x ^= y;"},{"name":"shift_left","description":"Signed shift left","code":"int x = x << y;\\nint x <<= y;"},{"name":"shift_right","description":"Signed shift right","code":"int x = x >> y;\\nint x >>= y;"},{"name":"shift_right_unsigned","description":"Shift right unsigned","code":"int x = x >>> y;\\nint x >>>= y;"},{"name":"shift_left_unsigned","description":"Shift left unsigned","code":"int x = x >>> y;\\nint x >>>= y;"},{"name":"complement","description":"Complement (invert all bits)","code":"int x = ~y;"}],"functions":[{"name":"main","description":"Main function","code":"public static void main(String[] args) {}"},{"name":"custom_function_declaration","description":"Custom function declaration","code":"public void myFunc() {}"},{"name":"function_with_parameters","description":"Function with parameters","code":"public void myFunc(int x) {}"},{"name":"function_with_return","description":"Function with return","code":"public int myFunc() {}"},{"name":"function_throws_exception","description":"Function throws (propagates) exception to the next function","code":"public void myFunc() throws Exception {}"},{"name":"function_generic_declaration","description":"Generic function declaration","code":"public <T, R> R myFunc(T x) {}"},{"name":"function_generic_call","description":"Generic function call","code":"String str = myFunc<Integer, String>(1);"}],"flowControls":[{"name":"if","description":"If statement","code":"if (true) {}"},{"name":"if_else","description":"If-else statement","code":"if (true) {} else {}"},{"name":"ternary","description":"Ternary operator","code":"int x = true ? 1 : 0;"},{"name":"switch","description":"Switch statement","code":"switch(number) {\\n  case 1:\\n  case 2:\\n    break;\\n  case 3:\\n    System.out.println(3);\\n    break;\\n  default:\\n    System.out.println(-1);\\n}"},{"name":"for","description":"For statement","code":"for (int x = 0; x < 3; x++) {}"},{"name":"for_break","description":"For statement with break","code":"for (int x = 0; x < 3; x++) {\\n  if (x == 1) break;\\n}"},{"name":"for_continue","description":"For statement with continue","code":"for (int x = 0; x < 3; x++) {\\n  if (x == 1) continue;\\n}"},{"name":"for_range","description":"For statement with range","code":"for (int num: nums) {\\n  System.out.println(num);\\n}"},{"name":"while","description":"While statement","code":"while (true) {}"},{"name":"do_while","description":"Do-while statement. Will run at least once","code":"do {} while (true);"}],"structures":[{"name":"class_declaration","description":"Class declaration","code":"class MyClass {}"},{"name":"interface_declaration","description":"Interface declaration","code":"interface MyInterface {}"},{"name":"enum_declaration","description":"Enum declaration","code":"enum MyEnum {}"},{"name":"class_inheritance","description":"Class inheritance","code":"class MyClass extends MySuperClass {}"},{"name":"interface_implementation","description":"Interface implementation","code":"class MyClass implements MyInterface {}"}],"errorHandling":[{"name":"try_catch","description":"Try-catch statement","code":"try {\\n  // Do something\\n} catch (Exception e) {\\n  // Handle exception\\n}"},{"name":"throw","description":"Throw statement","code":"throw new Exception(\\"message\\");"},{"name":"try_finally","description":"Try-finally statement","code":"try {\\n  // Do something\\n} finally {\\n  // Cleanup\\n}"},{"name":"try_catch_finally","description":"Try-catch-finally statement","code":"try {\\n  // Do something\\n} catch (Exception e) {\\n  // Handle exception\\n} finally {\\n  // Cleanup\\n}"},{"name":"try_with_resources","description":"Try-with-resources statement","code":"try (MyResource myResource = new MyResource()) {\\n  // Do something\\n} catch (Exception e) {\\n  // Handle exception\\n}"}],"concurrency":[{"name":"thread","description":"Thread","code":"Thread thread = new Thread(() -> {\\n  // Do something\\n});\\nthread.start();"},{"name":"synchronized","description":"Synchronized","code":"synchronized (myObject) {\\n  // Do something\\n}"}]}}'),p=JSON.parse('{"key":"js","metadata":{"name":"Javascript","url":"https://www.javascript.com/","logo":"/static/img/lang/js.svg"},"dataTypes":[{"name":"null","description":"Null (typeof \'object\')","code":"null"},{"name":"undefined","description":"Undefined (typeof \'undefined\')","code":"undefined"},{"name":"boolean","description":"Boolean","code":"true"},{"name":"number","description":"Number","code":"0"},{"name":"bigInt","description":"BigInt","code":"0n"},{"name":"string","description":"UTF-16 string","code":"\\"Hello, World!\\""},{"name":"symbol","description":"Symbol","code":"Symbol()"}],"reservedKeywords":["abstract","arguments","await","boolean","break","byte","case","catch","char","class","const","continue","debugger","default","delete","do","double","else","enum","eval","export","extends","false","final","finally","float","for","function","goto","if","implements","import","in","instanceof","int","interface","let","long","native","new","null","package","private","protected","public","return","short","static","super","switch","synchronized","this","throw","throws","transient","true","try","typeof","var","void","volatile","while","with","yield"],"syntax":{"examples":[{"name":"hello_world","description":"Hello World","code":"console.log(\\"Hello, World!\\")"}],"comments":[{"name":"single_line_comment","description":"Single line comment","code":"// Single line comment"},{"name":"multi_line_comment","description":"Multi-line comment","code":"/* Multi-line\\ncomment */"}],"namespaces":[],"imports":[{"name":"import_module","description":"Importing an entire module (ES6 modules)","code":"import fs from \'fs\'"},{"name":"import_partial","description":"Importing specific functions or variables from a module (ES6 modules)","code":"import { readFile } from \'fs\'"},{"name":"require_module","description":"Importing an entire module (CommonJS modules)","code":"const fs = require(\'fs\')"},{"name":"require","description":"Importing specific functions or variables from a module (CommonJS modules)","code":"const { readFile } = require(\'fs\')"}],"variables":[{"name":"var","description":"var: defines a variable with function or global scope, allowing redeclaration and reassignment","code":"var x = 0"},{"name":"let","description":"let: Declares block-scoped variables that can be reassigned","code":"let x = 0"},{"name":"const","description":"const: Declares variables with block scope whose values cannot be reassigned or redeclared","code":"const x = 0"},{"name":"null","description":"null","code":"x = null"},{"name":"undefined","description":"undefined","code":"x = undefined"},{"name":"boolean","description":"Boolean","code":"x = true"},{"name":"number","description":"Number","code":"x = 0\\ny = 0.0"},{"name":"bigint","description":"BigInt","code":"x = 0n"},{"name":"string","description":"string","code":"x = \\"Hello, World!\\"\\ny = \'Hello, World!\'"},{"name":"string_interpolation","description":"string interpolation","code":"x = \\"World\\" \\ny = `Hello, ${x}!`"},{"name":"symbol","description":"Symbol","code":"x = Symbol(\\"x\\")"},{"name":"Infinity","description":"Infinity","code":"x = Infinity\\ny = -Infinity"},{"name":"NaN","description":"NaN","code":"x = NaN"},{"name":"array","description":"Array","code":"x = [1, 2, 3]"},{"name":"2d_array","description":"2D array","code":"x = [[1, 2, 3], [4, 5, 6]]"},{"name":"object","description":"Object (associative array / dictionary / map)","code":"x = { a: 1, b: 2, c: 3 }"},{"name":"object_access_subscript","description":"Object access (subscript)","code":"x[\\"a\\"]"},{"name":"object_access_dot","description":"Object access (dot)","code":"x.a"},{"name":"variadic_arguments","description":"Variadic arguments","code":"function sum(...numbers) {}"},{"name":"variadic_arguments_usage","description":"Variadic arguments usage","code":"sum(1, 2, 3, 4, 5)"},{"name":"destructuring_assignment","description":"Destructuring assignment","code":"const { x, y } = { x: 1, y: 2 }"},{"name":"spread_operator","description":"Spread operator","code":"x = [...[1, 2, 3]] // output: [1, 2, 3]"}],"bitwiseOperators":[{"name":"and","description":"AND","code":"const x = x & y\\nconst x &= y"},{"name":"or","description":"OR","code":"const x = x | y\\nconst x |= y"},{"name":"xor","description":"XOR","code":"const x = x ^ y\\nconst x ^= y"},{"name":"not","description":"NOT","code":"const x = ~x"},{"name":"left_shift","description":"Left shift (preserve sign bit)","code":"const x = x << y\\nconst x <<= y"},{"name":"right_shift","description":"Right shift (preserve sign bit)","code":"const x = x >> y\\nconst x >>= y"},{"name":"zero_fill_right_shift","description":"Zero-fill right shift (fills vacant bits with zeros regardless of sign)","code":"const x = x >>> y\\nconst x >>>= y"}],"functions":[{"name":"function_declaration","description":"Function declaration","code":"function myFunc() {}"},{"name":"function_expression","description":"Function expression (arrow function)","code":"const myFunc = () => {}"},{"name":"function_with_parameters","description":"Function with parameters","code":"function myFunc(x, y) {}"},{"name":"function_call","description":"Function call","code":"x = myFunc(1, 2)"},{"name":"IIFE","description":"IIFE: Immediately invoked function expression","code":"(function() {})(); // function declaration\\n(() => {})(); // arrow function"},{"name":"object_method_declaration","description":"Object method declaration","code":"myObj = {\\n    myFunc: function() {}\\n}"},{"name":"object_method_call","description":"Object method call","code":"myObj.myFunc()"}],"flowControls":[{"name":"if","description":"If statement","code":"if (x) {}"},{"name":"if_else","description":"If-else statement","code":"if (x) {}\\nelse {}"},{"name":"ternary","description":"Ternary operator","code":"x ? y : z"},{"name":"nullish_coalescing_operator","description":"Nullish coalescing operator","code":"x = y ?? 0"},{"name":"falsy_default_assignment","description":"Falsy assignment with default value","code":"x = y || 0"},{"name":"switch","description":"Switch statement","code":"switch (x) {\\n  case \'A\':\\n    console.log(\'A\');\\n    break;\\n  case \'B\':\\n    console.log(\'B\');\\n    break;\\n  case \'C\':\\n    console.log(\'C\');\\n    break;\\n  default:\\n}"},{"name":"for","description":"For loop","code":"for (let i = 0; i < 10; i++) {}"},{"name":"for_in","description":"For-in loop","code":"for (const index in arr) {}\\nfor (const key in obj) {}"},{"name":"for_of","description":"For-of loop","code":"for (const value of arr) {}\\nfor (const { key, value } of obj) {}"},{"name":"while","description":"While loop","code":"while (x) {}"},{"name":"do_while","description":"Do-while loop. Will run at least once","code":"do {} while (x);"}],"structures":[{"name":"object_declaration","description":"Object declaration","code":"const myObj = {};"},{"name":"__proto__","description":"Object prototype (inheritance)","code":"myObj.__proto__ = {};"},{"name":"class","description":"Class","code":"class MyClass {\\n  myField = 0;\\n  constructor() {}\\n  myFunc() {}\\n}"}],"errorHandling":[{"name":"try_catch","description":"Try-catch statement","code":"try {\\n  // Do something\\n} catch (e) {\\n  // Handle exception\\n}"},{"name":"try_catch_finally","description":"Try-catch-finally statement","code":"try {\\n  // Do something\\n} catch (e) {\\n  // Handle exception\\n} finally {\\n  // Cleanup\\n}"},{"name":"try_finally","description":"Try-finally statement","code":"try {\\n  // Do something\\n} finally {\\n  // Cleanup\\n}"},{"name":"throw","description":"Throw statement","code":"throw new Error(\'message\')"}],"concurrency":[{"name":"async_await","description":"Async/Await","code":"async function myFunc() { return promise; }\\nconst response = await myFunc();"}]}}'),u=JSON.parse('{"key":"kotlin","metadata":{"name":"Kotlin","url":"https://kotlinlang.org/","logo":"/static/img/lang/kt.svg"},"dataTypes":[{"name":"boolean","description":"Boolean","code":"false"},{"name":"char","description":"Character","code":"\'\\\\u0000\'"},{"name":"string","description":"UTF-16 string","code":"\\"Hello, World!\\""},{"name":"array","description":"Array","code":"arrayOf()"},{"name":"byte","description":"Byte (8-bit): -128(-2\u2078) to 127(2\u2078 - 1)","code":"0"},{"name":"ubyte","description":"UByte (8-bit): 0 to 255(2\u2078 - 1)","code":"0"},{"name":"short","description":"Short (16-bit): -32768(-2\xb9\u2076) to 32767(2\xb9\u2076 - 1)","code":"0"},{"name":"ushort","description":"UShort (16-bit): 0 to 65535(2\xb9\u2076 - 1)","code":"0"},{"name":"int","description":"Int (32-bit): -2147483648(-2\xb3\xb9) to 2147483647(2\xb3\xb9 - 1)","code":"0"},{"name":"uint","description":"UInt (32-bit): 0 to 4294967295(2\xb3\xb9 - 1)","code":"0"},{"name":"long","description":"Long (64-bit): -9223372036854775808(-2\u2076\xb3) to 9223372036854775807(2\u2076\xb3 - 1)","code":"0L"},{"name":"ulong","description":"ULong (64-bit): 0 to 18446744073709551615(2\u2076\xb3 - 1)","code":"0L"},{"name":"float","description":"Float: -3.4028235E38 to 3.4028235E38","code":"0.0f"},{"name":"double","description":"Double: -1.7976931348623157E308 to 1.7976931348623157E308","code":"0.0"}],"reservedKeywords":["as","break","class","continue","do","else","false","for","fun","if","in","interface","is","null","object","package","return","super","this","throw","true","try","typealias","typeof","val","var","when","while"],"syntax":{"examples":[{"name":"hello_world","description":"Hello World","code":"fun main() {\\n  println(\\"Hello, World!\\")\\n}"}],"comments":[{"name":"single_line_comment","description":"Single line comment","code":"// Single line comment"},{"name":"multi_line_comment","description":"Multi-line comment","code":"/* Multi-line\\ncomment */"}],"namespaces":[{"name":"namespace","description":"Namespace","code":"package org.example"}],"imports":[{"name":"import","description":"Import","code":"import org.example.Foo"},{"name":"import_all","description":"Import all from the specified module","code":"import org.example.*"},{"name":"import_static","description":"Import static members from the specified module","code":"import org.example.Foo.Companion.bar"},{"name":"import_alias","description":"Import with an alias","code":"import org.example.Foo as Bar"},{"name":"import_partial","description":"Import specific functions or variables from a module","code":"import org.example.Foo.{bar, baz}"}],"variables":[{"name":"var","description":"var: mutable variable","code":"var x = 0"},{"name":"val","description":"val: immutable variable","code":"val x = 0"},{"name":"null","description":"Null","code":"val x: Int? = null"},{"name":"byte","description":"Byte","code":"val x: Byte = 10"},{"name":"short","description":"Short","code":"val x: Short = 10"},{"name":"int","description":"Int","code":"val x: Int = 10"},{"name":"long","description":"Long","code":"val x: Long = 10L"},{"name":"float","description":"Float","code":"val x: Float = 10.0f"},{"name":"double","description":"Double","code":"val x: Double = 10.0"},{"name":"char","description":"Char","code":"val x: Char = \'a\'"},{"name":"string","description":"String","code":"val x: String = \\"Hello, World!\\""},{"name":"boolean","description":"Boolean","code":"val x: Boolean = true"},{"name":"unit","description":"Unit","code":"val x: Unit = Unit"},{"name":"array","description":"Array","code":"val x: Array<Int> = arrayOf(1, 2, 3)"},{"name":"list_immutable","description":"List immutable","code":"val x: List<Int> = listOf(1, 2, 3)"},{"name":"list_mutable","description":"List mutable","code":"val x: MutableList<Int> = mutableListOf(1, 2, 3)"},{"name":"set","description":"Set","code":"val x: Set<Int> = setOf(1, 2, 3)"},{"name":"map","description":"Map","code":"val x: Map<String, Int> = mapOf(\\"a\\" to 1, \\"b\\" to 2, \\"c\\" to 3)\\nval y = mapOf<String, Int>(\\"a\\" to 1, \\"b\\" to 2, \\"c\\" to 3)"}],"bitwiseOperators":[{"name":"and","description":"AND","code":"val x = x and y"},{"name":"or","description":"OR","code":"val x = x or y"},{"name":"xor","description":"XOR","code":"val x = x xor y"},{"name":"inverse","description":"Inverse (~)","code":"val x = x.inv()"},{"name":"shift_left","description":"Signed shift left","code":"val x = x shl y"},{"name":"shift_right","description":"Signed shift right","code":"val x = x shr y"},{"name":"shift_right_unsigned","description":"Unsigned shift right","code":"val x = x ushr y"}],"functions":[{"name":"main function","description":"Main function","code":"fun main() {\\n  println(\\"Hello, World!\\")\\n}"},{"name":"function_declaration","description":"Function declaration","code":"fun myFunc() {}"},{"name":"function_with_parameters","description":"Function with parameters","code":"fun myFunc(x: Int) {}"},{"name":"function_with_return","description":"Function with return","code":"fun myFunc(): Int {}"},{"name":"function_short","description":"Function shortcut","code":"fun even(x: Int) = x % 2 == 0"},{"name":"function_throws_exception","description":"Function throws (propagates) exception to the next function","code":"fun myFunc() {\\n  throw Exception()\\n}"},{"name":"function_generic_declaration","description":"Generic function declaration","code":"fun <T, R> myFunc(x: T): R {}"},{"name":"lambda","description":"Lambda","code":"val add = { x: Int, y: Int -> x + y }"},{"name":"inline_function","description":"Inline function","code":"inline fun myFunc(x: Int) {}"}],"flowControls":[{"name":"if","description":"If","code":"if (true) {}"},{"name":"if_else","description":"If-else"},{"name":"for_increment","description":"For loop increment","code":"for (i in 1..10) {}"},{"name":"for_increment_step","description":"For loop increment with step","code":"for (i in 1..10 step 2) {}"},{"name":"for_decrement","description":"For loop decrement","code":"for (i in 10 downTo 1) {}"},{"name":"foreach","description":"forEach loop","code":"for (x in xs) {}"},{"name":"for_break","description":"For loop with break","code":"for (i in 1..10) {\\n  if (i == 5) break;\\n}"},{"name":"for_continue","description":"For loop with continue","code":"for (i in 1..10) {\\n  if (i == 5) continue;\\n}"},{"name":"while","description":"While","code":"while (true) {}"},{"name":"do_while","description":"Do-while","code":"do {} while (true)"}],"structures":[{"name":"object_declaration","description":"Object declaration","code":"val myObj = MyObject()"},{"name":"class_declaration","description":"Class declaration","code":"class MyClass {}"},{"name":"data_class_declaration","description":"Data class declaration","code":"data class MyDataClass(val x: Int, val y: Int)"},{"name":"object","description":"Object (singleton)","code":"object MyObject {}"},{"name":"class_with_constructor","description":"Class with constructor","code":"class MyClass(val x: Int, val y: Int)"},{"name":"class_with_overloaded_constructor","description":"Class with overloaded constructor","code":"class MyClass(val x: Int, val y: Int) {\\n  constructor(x: Int): this(x, 0)\\n}"},{"name":"interface_declaration","description":"Interface declaration","code":"interface MyInterface {}"},{"name":"enum_declaration","description":"Enum declaration","code":"enum class MyEnum { RED, GREEN, BLUE }"},{"name":"class_inheritance","description":"Class inheritance","code":"class MyClass: MySuperClass {}"},{"name":"interface_implementation","description":"Interface implementation","code":"class MyClass: MyInterface {}"},{"name":"class_inheritance_super_constructor","description":"Class inheritance with super constructor","code":"class MyClass(x: Int): MySuperClass(x)"}],"errorHandling":[{"name":"try_catch","description":"Try-catch statement","code":"try {\\n  // Do something\\n} catch (e: Exception) {\\n  // Handle exception\\n}"},{"name":"throw","description":"Throw statement","code":"throw Exception()"},{"name":"try_finally","description":"Try-finally statement","code":"try {\\n  // Do something\\n} finally {\\n  // Cleanup\\n}"},{"name":"try_catch_finally","description":"Try-catch-finally statement","code":"try {\\n  // Do something\\n} catch (e: Exception) {\\n  // Handle exception\\n} finally {\\n  // Cleanup\\n}"},{"name":"try_with_resources","description":"Try-with-resources statement","code":"BufferedReader(FileReader(fileName)).use { reader ->\\n    var line: String?\\n    while (reader.readLine().also { line = it } != null) {\\n        println(line)\\n    }\\n}"}],"concurrency":[{"name":"thread","description":"Thread","code":"val thread = Thread {\\n  // Do something\\n}"},{"name":"coroutine","description":"Coroutine","code":"val coroutine = GlobalScope.launch {\\n  // Do something\\n}"},{"name":"suspend_function","description":"Suspend function","code":"suspend fun foo() {\\n  // Do something\\n}"}]}}'),h=JSON.parse('{"key":"python","metadata":{"name":"Python","url":"https://www.python.org/","logo":"/static/img/lang/py.svg"},"dataTypes":[{"name":"bool","description":"Boolean","code":"False"},{"name":"noneType","description":"None Type","code":"NoneType"},{"name":"str","description":"UTF-8 string","code":"\\"Hello, World!\\""},{"name":"int","description":"Integer","code":"0"},{"name":"float","description":"Float","code":"0.0"},{"name":"complex","description":"Complex","code":"0j"},{"name":"list","description":"List","code":"[]"},{"name":"tuple","description":"Tuple","code":"()"},{"name":"range","description":"Range","code":"range()"},{"name":"dict","description":"Dictionary","code":"{}"},{"name":"set","description":"Set","code":"set()"},{"name":"frozenset","description":"Frozen Set","code":"frozenset()"},{"name":"bytes","description":"Bytes","code":"b\\"\\""},{"name":"bytearray","description":"Bytearray","code":"bytearray()"},{"name":"memoryview","description":"Memoryview","code":"memoryview()"}],"reservedKeywords":["and","as","assert","break","class","continue","def","del","elif","else","except","False","finally","for","from","global","if","import","in","is","lambda","None","nonlocal","not","or","pass","raise","return","True","try","while","with","yield"],"syntax":{"examples":[{"name":"hello_world","description":"Hello World","code":"if __name__ == \\"__main__\\":\\n    print(\\"Hello, World!\\")"}],"comments":[{"name":"single_line_comment","description":"Single line comment","code":"# Single line comment"},{"name":"multi_line_comment","description":"Multi-line comment","code":"\'\'\' Multi-line\\ncomment \'\'\'"}],"namespaces":[{"name":"namespace","description":"Namespace","code":"# based on the package structure"}],"imports":[{"name":"import_module","description":"Import","code":"import os"},{"name":"import_partial","description":"Import partially","code":"from math import pi, ceil"},{"name":"import_alias","description":"Import alias","code":"from os import path as p"}],"variables":[{"name":"variable","description":"Variable","code":"x = 0"},{"name":"multiple_variables","description":"Multiple variables","code":"x = y = z = 0"},{"name":"multiple_variable_assignment","description":"Multiple variable assignment","code":"x, y, z = 0, 1, 2"},{"name":"string","description":"String","code":"x = \\"Hello, World!\\""},{"name":"int","description":"Integer","code":"x = 0"},{"name":"float","description":"Float","code":"x = 0.0"},{"name":"complex","description":"Complex","code":"x = 0j"},{"name":"list_variable_assignment","description":"List variable assignment","code":"x = [0, 1, 2]"},{"name":"dict_variable_assignment","description":"Dict variable assignment","code":"x = {\\"a\\": 0, \\"b\\": 1, \\"c\\": 2}"},{"name":"set_variable_assignment","description":"Set variable assignment","code":"x = set(0, 1, 2)"},{"name":"frozenset_variable_assignment","description":"Frozen set variable assignment","code":"x = frozenset(0, 1, 2)"}],"bitwiseOperators":[{"name":"and","description":"AND","code":"x = x & y"},{"name":"or","description":"OR","code":"x = x | y"},{"name":"xor","description":"XOR","code":"x = x ^ y"},{"name":"not","description":"NOT","code":"x = ~x"},{"name":"left_shift","description":"Left shift (preserve sign bit)","code":"x = x << y"},{"name":"right_shift","description":"Right shift (preserve sign bit)","code":"x = x >> y"}],"functions":[{"name":"main","description":"Main function","code":"def main():\\n    print(\\"Hello, World!\\")"},{"name":"function_declaration","description":"Function declaration","code":"def myFunc()"},{"name":"function_with_parameters","description":"Function with parameters","code":"def myFunc(x, y)"},{"name":"function_with_return","description":"Function with return","code":"def myFunc():\\n    return 0"},{"name":"function_short","description":"Function shortcut","code":"def even(x): return x % 2 == 0"}],"flowControls":[{"name":"if","description":"If statement","code":"if x:\\n    print(\\"True\\")"},{"name":"if_else","description":"If-else statement","code":"if x:\\n    print(\\"True\\")\\nelse:\\n    print(\\"False\\")"},{"name":"while","description":"While loop","code":"while x:\\n    print(1)"},{"name":"for_range","description":"For loop (increment)","code":"for x in range(10):\\n    print(x)"},{"name":"for_with_step","description":"For loop with step (increment)","code":"for x in range(0, 10, 2):\\n    print(x)"},{"name":"for_decrement","description":"For loop (decrement)","code":"for x in range(10, 0, -1):\\n    print(x)"},{"name":"for_in","description":"For loop","code":"for x in y:\\n    print(x)"},{"name":"for_enumerate","description":"For loop with enumerate","code":"for index, value in enumerate(my_list):\\n    print(index, value)"},{"name":"break","description":"Break","code":"for x in range(10):\\n    if x == 5:\\n        break\\n    print(x)"},{"name":"continue","description":"Continue","code":"for x in range(10):\\n    if x == 5:\\n        continue\\n    print(x)"}],"structures":[{"name":"list","description":"List","code":"x = [1, 2, 3]"},{"name":"dict","description":"Dictionary","code":"x = {\'key\': \'value\'}\\nx = dict(key=\'value\')"},{"name":"set","description":"Set","code":"x = {1, 2, 3}\\nx = set([1, 2, 3])"},{"name":"tuple","description":"Tuple","code":"x = (1, 2, 3)\\nx = tuple([1, 2, 3])"},{"name":"range","description":"Range","code":"x = range(10)"},{"name":"generator","description":"Generator","code":"x = (x for x in range(10))"},{"name":"enum","description":"Enumerate","code":"x = enumerate(my_list)"}],"errorHandling":[{"name":"try","description":"Try statement","code":"try:\\n    # Do something\\nexcept:\\n    # Handle exception"},{"name":"try_except","description":"Try-except statement","code":"try:\\n    # Do something\\nexcept Exception as e:\\n    # Handle exception"},{"name":"try_finally","description":"Try-finally statement","code":"try:\\n    # Do something\\nfinally:\\n    # Cleanup"},{"name":"raise","description":"Raise exception","code":"raise Exception(\\"Error\\")"}],"concurrency":[{"name":"async","description":"Async","code":"#with help of asyncio\\nasync def myFunc():\\n    print(1)\\n\\nresponse = await myFunc()"},{"name":"thread","description":"Thread","code":"import threading\\n\\ndef myFunc():\\n    print(1)\\n\\nthread = threading.Thread(target=myFunc())\\nthread.start()"},{"name":"multiprocessing","description":"Multiprocessing","code":"import multiprocessing\\n\\ndef myFunc():\\n    print(1)\\n\\nprocess = multiprocessing.Process(target=myFunc())\\nprocess.start()"}]}}'),f=JSON.parse('{"key":"rust","metadata":{"name":"Rust","url":"https://www.rust-lang.org/","logo":"/static/img/lang/rust.svg"},"dataTypes":[{"name":"bool","description":"Boolean","code":"true"},{"name":"char","description":"Character","code":"\'a\'"},{"name":"i8","description":"i8 signed 8-bit integer: -128(-2\u2078) to 127(2\u2078 - 1)","code":"0"},{"name":"u8","description":"u8 unsigned 8-bit integer: 0 to 255(2\u2078 - 1)","code":"0"},{"name":"i16","description":"i16 signed 16-bit integer: -32768(-2\xb9\u2076) to 32767(2\xb9\u2076 - 1)","code":"0"},{"name":"u16","description":"u16 unsigned 16-bit integer: 0 to 65535(2\xb9\u2076 - 1)","code":"0"},{"name":"i32","description":"i32 signed 32-bit integer: -2147483648(-2\xb3\xb9) to 2147483647(2\xb3\xb9 - 1)","code":"0"},{"name":"u32","description":"u32 unsigned 32-bit integer: 0 to 4294967295(2\xb3\xb9 - 1)","code":"0"},{"name":"i64","description":"i64 signed 64-bit integer: -9223372036854775808(-2\u2076\xb3) to 9223372036854775807(2\u2076\xb3 - 1)","code":"0"},{"name":"u64","description":"u64 unsigned 64-bit integer: 0 to 18446744073709551615(2\u2076\xb3 - 1)","code":"0"},{"name":"i128","description":"i128 signed 128-bit integer: -170141183460469231731687303715884105728(-2\xb9\xb2\u2078) to 170141183460469231731687303715884105727(2\xb9\xb2\u2078 - 1)","code":"0"},{"name":"u128","description":"u128 unsigned 128-bit integer: 0 to 340282366920938463463374607431768211455(2\xb9\xb2\u2078 - 1)","code":"0"},{"name":"f32","description":"f32 32-bit floating point number","code":"0.0"},{"name":"f64","description":"f64 64-bit floating point number","code":"0.0"}],"reservedKeywords":["abstract","as","become","box","break","const","continue","crate","do","else","enum","extern","false","final","fn","for","if","impl","in","let","loop","macro","match","mod","move","mut","override","priv","pub","ref","return","Self","self","static","struct","super","trait","true","try","type","typeof","unsafe","unsized","use","virtual","where","while","yield"],"syntax":{"examples":[{"name":"hello_world","description":"Hello World","code":"fn main() {\\n  println!(\\"Hello, World!\\")\\n}"}],"comments":[{"name":"single_line_comment","description":"Single line comment","code":"// Single line comment"},{"name":"multi_line_comment","description":"Multi-line comment","code":"/* Multi-line\\ncomment */"}],"namespaces":[],"imports":[],"variables":[],"bitwiseOperators":[],"functions":[],"flowControls":[],"structures":[],"errorHandling":[],"concurrency":[]}}'),g=JSON.parse('{"key":"ts","metadata":{"name":"TypeScript","url":"https://www.typescriptlang.org/","logo":"/static/img/lang/ts.svg"},"dataTypes":[{"name":"boolean","description":"boolean","code":"false"},{"name":"number","description":"Number","code":"0"},{"name":"string","description":"UTF-16 string","code":"\\"Hello, World!\\""},{"name":"bigInt","description":"BigInt","code":"0n"},{"name":"symbol","description":"Symbol","code":"Symbol()"}],"reservedKeywords":["any","as","boolean","break","case","catch","class","const","constructor","continue","debugger","declare","default","delete","do","else","enum","export","extends","false","finally","for","from","function","get","if","implements","import","in","instanceof","interface","let","module","new","null","number","of","package","private","protected","public","require","return","set","static","string","super","switch","symbol","this","throw","true","try","type","typeof","var","void","while","with","yield"],"syntax":{"examples":[{"name":"hello_world","description":"Hello World","code":"console.log(\\"Hello, World!\\")"}],"comments":[{"name":"single_line_comment","description":"Single line comment","code":"// Single line comment"},{"name":"multi_line_comment","description":"Multi-line comment","code":"/* Multi-line\\ncomment */"}],"namespaces":[],"imports":[],"variables":[],"bitwiseOperators":[],"functions":[],"flowControls":[],"structures":[],"errorHandling":[],"concurrency":[]}}'),x={title:"Overview",description:"Comparison of Programming Languages",hide_table_of_contents:!0},y=void 0,b={id:"education/programming-languages/overview",title:"Overview",description:"Comparison of Programming Languages",source:"@site/docs/education/02-programming-languages/01-overview.mdx",sourceDirName:"education/02-programming-languages",slug:"/education/programming-languages/overview",permalink:"/tech-labs/docs/education/programming-languages/overview",draft:!1,unlisted:!1,editUrl:"https://github.com/EliFuzz/tech-labs/docs/education/02-programming-languages/01-overview.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Overview",description:"Comparison of Programming Languages",hide_table_of_contents:!0},sidebar:"education",previous:{title:"Programming Languages",permalink:"/tech-labs/docs/category/programming-languages"},next:{title:"Frontend",permalink:"/tech-labs/docs/category/frontend"}},_={},v=[{value:"Bitwise Operations",id:"bitwise-operations",level:2}];function w(e){const n={code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(d,{data:[l,m,p,u,h,f,g]}),"\n",(0,t.jsx)(n.h2,{id:"bitwise-operations",children:"Bitwise Operations"}),"\n",(0,t.jsxs)(r.Z,{children:[(0,t.jsxs)(a.Z,{value:"overview",label:"Overview",children:[(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Binary operation:"})," manipulation of individual bits in binary data or numbers."]}),(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Negative number conversion"})}),(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Convert number into 2's complement (binary): ",(0,t.jsx)(n.code,{children:"7 -> 0111"})]}),"\n",(0,t.jsxs)(n.li,{children:["Invert all the bits: ",(0,t.jsx)(n.code,{children:"0111 -> 1000"})]}),"\n",(0,t.jsxs)(n.li,{children:["Add 1: ",(0,t.jsx)(n.code,{children:"1000 -> 1001"})]}),"\n"]})]}),(0,t.jsx)(a.Z,{value:"detailed",label:"Detailed",children:(0,t.jsxs)("table",{children:[(0,t.jsx)("thead",{children:(0,t.jsxs)("tr",{children:[(0,t.jsx)("th",{children:"Operator"}),(0,t.jsx)("th",{children:"Description"}),(0,t.jsx)("th",{children:"Example"})]})}),(0,t.jsxs)("tbody",{children:[(0,t.jsxs)("tr",{children:[(0,t.jsxs)("td",{children:["AND (",(0,t.jsx)(n.code,{children:"&"}),")"]}),(0,t.jsxs)("td",{children:["If both bits are ",(0,t.jsx)(n.code,{children:"1"}),", the result is ",(0,t.jsx)(n.code,{children:"1"}),"; otherwise ",(0,t.jsx)(n.code,{children:"0"})]}),(0,t.jsx)("td",{children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-text",children:"0101 (5) &\n0011 (3)\n----\n0001 (1)\n"})})})]}),(0,t.jsxs)("tr",{children:[(0,t.jsxs)("td",{children:["OR (",(0,t.jsx)(n.code,{children:"|"}),")"]}),(0,t.jsxs)("td",{children:["If any bit is ",(0,t.jsx)(n.code,{children:"1"}),", the result is ",(0,t.jsx)(n.code,{children:"1"}),"; otherwise ",(0,t.jsx)(n.code,{children:"0"})]}),(0,t.jsx)("td",{children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-text",children:"0101 (5) |\n0011 (3)\n----\n0111 (7)\n"})})})]}),(0,t.jsxs)("tr",{children:[(0,t.jsxs)("td",{children:["XOR: exclusive OR (",(0,t.jsx)(n.code,{children:"^"}),")"]}),(0,t.jsxs)("td",{children:["If the bits are different, the result is ",(0,t.jsx)(n.code,{children:"1"}),"; otherwise ",(0,t.jsx)(n.code,{children:"0"})]}),(0,t.jsx)("td",{children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-text",children:"0101 (5) ^\n0011 (3)\n----\n0110 (6)\n"})})})]}),(0,t.jsxs)("tr",{children:[(0,t.jsxs)("td",{children:["NOT (",(0,t.jsx)(n.code,{children:"~"}),")"]}),(0,t.jsxs)("td",{children:["Flips the bits. Each ",(0,t.jsx)(n.code,{children:"0"})," becomes ",(0,t.jsx)(n.code,{children:"1"}),", and each ",(0,t.jsx)(n.code,{children:"1"})," becomes ",(0,t.jsx)(n.code,{children:"0"})]}),(0,t.jsx)("td",{children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-text",children:"0101 (5) ~\n----\n1010 (-6)\n"})})})]}),(0,t.jsxs)("tr",{children:[(0,t.jsxs)("td",{children:["Signed Left Shift (",(0,t.jsx)(n.code,{children:"<<"}),")"]}),(0,t.jsx)("td",{children:"Shifts the bits of the left operand to the left by a number of positions specified by the right operand"}),(0,t.jsx)("td",{children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-text",children:"# positive number\n\n0000 0101 (5) <<\n0000 0010 (2)\n---------\n0001 0100 (20)\n\n# negative number\n\n1111 1011 (-5) <<\n0000 0010 (2)\n---------\n1110 1100 (-20)\n"})})})]}),(0,t.jsxs)("tr",{children:[(0,t.jsxs)("td",{children:["Signed Right Shift (",(0,t.jsx)(n.code,{children:">>"}),")"]}),(0,t.jsx)("td",{children:"Shifts the bits of the left operand to the right by a number of positions specified by the right operand"}),(0,t.jsx)("td",{children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-text",children:"# positive number\n\n0101 (5) >>\n0010 (2)\n----\n0001 (1)\n\n# negative number\n\n1111 1011 (-5) >>\n0000 0010 (2)\n---------\n1111 1110 (-2)\n"})})})]}),(0,t.jsxs)("tr",{children:[(0,t.jsxs)("td",{children:["Unsigned Right Shift (",(0,t.jsx)(n.code,{children:">>>"}),")"]}),(0,t.jsx)("td",{children:"Similar to the right shift operator, but it treats the value as an unsigned integer. It fills the vacant bits on the left with zeros"}),(0,t.jsx)("td",{children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-text",children:"# positive number\n\n0101 (5) >>>\n0010 (2)\n----\n0001 (1)\n\n# negative number\n\n1111 0101 (-5) >>>\n0000 0010 (2)\n---------\n0111 1111 1111 1111 1111 1111 1111 1110 (1073741822)\n"})})}),(0,t.jsx)("td",{children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-text"})})})]})]})]})})]})]})}function j(e={}){const{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(w,{...e})}):w(e)}}}]);