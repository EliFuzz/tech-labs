"use strict";(self.webpackChunkclassic=self.webpackChunkclassic||[]).push([[7238],{397:(e,s,n)=>{n.d(s,{A:()=>i});const i=n.p+"assets/images/graphql-federation-ea39b66dc5b1255f674fd9c9b28692e0.svg"},1328:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>o,contentTitle:()=>a,default:()=>j,frontMatter:()=>c,metadata:()=>i,toc:()=>h});const i=JSON.parse('{"id":"education/system-design/communication-patterns","title":"Communication Patterns","description":"Communication Patterns Overview","source":"@site/docs/education/04-system-design/11-communication-patterns.mdx","sourceDirName":"education/04-system-design","slug":"/education/system-design/communication-patterns","permalink":"/tech-labs/docs/education/system-design/communication-patterns","draft":false,"unlisted":false,"editUrl":"https://github.com/EliFuzz/tech-labs/docs/education/04-system-design/11-communication-patterns.mdx","tags":[],"version":"current","sidebarPosition":11,"frontMatter":{"title":"Communication Patterns","description":"Communication Patterns Overview","hide_table_of_contents":true},"sidebar":"education","previous":{"title":"Architectural Styles","permalink":"/tech-labs/docs/education/system-design/architectural-styles"},"next":{"title":"Traffic Management","permalink":"/tech-labs/docs/education/system-design/traffic-management"}}');var r=n(23420),t=n(38906),d=n(20007),l=n(31519);const c={title:"Communication Patterns",description:"Communication Patterns Overview",hide_table_of_contents:!0},a=void 0,o={},h=[{value:"Patterns",id:"patterns",level:3},{value:"Cons",id:"cons",level:3},{value:"Solutions",id:"solutions",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Semantic Versioning",id:"semantic-versioning",level:3},{value:"Strategies",id:"strategies",level:2},{value:"Considerations",id:"considerations",level:3},{value:"Naming",id:"naming",level:3},{value:"Common Fields",id:"common-fields",level:3},{value:"URL",id:"url",level:3},{value:"Nouns vs Verbs",id:"nouns-vs-verbs",level:3},{value:"Singular vs Plural",id:"singular-vs-plural",level:3},{value:"Utilize Resource Nesting Efficiency",id:"utilize-resource-nesting-efficiency",level:3},{value:"HTTP Status Codes",id:"http-status-codes",level:3},{value:"Caching",id:"caching",level:3},{value:"Payload Compression",id:"payload-compression",level:3},{value:"Connection Pool",id:"connection-pool",level:3},{value:"Batching",id:"batching",level:3}];function x(e){const s={code:"code",h2:"h2",h3:"h3",img:"img",li:"li",mermaid:"mermaid",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(l.A,{queryString:"primary",children:[(0,r.jsx)(d.A,{value:"communication-patterns-overview",label:"Overview",children:(0,r.jsxs)("table",{children:[(0,r.jsx)("thead",{children:(0,r.jsxs)("tr",{children:[(0,r.jsx)("th",{children:"Communication Style"}),(0,r.jsx)("th",{children:"Definition"}),(0,r.jsx)("th",{children:"Features"}),(0,r.jsx)("th",{children:"Use Cases"})]})}),(0,r.jsxs)("tbody",{children:[(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Asynchronous"})}),(0,r.jsx)("td",{children:"Asynchronous communication is used to communicate between services without waiting for the response"}),(0,r.jsx)("td",{children:(0,r.jsxs)("ul",{children:[(0,r.jsx)("li",{children:"Non-blocking"}),(0,r.jsx)("li",{children:"Supports retries"}),(0,r.jsx)("li",{children:"Flexible scaling"}),(0,r.jsx)("li",{children:"Load leveling"}),(0,r.jsx)("li",{children:"Batch processing"})]})}),(0,r.jsx)("td",{children:(0,r.jsxs)("ul",{children:[(0,r.jsx)("li",{children:"Event-Driven Architectures"}),(0,r.jsx)("li",{children:"Background processing"}),(0,r.jsx)("li",{children:"Decoupled systems"})]})})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Database"})}),(0,r.jsx)("td",{children:"Uses a shared database to communicate between services. Commonly uses CQRS and Event Sourcing techniques"}),(0,r.jsx)("td",{children:(0,r.jsxs)("ul",{children:[(0,r.jsx)("li",{children:"Eventual Consistency"}),(0,r.jsx)("li",{children:"ACID properties"}),(0,r.jsx)("li",{children:"Consistent state management"})]})}),(0,r.jsx)("td",{children:(0,r.jsxs)("ul",{children:[(0,r.jsx)("li",{children:"Data backup and recovery"}),(0,r.jsx)("li",{children:"Data synchronization"}),(0,r.jsx)("li",{children:"When you need a snapshot of data"})]})})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"File Transfer"})}),(0,r.jsx)("td",{children:"Services communicate by reading and writing files to a shared location"}),(0,r.jsx)("td",{children:(0,r.jsxs)("ul",{children:[(0,r.jsx)("li",{children:"Batch processing"}),(0,r.jsx)("li",{children:"Eventual Consistency"})]})}),(0,r.jsx)("td",{children:(0,r.jsxs)("ul",{children:[(0,r.jsx)("li",{children:"Batch processing"}),(0,r.jsx)("li",{children:"Data import/export"}),(0,r.jsx)("li",{children:"Integration with legacy systems"})]})})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"GraphQL"})}),(0,r.jsx)("td",{children:"Query language for APIs, allowing clients to request exactly what they need"}),(0,r.jsx)("td",{children:(0,r.jsxs)("ul",{children:[(0,r.jsx)("li",{children:"Flexible data retrieval"}),(0,r.jsx)("li",{children:"Schema-first development"}),(0,r.jsx)("li",{children:"Type safety"}),(0,r.jsx)("li",{children:"Reduces over/under-fetching of data"})]})}),(0,r.jsx)("td",{children:(0,r.jsx)("ul",{children:(0,r.jsx)("li",{children:"APIs with complex and dynamic data requirements"})})})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"gRPC"})}),(0,r.jsx)("td",{children:"gRPC (Google Remote Procedure Call) is a high-performance, language-agnostic remote procedure call (RPC) framework that enables efficient communication between distributed systems by utilizing Protocol Buffers for serialization and HTTP/2 for transport, ensuring low latency, bandwidth efficiency, and support for bi-directional streaming"}),(0,r.jsx)("td",{children:(0,r.jsxs)("ul",{children:[(0,r.jsx)("li",{children:"High performance"}),(0,r.jsx)("li",{children:"Bi-directional streaming"}),(0,r.jsx)("li",{children:"Protobuf"}),(0,r.jsx)("li",{children:"HTTP/2"}),(0,r.jsx)("li",{children:"Binary data transfer"})]})}),(0,r.jsx)("td",{children:(0,r.jsxs)("ul",{children:[(0,r.jsx)("li",{children:"Microservices"}),(0,r.jsx)("li",{children:"Point-to-point real-time communication"}),(0,r.jsx)("li",{children:"Command and action oriented APIs"}),(0,r.jsx)("li",{children:"High performance communication in massive microservice systems"})]})})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"P2P"})}),(0,r.jsx)("td",{children:"P2P (Peer-to-Peer) is a decentralized form of communication where each party has the same capabilities and either party can initiate a communication session. It enables direct communication and sharing of resources among multiple nodes in a network without the need for a central coordinating server"}),(0,r.jsx)("td",{children:(0,r.jsxs)("ul",{children:[(0,r.jsx)("li",{children:"Decentralized"}),(0,r.jsx)("li",{children:"Resource sharing"}),(0,r.jsx)("li",{children:"Direct communication"}),(0,r.jsx)("li",{children:"Dynamic network topology"}),(0,r.jsx)("li",{children:"Resilient and scalable"})]})}),(0,r.jsx)("td",{children:(0,r.jsxs)("ul",{children:[(0,r.jsx)("li",{children:"File sharing applications (Torrent)"}),(0,r.jsx)("li",{children:"Blockchain and cryptocurrencies"}),(0,r.jsx)("li",{children:"Distributed databases"}),(0,r.jsx)("li",{children:"Decentralized social networks"}),(0,r.jsx)("li",{children:"Collaborative software applications"}),(0,r.jsx)("li",{children:"Multiplayer online gaming"})]})})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"SOAP"})}),(0,r.jsx)("td",{children:"SOAP (Simple Object Access Protocol) is an XML-based communication protocol"}),(0,r.jsx)("td",{children:(0,r.jsx)("ul",{children:(0,r.jsx)("li",{children:"XML-based"})})}),(0,r.jsx)("td",{children:(0,r.jsxs)("ul",{children:[(0,r.jsx)("li",{children:"Enterprise applications"}),(0,r.jsx)("li",{children:"Payment gateways"}),(0,r.jsx)("li",{children:"identity management"}),(0,r.jsx)("li",{children:"CRM solutions"}),(0,r.jsx)("li",{children:"financial and telecommunication services"}),(0,r.jsx)("li",{children:"legacy system support"})]})})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Stream"})}),(0,r.jsx)("td",{children:"Data transmission method where information is continuously and sequentially delivered in a steady flow, often in real-time, without distinct boundaries or breaks, facilitating persistent and ongoing data exchange between communicating entities"}),(0,r.jsx)("td",{children:(0,r.jsxs)("ul",{children:[(0,r.jsx)("li",{children:"Push-based"}),(0,r.jsx)("li",{children:"Pull-based"}),(0,r.jsx)("li",{children:"Reactive"}),(0,r.jsx)("li",{children:"Real-time data processing and insights"})]})}),(0,r.jsx)("td",{children:(0,r.jsxs)("ul",{children:[(0,r.jsx)("li",{children:"Real-time analytics"}),(0,r.jsx)("li",{children:"Live dashboard updates"}),(0,r.jsx)("li",{children:"Streaming applications"}),(0,r.jsx)("li",{children:"MMO games"}),(0,r.jsx)("li",{children:"Chat applications"})]})})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Synchronous"})}),(0,r.jsx)("td",{children:"Data transmission between sender and receiver occurs in real-time, requiring both parties to be actively engaged simultaneously for message exchange, ensuring temporal alignment of communication events"}),(0,r.jsx)("td",{children:(0,r.jsxs)("ul",{children:[(0,r.jsx)("li",{children:"Blocking"}),(0,r.jsx)("li",{children:"Resource-based"}),(0,r.jsx)("li",{children:"HTTP methods"}),(0,r.jsx)("li",{children:"Supports request-response patterns"})]})}),(0,r.jsx)("td",{children:(0,r.jsxs)("ul",{children:[(0,r.jsx)("li",{children:"Operations where immediate response is required"}),(0,r.jsx)("li",{children:"Request/response APIs"}),(0,r.jsx)("li",{children:"Transactional systems"})]})})]})]})]})}),(0,r.jsx)(d.A,{value:"communication-patterns-async",label:"Async",children:(0,r.jsxs)(l.A,{queryString:"secondary",children:[(0,r.jsx)(d.A,{value:"async-protocol",label:"Messaging protocol",attributes:{className:"tabs__vertical"},children:(0,r.jsxs)("table",{children:[(0,r.jsx)("thead",{children:(0,r.jsxs)("tr",{children:[(0,r.jsx)("th",{children:"Aspect"}),(0,r.jsx)("th",{children:"MQTT"}),(0,r.jsx)("th",{children:"AMQP"})]})}),(0,r.jsxs)("tbody",{children:[(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Visualization"})}),(0,r.jsx)("td",{children:(0,r.jsx)(s.mermaid,{value:"graph LR\n\nsubgraph broker[AMPQ Broker]\n  direction LR\n\n  exchange(Exchange) --\x3e |route messages based on binding| queue1(Queue)\n  exchange(Exchange) --\x3e |route messages based on binding| queue2(Queue)\nend\n\npublisher(Publisher) --\x3e |publish message| exchange(Exchange)\nqueue1 --\x3e |publish| consumer1(Consumer)\nconsumer1 -.-> |subscribe| queue1(Queue)\n\nqueue2 --\x3e |publish| consumer2(Consumer)\nconsumer2 -.-> |subscribe| queue2(Queue)"})}),(0,r.jsx)("td",{children:(0,r.jsx)(s.mermaid,{value:"  graph LR\n\n  subgraph broker[MQTT Broker]\n      direction LR\n\n      topic(Topic)\n  end\n\n  publisher(Publisher) --\x3e |publish message| topic\n\n  topic --\x3e |publish| consumer1(Consumer)\n  topic --\x3e |publish| consumer2(Consumer)\n\n  consumer1 -.-> |subscribe| topic\n  consumer2 -.-> |subscribe| topic"})})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Definition"})}),(0,r.jsx)("td",{children:"Provides simple message queuing services, which can be implemented mainly in the embedded systems"}),(0,r.jsx)("td",{children:"Offers a wealthier range of messaging circumstances, and it performs better when it comes to security protocols"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Background"})}),(0,r.jsx)("td",{children:"MQTT is majorly vendor-driven and was developed by IBM"}),(0,r.jsx)("td",{children:"JP Morgan developed AMQP for financial apps"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Architecture"})}),(0,r.jsx)("td",{children:"MQTT has client/broker architecture"}),(0,r.jsx)("td",{children:"AMQP has a client/broker and client/server architecture"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Design protocol"})}),(0,r.jsx)("td",{children:"It simplifies the process of encrypting messaging using TLS and authenticating clients using modern protocols such as OAuth"}),(0,r.jsx)("td",{children:"It is a TCP-based protocol that performs both publish/subscribe and request/response types of communication"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Framework optimization"})}),(0,r.jsx)("td",{children:"It is based on the wire framework, which uses a stream-like approach for lightweight memory devices"}),(0,r.jsx)("td",{children:"It is optimized on the wire of data framing, which has a buffering approach, boosting the server performance"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Messaging services"})}),(0,r.jsx)("td",{children:"MQTT is highly transient and is most engaged for active routing pud core unuse bors"}),(0,r.jsx)("td",{children:"AMQP enables all kinds of messaging, including bulk messaging, and executes metadata messages"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Transaction of messages"})}),(0,r.jsx)("td",{children:"It is known for supporting general acknowledgments relatively quickly"}),(0,r.jsx)("td",{children:"It supports various acknowledgments and transactions"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Data context"})}),(0,r.jsx)("td",{children:"MQTT has partial support for data cache and proxy"}),(0,r.jsx)("td",{children:"AMQP offers full support for data cache and proxy"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Proven security"})}),(0,r.jsx)("td",{children:"It does not act to any security issues in connection, although its security can be amped up using add-on services"}),(0,r.jsx)("td",{children:"AMQP eliminates the policy of TLS and SASL, increasing the performance of continuous updates swiftly"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Last value queues"})}),(0,r.jsx)("td",{children:"It offers to Retain command and Supports the last value in the queues smoothly"}),(0,r.jsx)("td",{children:"There is no provision or support for the last values in the queue, which can be a limitation"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Efficiency and scalability"})}),(0,r.jsx)("td",{children:"Since it is wire-efficient, it requires less effort to implement on a client than AMQP"}),(0,r.jsx)("td",{children:"It does not allow the creation of subscriptions in message streams; hence, it is unscalable"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Reliable messaging"})}),(0,r.jsx)("td",{children:"Its data delivery is highly reliable and on point"}),(0,r.jsx)("td",{children:"It enables only fire-and-forget policy. AMQP is not reliable"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Namespaces"})}),(0,r.jsx)("td",{children:'MQTT deploys "namespaces" for the transmission of messages in a hierarchy'}),(0,r.jsx)("td",{children:"AMQP allows multiple ways for finding messages, such as queues or nodes"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Additional attributes"})}),(0,r.jsx)("td",{children:"MQTT fulfills the basic requirements for the DNS server"}),(0,r.jsx)("td",{children:"It is asymmetric and does not support any advanced features"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Implementation"})}),(0,r.jsx)("td",{children:"It can be implemented in devices with less than 64kb of RAM"}),(0,r.jsx)("td",{children:"It is implemented in little elements of less than 64kb"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Extensibility"})}),(0,r.jsx)("td",{children:"MQTT has an entire fresh draft of the protocol and allows for much broader extensibility than other protocols"}),(0,r.jsx)("td",{children:"It has structural points allowing extensibility in a particular fashion and alteration in layers by isolation"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Pros"})}),(0,r.jsx)("td",{children:(0,r.jsxs)("ul",{children:[(0,r.jsx)("li",{children:"Is lightweight and battery-friendly"}),(0,r.jsx)("li",{children:"Offers 3 QoS levels to support reliable messaging"}),(0,r.jsx)("li",{children:"Works well over unreliable networks"}),(0,r.jsx)("li",{children:"Allows for security through TLS"}),(0,r.jsx)("li",{children:"Has many open-source libraries to ease development and implementation"}),(0,r.jsx)("li",{children:"Low bandwidth usage"})]})}),(0,r.jsx)("td",{children:(0,r.jsxs)("ul",{children:[(0,r.jsx)("li",{children:"Has built-in integrations for TSL and SASL for greater security"}),(0,r.jsx)("li",{children:"Supports many different messaging patterns"}),(0,r.jsx)("li",{children:"Offers 3 QoS levels for message deliverability and reliability"}),(0,r.jsx)("li",{children:"Can be extended very easily"}),(0,r.jsx)("li",{children:"Has many open-source libraries to make implementation easy"})]})})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Cons"})}),(0,r.jsx)("td",{children:(0,r.jsxs)("ul",{children:[(0,r.jsx)("li",{children:"Only supports the publish-subscribe messaging pattern"}),(0,r.jsx)("li",{children:"Not as easily extensible"}),(0,r.jsx)("li",{children:"Less built-in security features"})]})}),(0,r.jsx)("td",{children:(0,r.jsxs)("ul",{children:[(0,r.jsx)("li",{children:"Requires higher bandwidthT"}),(0,r.jsx)("li",{children:"Has bigger messages, which means slower transmission speeds"})]})})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Use Cases"})}),(0,r.jsx)("td",{children:(0,r.jsxs)("ul",{children:[(0,r.jsx)("li",{children:"Social apps messaging"}),(0,r.jsx)("li",{children:"Cloud communication protocol"})]})}),(0,r.jsx)("td",{children:"Widely used in critical systems in the financial, telecommunications, defense, manufacturing, internet, and cloud computing industries"})]})]})]})}),(0,r.jsx)(d.A,{value:"async-delivery-semantics",label:"Delivery Semantics",children:(0,r.jsxs)("table",{children:[(0,r.jsx)("thead",{children:(0,r.jsxs)("tr",{children:[(0,r.jsx)("th",{children:"QoS (Quality of Service) Level"}),(0,r.jsx)("th",{children:"Definition"}),(0,r.jsx)("th",{children:"Message Delivery"}),(0,r.jsx)("th",{children:"Pace"}),(0,r.jsx)("th",{children:"Dependability"})]})}),(0,r.jsxs)("tbody",{children:[(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"0 (at least once)"})}),(0,r.jsx)("td",{children:"Each message will be delivered once or possibly not at all. This method prioritizes speed but compromises on reliability (may have duplicates)"}),(0,r.jsx)("td",{children:"Single Delivery"}),(0,r.jsx)("td",{children:"Swift"}),(0,r.jsx)("td",{children:"Low"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"1 (at most once)"})}),(0,r.jsx)("td",{children:"Ensures the delivery of the message but also allows the possibility of duplicates (may loose message)"}),(0,r.jsx)("td",{children:"Guaranteed Delivery"}),(0,r.jsx)("td",{children:"Fair"}),(0,r.jsx)("td",{children:"High"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"2 (exactly once)"})}),(0,r.jsx)("td",{children:"Promises a single delivery of the message. While the most reliable, it is the least speedy (guaranteed once)"}),(0,r.jsx)("td",{children:"Unambiguous Delivery"}),(0,r.jsx)("td",{children:"Slow"}),(0,r.jsx)("td",{children:"Supreme"})]})]})]})}),(0,r.jsx)(d.A,{value:"async-service-integration-patterns",label:"Service Integration Patterns",children:(0,r.jsxs)("table",{children:[(0,r.jsx)("thead",{children:(0,r.jsxs)("tr",{children:[(0,r.jsx)("th",{children:"Pattern"}),(0,r.jsx)("th",{children:"Description"}),(0,r.jsx)("th",{children:"Use Cases"}),(0,r.jsx)("th",{children:"Implementation"}),(0,r.jsx)("th",{children:"Examples"})]})}),(0,r.jsxs)("tbody",{children:[(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Request-Reply"})}),(0,r.jsx)("td",{children:"Client sends a request to a service, which processes the request and sends a response back to the client"}),(0,r.jsx)("td",{children:"Synchronous interactions where the client expects a response within a predefined time frame"}),(0,r.jsx)("td",{children:"Use protocols like HTTP, gRPC, or AMQP for request-response communication. Ensure error handling and timeout mechanisms are in place to handle failures gracefully"}),(0,r.jsx)("td",{children:"HTTP RESTful APIs and RPC calls"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Publish-Subscribe (Pub-Sub)"})}),(0,r.jsx)("td",{children:"Publishers broadcast messages (events) to one or more subscribers without knowledge of the subscribers' identities"}),(0,r.jsx)("td",{children:"Asynchronous event-driven architectures where services need to react to state changes or events"}),(0,r.jsx)("td",{children:"Utilize message brokers like Apache Kafka, RabbitMQ, or AWS SNS/SQS. Define topics for different event types and allow subscribers to consume messages asynchronously"}),(0,r.jsx)("td",{children:"User registrations, order placements, and system notifications"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Message Broker"})}),(0,r.jsx)("td",{children:"Services communicate indirectly through a message broker, which acts as an intermediary responsible for message routing and delivery"}),(0,r.jsx)("td",{children:"Decoupling of producers and consumers, enabling asynchronous communication and load balancing"}),(0,r.jsx)("td",{children:"Choose a suitable message broker (e.g., RabbitMQ, Kafka) and define message queues for point-to-point communication or topics for pub-sub scenarios"}),(0,r.jsx)("td",{children:"Task queues, job processing, and distributed logging"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Event Sourcing"})}),(0,r.jsx)("td",{children:"Services maintain a sequential record of state-changing events, which serve as the primary source of truth for data"}),(0,r.jsx)("td",{children:"Tracking and auditing changes to data, ensuring consistency and traceability across distributed systems"}),(0,r.jsx)("td",{children:"Implement event sourcing patterns using databases optimized for write-heavy workloads (e.g., Apache Kafka, Apache Pulsar) or dedicated event sourcing frameworks"}),(0,r.jsx)("td",{children:"Financial transactions, inventory management, and audit logs"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Command Query Responsibility Segregation (CQRS)"})}),(0,r.jsx)("td",{children:"Separates the responsibility for handling read and write operations into separate components, optimizing performance and scalability"}),(0,r.jsx)("td",{children:"Applications with varying read and write loads, where optimizing data retrieval and modification operations is critical"}),(0,r.jsx)("td",{children:"Maintain separate data models for reads and writes, with dedicated services handling each aspect. Utilize event sourcing and eventual consistency to synchronize data between read and write stores"}),(0,r.jsx)("td",{children:"E-commerce platforms, social media feeds, and analytics systems"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Saga Pattern"})}),(0,r.jsx)("td",{children:"Manages distributed transactions across multiple services by orchestrating a sequence of compensating actions to maintain consistency"}),(0,r.jsx)("td",{children:"Long-running business transactions spanning multiple services, where traditional ACID transactions are not feasible"}),(0,r.jsx)("td",{children:"Implement sagas using choreography or orchestration-based approaches. Utilize compensating transactions to rollback changes in case of failures and ensure eventual consistency"}),(0,r.jsx)("td",{children:"Order processing, payment processing, and booking systems"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Data Replication"})}),(0,r.jsx)("td",{children:"Copies data from one service to another to ensure availability, performance, and fault tolerance"}),(0,r.jsx)("td",{children:"Replicating data across multiple services or data centers to improve read/write performance, reduce latency, and enhance fault tolerance"}),(0,r.jsx)("td",{children:"Use techniques like master-slave replication, multi-master replication, or distributed caching to replicate data across services. Ensure consistency and synchronization mechanisms are in place to handle updates and conflicts"}),(0,r.jsx)("td",{children:"Caching, database replication, and distributed data stores"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Gateway and Proxy"})}),(0,r.jsx)("td",{children:"Provides a single entry point for clients to access multiple services, abstracting the complexities of the underlying microservices architecture"}),(0,r.jsx)("td",{children:"Simplifying client interactions, enforcing security policies, and aggregating data from multiple services"}),(0,r.jsx)("td",{children:"Deploy gateways/proxies as separate services or as part of a service mesh infrastructure. Implement routing, load balancing, and security features to manage client requests effectively"}),(0,r.jsx)("td",{children:"API gateways, reverse proxies, and edge computing platforms"})]})]})]})}),(0,r.jsx)(d.A,{value:"async-fan-in-fan-out",label:"Fan-In / Fan-Out",children:(0,r.jsxs)("table",{class:"text_vertical",children:[(0,r.jsx)("thead",{children:(0,r.jsxs)("tr",{children:[(0,r.jsx)("th",{children:"Criteria"}),(0,r.jsx)("th",{children:"Fan-In"}),(0,r.jsx)("th",{children:"Fan-Out"})]})}),(0,r.jsxs)("tbody",{children:[(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"Visualization"}),(0,r.jsx)("td",{children:(0,r.jsx)(s.mermaid,{value:"    graph LR\n\n    producer1(Producer) & producer2(Producer) & producer3(Producer) --\x3e aggregator[[Aggregator]]\n    aggregator --\x3e consumer(Consumer)"})}),(0,r.jsx)("td",{children:(0,r.jsx)(s.mermaid,{value:"    graph LR\n\n    producer(Producer) --\x3e queue([Queue])\n    queue --\x3e consumer1(Consumer 1) & consumer2(Consumer 2) & consumer3(Consumer 3)"})})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"Definition"}),(0,r.jsx)("td",{children:"Multiple nodes or components send data to a single destination or central point"}),(0,r.jsx)("td",{children:"Data is distributed from a single source or central point to multiple nodes or components"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"Purpose"}),(0,r.jsx)("td",{children:(0,r.jsxs)("ul",{children:[(0,r.jsx)("li",{children:"Aggregating data from multiple sources"}),(0,r.jsx)("li",{children:"Collecting metrics from distributed systems for analysis"})]})}),(0,r.jsx)("td",{children:(0,r.jsxs)("ul",{children:[(0,r.jsx)("li",{children:"Broadcasting updates or notifications to multiple subscribers"}),(0,r.jsx)("li",{children:"Sending requests to multiple microservices for parallel processing"})]})})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"Use Cases"}),(0,r.jsx)("td",{children:(0,r.jsxs)("ul",{children:[(0,r.jsx)("li",{children:"Aggregating logs from various services to a central monitoring system"}),(0,r.jsx)("li",{children:"Collecting metrics from distributed systems for analysis"}),(0,r.jsx)("li",{children:"Centralized logging systems like ELK stack (Elasticsearch, Logstash, Kibana)"}),(0,r.jsx)("li",{children:"Metrics aggregation platforms such as Prometheus"})]})}),(0,r.jsx)("td",{children:(0,r.jsxs)("ul",{children:[(0,r.jsx)("li",{children:"Pub/Sub systems: Apache Kafka"}),(0,r.jsx)("li",{children:"Message queues: RabbitMQ or AWS SQS (Simple Queue Service)"})]})})]})]})]})})]})}),(0,r.jsx)(d.A,{value:"communication-patterns-db",label:"Database",children:(0,r.jsxs)("table",{children:[(0,r.jsx)("thead",{children:(0,r.jsxs)("tr",{children:[(0,r.jsx)("th",{children:"Aspect"}),(0,r.jsx)("th",{children:"Binary Logs"}),(0,r.jsx)("th",{children:"Polling"})]})}),(0,r.jsxs)("tbody",{children:[(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Visualization"})}),(0,r.jsxs)("td",{children:[(0,r.jsx)(s.mermaid,{value:"    graph LR\n\n    subgraph s [Binlog Process]\n      direction LR\n\n\n      transaction(Transaction is committed) --\x3e |update| binlog(binlog Cache)\n      binlog --\x3e |commit| pageCache(Page Cache)\n      pageCache --\x3e |flush| fsync(fsync to binlog file)\n    end"}),(0,r.jsx)(s.mermaid,{value:"    graph RL\n\n    subgraph s [Replication]\n      direction LR\n\n      source(Source/Master instance) --\x3e |1. execute transaction| sourceDb[(Database)]\n      source --\x3e |2. write event| binarylog(Binary Log)\n      replica(Replica/Slave instance) --\x3e |3. run binlog dump with IO thread| source\n      replica --\x3e |4. IO thread writes the events it downloaded| relay(Relay Log)\n      replica --\x3e |5. SQL thread reads| relay\n      replica --\x3e |6. SQL thread executes events| replicaDb[(Database)]\n    end"})]}),(0,r.jsx)("td",{children:(0,r.jsx)(s.mermaid,{value:"  graph TB\n\n  write(Write Microservice) -----\x3e |message with status NEW| db[(Database)]\n\n  job(Read Jobs) --\x3e |read/poll message| db\n  job -.-> |message status PROCESSING| db\n\n  subgraph brokers [Message Brokers]\n      direction LR\n\n      broker([Broker])\n  end\n\n  job --\x3e |publish message| broker\n\n  broker --\x3e |publish| ms(Processing Microservice)\n  ms -.-> |subscribe| broker\n\n  ms -.-> |message status PROCESSED| db"})})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Definition"})}),(0,r.jsx)("td",{children:"Structured file that records changes made to a database, typically used for data recovery, replication, and auditing purposes"}),(0,r.jsx)("td",{children:"Mechanism that repeatedly querying a database to check for changes"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Trigger"})}),(0,r.jsx)("td",{children:"Database write operations"}),(0,r.jsx)("td",{children:"Periodic queries/checks"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Data Transmission"})}),(0,r.jsx)("td",{children:"Only the changes made to the database"}),(0,r.jsx)("td",{children:"All relevant data periodically"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Updates"})}),(0,r.jsx)("td",{children:"Near real-time"}),(0,r.jsx)("td",{children:"Eventual consistency"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Use Cases"})}),(0,r.jsx)("td",{children:(0,r.jsxs)("ul",{children:[(0,r.jsx)("li",{children:"High-performance systems"}),(0,r.jsx)("li",{children:"Real-time analytics"})]})}),(0,r.jsx)("td",{children:(0,r.jsxs)("ul",{children:[(0,r.jsx)("li",{children:"Reporting systems"}),(0,r.jsx)("li",{children:"Less critical data syncing"})]})})]})]})]})}),(0,r.jsx)(d.A,{value:"communication-patterns-ftp",label:"File Transfer",children:(0,r.jsxs)("table",{children:[(0,r.jsx)("thead",{children:(0,r.jsxs)("tr",{children:[(0,r.jsx)("th",{children:"Aspect"}),(0,r.jsx)("th",{children:"File Transfer Protocol (FTP)"}),(0,r.jsx)("th",{children:"File Storage"})]})}),(0,r.jsxs)("tbody",{children:[(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Visualization"})}),(0,r.jsx)("td",{children:(0,r.jsx)(s.mermaid,{value:"  graph TB\n\n  ftpClient(FTP Client) --\x3e |send file| ftpServer(FTP Server)\n  job(Read Jobs) -.-> |read/poll message| ftpServer\n  job --\x3e |send message| broker([Message Broker])\n  service(Microservice) -.-> |subscribe| broker\n  broker --\x3e |publish| service"})}),(0,r.jsx)("td",{children:(0,r.jsx)(s.mermaid,{value:"  graph TB\n\n  client( Client) --\x3e |send file| storage[(Blob Storage)]\n  job(Read Jobs) -.-> |read/poll message| storage\n  job --\x3e |send message| broker([Message Broker])\n  service(Microservice) -.-> |subscribe| broker\n  broker --\x3e |publish| service"})})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Definition"})}),(0,r.jsx)("td",{children:"FTP is a standard network protocol used for transferring files from one host to another over a TCP-based network, such as the Internet"}),(0,r.jsx)("td",{children:"File Storage involves storing files in a centralized location or distributed system, accessible by multiple users or systems, typically over a network"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Communication Model"})}),(0,r.jsx)("td",{children:"Client-server model, where clients initiate requests and servers respond"}),(0,r.jsx)("td",{children:"Can follow client-server or peer-to-peer models depending on the architecture"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Transfer Mode"})}),(0,r.jsx)("td",{children:"FTP supports two modes: ASCII and Binary, for transferring text and binary files, respectively"}),(0,r.jsx)("td",{children:"File storage supports various modes including block storage, object storage, and file systems"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Scalability"})}),(0,r.jsx)("td",{children:"FTP servers can handle a limited number of concurrent connections, scalability can be achieved through load balancing and clustering"}),(0,r.jsx)("td",{children:"File storage systems are designed for scalability, with the ability to scale horizontally by adding more storage nodes or vertically by increasing resources"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Performance"})}),(0,r.jsx)("td",{children:"Performance may vary based on network conditions and server load. Limited by factors like bandwidth and server processing power"}),(0,r.jsx)("td",{children:"Performance depends on factors like storage technology (e.g., HDD, SSD, NVMe), network bandwidth, and caching mechanisms"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Use Cases"})}),(0,r.jsx)("td",{children:"Primarily used for transferring files between a client and a server. Considered as a legacy protocol, still widely used but less favored in modern cloud-native architectures"}),(0,r.jsx)("td",{children:"Used for storing, managing, and accessing files within a network or across multiple networks. Often integrated with services like object storage or distributed file systems"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Examples"})}),(0,r.jsx)("td",{children:"FileZilla Server"}),(0,r.jsx)("td",{children:"Amazon S3, Google Cloud Storage, Azure Blob Storage"})]})]})]})}),(0,r.jsx)(d.A,{value:"communication-patterns-graphql",label:"GraphQL",children:(0,r.jsxs)(l.A,{queryString:"secondary",children:[(0,r.jsx)(d.A,{value:"communication-patterns-graphql-overview",label:"Overview",attributes:{className:"tabs__vertical"},children:(0,r.jsxs)("table",{children:[(0,r.jsx)("thead",{children:(0,r.jsxs)("tr",{children:[(0,r.jsx)("th",{children:"Aspect"}),(0,r.jsx)("th",{children:"REST"}),(0,r.jsx)("th",{children:"GraphQL"})]})}),(0,r.jsxs)("tbody",{children:[(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Visualization"})}),(0,r.jsx)("td",{children:(0,r.jsx)(s.mermaid,{value:"  graph TB\n\n  client(Client) --\x3e |REST call| product(Product)\n  client --\x3e |REST call| review(Review)\n  client --\x3e |REST call| inventory(Inventory)"})}),(0,r.jsx)("td",{children:(0,r.jsx)(s.mermaid,{value:"  graph TB\n\n  client(Client) --\x3e |REST call| graphql(GraphQL)\n\n  graphql --\x3e |request data| product(Product)\n  graphql --\x3e |request data| review(Review)\n  graphql --\x3e |request data| inventory(Inventory)"})})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Design Philosophy"})}),(0,r.jsx)("td",{children:"Based on standard HTTP methods (GET, POST, PUT, DELETE for CRUD operations) and status codes"}),(0,r.jsx)("td",{children:"A query language for APIs, not tied to HTTP. Provides single endpoint for clients to query for precisely the data they need"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Data Fetching"})}),(0,r.jsx)("td",{children:"Multiple requests might be required to gather all necessary data"}),(0,r.jsx)("td",{children:"Allows fetching all necessary data in a single request"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Over-fetching/Under-fetching"})}),(0,r.jsx)("td",{children:"Possible, as server defines what data is returned for each endpoint"}),(0,r.jsx)("td",{children:"No over- or under-fetching, as client defines exactly what data it needs. Might lead to N+1 requests problem that should be handled by dev"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Efficiency"})}),(0,r.jsx)("td",{children:"Less efficient due to over-fetching and under-fetching"}),(0,r.jsx)("td",{children:"More efficient due to minimized data transfer"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Versioning"})}),(0,r.jsx)("td",{children:"Requires versioning as changing the structure can lead to breaking changes"}),(0,r.jsx)("td",{children:"No versioning needed, as old fields can be deprecated and new ones added"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Error Handling"})}),(0,r.jsx)("td",{children:"Uses HTTP status codes"}),(0,r.jsx)("td",{children:"Provides error messages in the response, not tied to HTTP status codes"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Real-time Updates"})}),(0,r.jsx)("td",{children:"Requires additional technologies like WebSockets"}),(0,r.jsx)("td",{children:"Supports subscriptions which allows real-time updates"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Flexibility"})}),(0,r.jsx)("td",{children:"Less flexible as server defines what data is sent for each endpoint"}),(0,r.jsx)("td",{children:"API-First approach: More flexible as client specifies exactly what data it needs"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Caching"})}),(0,r.jsx)("td",{children:"Caching is straightforward with HTTP caching mechanisms"}),(0,r.jsx)("td",{children:"Requires more effort to implement as it doesn't leverage HTTP caching mechanisms"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Use Case"})}),(0,r.jsx)("td",{children:"Ideal for simple, CRUD-based projects and public APIs due to its simplicity and scalability"}),(0,r.jsx)("td",{children:"Best for complex systems, real-time data, microservices, and when precise control over data fetching is required and when following API-First approach"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Typing"})}),(0,r.jsx)("td",{children:"No built-in type system"}),(0,r.jsx)("td",{children:"Has a strong type system, which helps with validation and autocompletion tools"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"API Introspection"})}),(0,r.jsx)("td",{children:"Not supported"}),(0,r.jsx)("td",{children:"Supported, which allows clients to understand what data is available"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Optimized for"})}),(0,r.jsx)("td",{children:"Optimized for servers"}),(0,r.jsx)("td",{children:"Optimized for clients"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Scalability"})}),(0,r.jsx)("td",{children:"Might suffer performance issues due to over-fetching and multiple round trips"}),(0,r.jsx)("td",{children:"Better performance due to minimized data transfer and single round trip. For Enterprise applications Federated schemas and Apollo Router can be used"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Debugging"})}),(0,r.jsx)("td",{children:"Can be difficult due to the lack of specific error messages"}),(0,r.jsx)("td",{children:"Easier due to detailed error messages and API introspection"})]})]})]})}),(0,r.jsx)(d.A,{value:"communication-patterns-graphql-monograph-vs-supergraph",label:"Monograph vs Supergraph",children:(0,r.jsxs)("table",{children:[(0,r.jsx)("thead",{children:(0,r.jsxs)("tr",{children:[(0,r.jsx)("th",{children:"Aspect"}),(0,r.jsx)("th",{children:"Monograph"}),(0,r.jsx)("th",{children:"Supergraph"})]})}),(0,r.jsxs)("tbody",{children:[(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Visualization"})}),(0,r.jsx)("td",{children:(0,r.jsx)(s.mermaid,{value:"    graph LR\n\n    client(Client) --\x3e server[[GraphQL Server]]"})}),(0,r.jsx)("td",{children:(0,r.jsx)(s.mermaid,{value:"    graph LR\n\n    client(Client) --\x3e router[[Router]] --\x3e product{{Product Subgraph}} & inventory{{Inventory Subgraph}}"})})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Definition"})}),(0,r.jsx)("td",{children:"Single GraphQL service with its own schema, resolvers, and data sources"}),(0,r.jsx)("td",{children:"Collection of independent GraphQL services (subgraphs) stitched together into a unified GraphQL API"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Schema"})}),(0,r.jsx)("td",{children:"Single, monolithic schema defining all available data"}),(0,r.jsx)("td",{children:"Composed of individual schemas from each subgraph, combined into a single supergraph schema by the router"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Data Sources"})}),(0,r.jsx)("td",{children:"Connects directly to its own data sources"}),(0,r.jsx)("td",{children:"Can connect to its own data sources or leverage data from other subgraphs"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Resolvers"})}),(0,r.jsx)("td",{children:"Contains resolvers for all data types defined in its schema"}),(0,r.jsx)("td",{children:"Each subgraph defines resolvers for its own data types"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Client Interaction"})}),(0,r.jsx)("td",{children:"Clients interact directly with the monograph endpoint"}),(0,r.jsx)("td",{children:"Clients interact with a single supergraph endpoint managed by the router"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Scalability"})}),(0,r.jsx)("td",{children:"Limited scalability as the service grows"}),(0,r.jsx)("td",{children:"Highly scalable by adding or removing subgraphs independently"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Flexibility"})}),(0,r.jsx)("td",{children:"Limited flexibility as changes require modifying the entire schema"}),(0,r.jsx)("td",{children:"Highly flexible, allowing independent changes to subgraphs without affecting the entire API"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Use Cases"})}),(0,r.jsx)("td",{children:"Small to medium sized applications"}),(0,r.jsx)("td",{children:"Enterprise applications"})]})]})]})}),(0,r.jsx)(d.A,{value:"communication-patterns-graphql-federation",label:"Federation",children:(0,r.jsx)(s.p,{children:(0,r.jsx)(s.img,{src:n(397).A+"",width:"1405",height:"504"})})}),(0,r.jsx)(d.A,{value:"communication-patterns-graphql-",label:"GraphQL Composition",children:(0,r.jsxs)("table",{children:[(0,r.jsx)("thead",{children:(0,r.jsxs)("tr",{children:[(0,r.jsx)("th",{children:"Type"}),(0,r.jsx)("th",{children:"Concept"}),(0,r.jsx)("th",{children:"Implementation"}),(0,r.jsx)("th",{children:"Schema Design"}),(0,r.jsx)("th",{children:"Scalability"}),(0,r.jsx)("th",{children:"Use Cases"})]})}),(0,r.jsxs)("tbody",{children:[(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Schema Stitching"})}),(0,r.jsx)("td",{children:"Manually combines schemas from multiple GraphQL servers into a single schema"}),(0,r.jsx)("td",{children:"Requires manual schema manipulation and merging"}),(0,r.jsx)("td",{children:"Can be less flexible and lead to complex schemas"}),(0,r.jsx)("td",{children:"Limited scalability as adding new subgraphs requires manual schema updates"}),(0,r.jsx)("td",{children:"Simple use cases with a limited number of subgraphs and limited need for future growth"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Apollo Federation"})}),(0,r.jsx)("td",{children:"Leverages a specification and tooling to create a unified schema from independent subgraphs"}),(0,r.jsx)("td",{children:"Uses directives and extensions to define subgraphs and entity relationships"}),(0,r.jsx)("td",{children:"Promotes a clean separation of concerns with independent subgraphs"}),(0,r.jsx)("td",{children:"Highly scalable as subgraphs are independent and loosely coupled"}),(0,r.jsx)("td",{children:"Microservices architectures with independent development and deployment of subgraphs"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Code-First Approach"})}),(0,r.jsx)("td",{children:"Focuses on code-driven development of subgraphs with minimal schema manipulation"}),(0,r.jsx)("td",{children:"Relies on code libraries and frameworks to define subgraphs and resolvers"}),(0,r.jsx)("td",{children:"Encourages code-centric design for subgraphs with potential schema duplication"}),(0,r.jsx)("td",{children:"Scalability depends on the chosen code-first framework and its ability to handle distributed queries"}),(0,r.jsx)("td",{children:"Preference for code-driven development and rapid prototyping of subgraphs"})]})]})]})})]})}),(0,r.jsx)(d.A,{value:"communication-patterns-grpc",label:"gRPC",children:(0,r.jsxs)(l.A,{queryString:"secondary",children:[(0,r.jsx)(d.A,{value:"grpc-flow",label:"gRPC Flow",attributes:{className:"tabs__vertical"},children:(0,r.jsx)(s.mermaid,{value:"  graph LR\n\n  subgraph order [Order Service]\n    direction TB\n\n    clientApp(Client Application) --\x3e |2. rpc call| clientEncode(Encoding/Decoding)\n    clientEncode --\x3e |3. client stub| clientRuntime(gRPC Runtime)\n    clientRuntime --\x3e |4. send| clientTransport(Transport)\n\n    clientTransport --\x3e |12. receive| clientRuntime\n    clientRuntime --\x3e |13. decode| clientEncode\n    clientEncode --\x3e |14. result| clientApp\n  end\n\n  subgraph payment [Payment Service]\n    direction TB\n\n    serverTransport(Transport) --\x3e |6. receive| serverRuntime(gRPC Runtime)\n    serverRuntime --\x3e |7. decode stub| serverEncode(Encoding/Decoding)\n    serverEncode --\x3e |8. local call| serverApp(Server Application)\n\n    serverApp --\x3e |9. return| serverEncode\n    serverEncode --\x3e |10. encode stub| serverRuntime\n    serverRuntime --\x3e |11. send| serverTransport\n  end\n\n  client(Client) <----\x3e |1. REST call| clientApp\n\n  clientTransport <----\x3e |5. HTTP/2| serverTransport"})}),(0,r.jsx)(d.A,{value:"grpc-types",label:"Types",children:(0,r.jsxs)("table",{children:[(0,r.jsx)("thead",{children:(0,r.jsxs)("tr",{children:[(0,r.jsx)("th",{children:"Aspect"}),(0,r.jsx)("th",{children:"Unary"}),(0,r.jsx)("th",{children:"Server Streaming"}),(0,r.jsx)("th",{children:"Client Streaming"}),(0,r.jsx)("th",{children:"Bi-Directional Streaming"})]})}),(0,r.jsxs)("tbody",{children:[(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Visualization"})}),(0,r.jsx)("td",{children:(0,r.jsx)(s.mermaid,{value:"  graph TB\n\n  client(Client) --\x3e |request| server(Server)\n  server --\x3e |response| client"})}),(0,r.jsx)("td",{children:(0,r.jsx)(s.mermaid,{value:"  graph TB\n\n  client(Client) --\x3e |request| server(Server)\n\n  subgraph messages\n    direction LR\n\n    message1(( ))\n    message2(( ))\n    message3(( ))\n\n    message1 -.-> message2\n    message2 -.-> message3\n  end\n\n  server -.....-> |response| message1\n  message3 -.-> |stream messages| client"})}),(0,r.jsx)("td",{children:(0,r.jsx)(s.mermaid,{value:"  graph BT\n\n  client(Client) -.-> |request| message1\n\n  subgraph messages\n    direction LR\n\n    message1(( ))\n    message2(( ))\n    message3(( ))\n\n    message1 -.-> message2\n    message2 -.-> message3\n  end\n\n  message3 -.-> |stream messages| server(Server)\n\n  server --\x3e |response| client"})}),(0,r.jsx)("td",{children:(0,r.jsx)(s.mermaid,{value:"  graph TB\n\n  subgraph clientMessages [Messages]\n    direction LR\n\n    message1(( ))\n    message2(( ))\n    message3(( ))\n\n    message1 -.-> message2\n    message2 -.-> message3\n  end\n\n  subgraph serverMessages [Messages]\n    direction LR\n\n    message4(( ))\n    message5(( ))\n    message6(( ))\n\n    message4 -.-> message5\n    message5 -.-> message6\n  end\n\n  client(Client) -.-> |request| message1\n\n  message3 -.-> |stream messages| server(Server)\n\n  server -.-> |response| message4\n\n  message6 -.-> |stream messages| client"})})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Definition"})}),(0,r.jsx)("td",{children:"Client sends request, server sends back response"}),(0,r.jsx)("td",{children:"Client sends request, server responds with a stream to read multiple messages"}),(0,r.jsx)("td",{children:"Client sends multiple messages via stream, waits for server response"}),(0,r.jsx)("td",{children:"Both sides send and receive messages independently via streams"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Data Flow"})}),(0,r.jsx)("td",{children:"Single request - single response"}),(0,r.jsx)("td",{children:"Single request - multiple responses"}),(0,r.jsx)("td",{children:"Multiple requests - single response"}),(0,r.jsx)("td",{children:"Multiple requests - multiple responses"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Latency"})}),(0,r.jsx)("td",{children:"High, due to round-trip time"}),(0,r.jsx)("td",{children:"Lower due to continuous stream from server"}),(0,r.jsx)("td",{children:"Lower due to continuous stream from client"}),(0,r.jsx)("td",{children:"Lowest, due to continuous bi-directional communication"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Resource Usage"})}),(0,r.jsx)("td",{children:"Low, only one request and one response"}),(0,r.jsx)("td",{children:"Higher, due to the stream of responses"}),(0,r.jsx)("td",{children:"Higher, due to the stream of requests"}),(0,r.jsx)("td",{children:"Highest, due to the continuous bi-directional communication"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Real-time Data Handling"})}),(0,r.jsx)("td",{children:"Not suitable, due to high latency"}),(0,r.jsx)("td",{children:"Server can continuously send updates"}),(0,r.jsx)("td",{children:"Client can continuously send updates"}),(0,r.jsx)("td",{children:"Both client and server can continuously send updates"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Use Cases"})}),(0,r.jsx)("td",{children:(0,r.jsx)("ul",{children:(0,r.jsx)("li",{children:"Request/Response pattern"})})}),(0,r.jsx)("td",{children:(0,r.jsxs)("ul",{children:[(0,r.jsx)("li",{children:"Live audio/video streaming"}),(0,r.jsx)("li",{children:"Send large datasets"}),(0,r.jsx)("li",{children:"Download files"})]})}),(0,r.jsx)("td",{children:(0,r.jsxs)("ul",{children:[(0,r.jsx)("li",{children:"Upload files"}),(0,r.jsx)("li",{children:"Sending client-side streaming data"})]})}),(0,r.jsx)("td",{children:(0,r.jsxs)("ul",{children:[(0,r.jsx)("li",{children:"Chat applications"}),(0,r.jsx)("li",{children:"Real-time gaming"})]})})]})]})]})}),(0,r.jsx)(d.A,{value:"grpc-rpc",label:"RPC vs RESTful",children:(0,r.jsxs)("table",{children:[(0,r.jsx)("thead",{children:(0,r.jsxs)("tr",{children:[(0,r.jsx)("th",{children:"Aspect"}),(0,r.jsx)("th",{children:"RPC"}),(0,r.jsx)("th",{children:"RESTful"})]})}),(0,r.jsxs)("tbody",{children:[(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Message type"})}),(0,r.jsx)("td",{children:"Resource"}),(0,r.jsx)("td",{children:"Binary"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Coupling"})}),(0,r.jsx)("td",{children:"Strong"}),(0,r.jsx)("td",{children:"Weak"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Data format"})}),(0,r.jsx)("td",{children:"binary, thrift, protobuf, avro"}),(0,r.jsx)("td",{children:"text, xml, json, csv"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Communication protocol"})}),(0,r.jsx)("td",{children:"TCP"}),(0,r.jsx)("td",{children:"HTTP/1.1, HTTP/2"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Performance"})}),(0,r.jsx)("td",{children:"High"}),(0,r.jsx)("td",{children:"Lower"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"IDL (Interface Definition Language)"})}),(0,r.jsx)("td",{children:"Thrift, protobuf"}),(0,r.jsx)("td",{children:"Swagger"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Client code generation"})}),(0,r.jsx)("td",{children:"Auto-generated stub"}),(0,r.jsx)("td",{children:"Auto-generated stub"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Developer experience"})}),(0,r.jsx)("td",{children:"Not human readable and hard to debug"}),(0,r.jsx)("td",{children:"Human readable and easy to debug"})]})]})]})}),(0,r.jsx)(d.A,{value:"grpc-trpc",label:"gRPC vs tRPC",children:(0,r.jsxs)("table",{children:[(0,r.jsx)("thead",{children:(0,r.jsxs)("tr",{children:[(0,r.jsx)("th",{children:"Comparison Criteria"}),(0,r.jsx)("th",{children:"gRPC (Google RPC)"}),(0,r.jsx)("th",{children:"tRPC (TypeScript RPC)"})]})}),(0,r.jsxs)("tbody",{children:[(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Language Support"})}),(0,r.jsx)("td",{children:"Supports a wide range of programming languages including C++, Python, Ruby, and C#"}),(0,r.jsx)("td",{children:"Primarily supports TypeScript and JavaScript, other languages are not supported"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Protocol"})}),(0,r.jsx)("td",{children:"Uses HTTP/2 as a default transport protocol"}),(0,r.jsx)("td",{children:"Uses HTTP/1.1, HTTP/2, and HTTP/3 protocols"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Data Format"})}),(0,r.jsx)("td",{children:"Uses Protocol Buffers as the interface definition language"}),(0,r.jsx)("td",{children:"Uses JSON as the data format"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Streaming Support"})}),(0,r.jsx)("td",{children:"Supports bi-directional streaming and flow control"}),(0,r.jsx)("td",{children:"tRPC doesn't support streaming natively but can be used with streaming libraries"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Client-Server Communication"})}),(0,r.jsx)("td",{children:"Uses a contract-first approach to client-server communication"}),(0,r.jsx)("td",{children:"Uses a code-first approach to client-server communication"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"API Contract"})}),(0,r.jsx)("td",{children:"Interface definition language (IDL) is required for defining the API contract"}),(0,r.jsx)("td",{children:"Type safety is provided by the TypeScript compiler, and doesn't require a separate IDL"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Error Handling"})}),(0,r.jsx)("td",{children:"Provides a rich model for handling various types of errors"}),(0,r.jsx)("td",{children:"Has a simpler mechanism for handling errors"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Performance"})}),(0,r.jsx)("td",{children:"High performance due to binary data format and HTTP/2 protocol"}),(0,r.jsx)("td",{children:"Performance is good but not as high as gRPC due to JSON and HTTP/1.1 usage"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Use Cases"})}),(0,r.jsx)("td",{children:"Suitable for microservices, real-time systems, and point-to-point services"}),(0,r.jsx)("td",{children:"Suitable for building APIs in TypeScript or JavaScript"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Server Push"})}),(0,r.jsx)("td",{children:"Supports server push via HTTP/2"}),(0,r.jsx)("td",{children:"Server push is not supported natively"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Interoperability"})}),(0,r.jsx)("td",{children:"Can interoperate with other gRPC services out of the box"}),(0,r.jsx)("td",{children:"Interoperability is limited to TypeScript and JavaScript"})]})]})]})})]})}),(0,r.jsx)(d.A,{value:"communication-patterns-p2p",label:"P2P",children:(0,r.jsxs)(l.A,{queryString:"secondary",children:[(0,r.jsxs)(d.A,{value:"p2p-overview",label:"Overview",attributes:{className:"tabs__vertical"},children:[(0,r.jsx)(s.p,{children:'Peer-to-peer (P2P) is a decentralized network model where nodes, or "peers", connect directly to each other instead of via a central server. Each peer shares resources like processing power or storage, enabling efficient and flexible data distribution'}),(0,r.jsx)(s.mermaid,{value:"    graph LR\n\n    subgraph orders [Orders]\n        direction LR\n\n        order1(Order Service)\n        order2(Order Service)\n        order3(Order Service)\n    end\n\n    subgraph payments [Payments]\n        direction LR\n\n        payment1(Payment Service)\n        payment2(Payment Service)\n        payment3(Payment Service)\n    end\n\n    order1 --\x3e payment1\n    order1 --\x3e payment2\n    order1 --\x3e payment3\n\n    order2 --\x3e payment1\n    order2 --\x3e payment2\n    order2 --\x3e payment3\n\n    order3 --\x3e payment1\n    order3 --\x3e payment2\n    order3 --\x3e payment3"})]}),(0,r.jsx)(d.A,{value:"p2p-types",label:"Network Types",children:(0,r.jsxs)("table",{children:[(0,r.jsx)("thead",{children:(0,r.jsxs)("tr",{children:[(0,r.jsx)("th",{children:"Aspect"}),(0,r.jsx)("th",{children:"Unstructured P2P"}),(0,r.jsx)("th",{children:"Structured P2P"}),(0,r.jsx)("th",{children:"Hybrid P2P"})]})}),(0,r.jsxs)("tbody",{children:[(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Topology"})}),(0,r.jsx)("td",{children:"Random, decentralized"}),(0,r.jsx)("td",{children:"Overlay network, usually structured based on distributed hash tables (DHTs)"}),(0,r.jsx)("td",{children:"Combination of decentralized and structured elements"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Routing"})}),(0,r.jsx)("td",{children:"Flooding, random walk"}),(0,r.jsx)("td",{children:"DHT-based (Chord, Kademlia, etc.)"}),(0,r.jsx)("td",{children:"Combination of flooding and DHT-based routing"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Scalability"})}),(0,r.jsx)("td",{children:"Limited by flooding, can suffer from congestion and inefficiency as network size grows"}),(0,r.jsx)("td",{children:"Highly scalable due to structured routing, can handle large-scale networks efficiently"}),(0,r.jsx)("td",{children:"Offers good scalability by combining the benefits of both structured and unstructured approaches"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Search Efficiency"})}),(0,r.jsx)("td",{children:"Low, as searches may need to traverse the entire network"}),(0,r.jsx)("td",{children:"High, logarithmic time complexity for routing queries"}),(0,r.jsx)("td",{children:"Moderate, depends on the implementation"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Fault Tolerance"})}),(0,r.jsx)("td",{children:"Limited, as nodes may join/leave without coordination, leading to data loss or inconsistency"}),(0,r.jsx)("td",{children:"High, redundancy and structured routing ensure resilience against node failures"}),(0,r.jsx)("td",{children:"Moderately high, benefits from both decentralized nature and structured redundancy"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Data Locality"})}),(0,r.jsx)("td",{children:"Low, data may be stored on any node, leading to increased latency for retrieval"}),(0,r.jsx)("td",{children:"Moderate, structured routing enables efficient data localization"}),(0,r.jsx)("td",{children:"Moderate, depends on the implementation"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Resource Consumption"})}),(0,r.jsx)("td",{children:"High, due to flooding and lack of optimization in routing"}),(0,r.jsx)("td",{children:"Moderate, structured routing reduces resource consumption compared to unstructured P2P"}),(0,r.jsx)("td",{children:"Moderate, depends on the balance between structured and unstructured elements"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Security"})}),(0,r.jsx)("td",{children:"Low, vulnerable to sybil attacks, as nodes can easily join without verification"}),(0,r.jsx)("td",{children:"Moderate to high, DHT-based authentication and routing protocols enhance security"}),(0,r.jsx)("td",{children:"Moderate, depends on the implementation and integration of security measures"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Examples"})}),(0,r.jsx)("td",{children:"BitTorrent"}),(0,r.jsx)("td",{children:"Chord, Kademlia"}),(0,r.jsx)("td",{children:"Blockchain networks"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Use Cases"})}),(0,r.jsx)("td",{children:"File sharing, ad hoc communication"}),(0,r.jsx)("td",{children:"Distributed storage, content delivery networks"}),(0,r.jsx)("td",{children:"Decentralized finance, decentralized applications"})]})]})]})})]})}),(0,r.jsx)(d.A,{value:"communication-patterns-stream",label:"Stream",children:(0,r.jsxs)("table",{children:[(0,r.jsx)("thead",{children:(0,r.jsxs)("tr",{children:[(0,r.jsx)("th",{children:"Aspect"}),(0,r.jsx)("th",{children:"Short Polling"}),(0,r.jsx)("th",{children:"Long Polling"}),(0,r.jsx)("th",{children:"Webhook"}),(0,r.jsx)("th",{children:"WebSockets"}),(0,r.jsx)("th",{children:"Server-Sent Events (SSE)"})]})}),(0,r.jsxs)("tbody",{children:[(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Visualization"})}),(0,r.jsx)("td",{children:(0,r.jsx)(s.mermaid,{value:"  sequenceDiagram\n\n  participant Client\n  participant Server\n\n  Client->>Server: Request\n  Server--\x3e>Client: No new data\n\n  loop Check for updates\n      Client->>Server: Poll for updates\n      Server--\x3e>Client: New data (if available)\n      Note over Client,Server: Delay between requests (client-side)\n  end"})}),(0,r.jsx)("td",{children:(0,r.jsx)(s.mermaid,{value:"  sequenceDiagram\n\n  participant Client\n  participant Server\n\n  Client->>Server: Request\n  activate Server\n  Server--\x3e>Client: No new data\n  deactivate Server\n\n  loop Check for updates\n      Client->>Server: Long poll for updates\n      activate Server\n      Server--\x3e>Client: New data (if available)\n      deactivate Server\n      Note over Client,Server: Connection kept open (server-side)\n  end"})}),(0,r.jsx)("td",{children:(0,r.jsx)(s.mermaid,{value:"    sequenceDiagram\n\n    participant User\n    participant App\n    participant Server\n    participant Webhook\n\n    User->>App: Performs an action\n    App->>Server: Sends data about the action\n    Note right of Server: Processes data and decides\n    Server->>Webhook: Triggers the Webhook\n    Webhook->>App: Sends data (POST request)\n    App->>User: Updates based on Webhook data"})}),(0,r.jsx)("td",{children:(0,r.jsx)(s.mermaid,{value:"  sequenceDiagram\n\n  participant Client\n  participant Server\n\n  Client->>Server: Establish connection\n  Server--\x3e>Client: Connection Accepted (101 Switching Protocols)\n\n  loop events\n    Client->>Server: Send Message\n    Server--\x3e>Client: Receive Message\n  end\n\n  Client->>Server: Close Connection\n  Server--\x3e>Client: Close Connection"})}),(0,r.jsx)("td",{children:(0,r.jsx)(s.mermaid,{value:"  sequenceDiagram\n  participant Client\n  participant Server\n\n  Client->>Server: Establish connection\n  Server--\x3e>Client: Connection established\n\n  Client->>Server: Request\n\n  loop Receive events\n      Server->>Client: Event data\n  end\n\n  Client->>Server: Close connection\n  Server--\x3e>Client: Connection closed"})})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Real-time communication"})}),(0,r.jsx)("td",{children:"No, it makes repeated requests even if no data is available"}),(0,r.jsx)("td",{children:"Yes, it keeps connection open until data is available"}),(0,r.jsx)("td",{children:"Yes, server pushes data to client when a particular event happens"}),(0,r.jsx)("td",{children:"Yes, it provides full-duplex communication channels"}),(0,r.jsx)("td",{children:"Yes, it allows a server to push updates to clients"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Efficiency"})}),(0,r.jsx)("td",{children:"Low, as it continuously asks for data from the server, leading to high network traffic"}),(0,r.jsx)("td",{children:"Higher than short polling, as it reduces unnecessary network overhead"}),(0,r.jsx)("td",{children:"High, no need for client to continuously poll for data, reducing network traffic"}),(0,r.jsx)("td",{children:"High, as it only communicates when there is new data, and maintains a constant connection"}),(0,r.jsx)("td",{children:"High, as it allows servers to push updates without client requests"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Complexity"})}),(0,r.jsx)("td",{children:"Low, as it uses standard HTTP requests"}),(0,r.jsx)("td",{children:"Higher than short polling, as it needs to maintain open connections"}),(0,r.jsx)("td",{children:"Medium, client needs to subscribe to events and server needs to support webhooks"}),(0,r.jsx)("td",{children:"High, as it requires specific protocols and server-side implementation"}),(0,r.jsx)("td",{children:"Medium, as it mostly requires server-side implementation"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"HTTP Headers"})}),(0,r.jsx)("td",{children:"Sent with every request, increasing overhead"}),(0,r.jsx)("td",{children:"Sent with every request, increasing overhead"}),(0,r.jsx)("td",{children:"Sent only when an event occurs, reducing overhead"}),(0,r.jsx)("td",{children:"Sent only at connection setup, reducing overhead"}),(0,r.jsx)("td",{children:"Sent only at connection setup, reducing overhead"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Data Direction"})}),(0,r.jsx)("td",{children:"Bidirectional, but inefficient"}),(0,r.jsx)("td",{children:"Bidirectional, but inefficient"}),(0,r.jsx)("td",{children:"Unidirectional (server to client), best for delivering event notifications"}),(0,r.jsx)("td",{children:"Bidirectional, providing real-time interaction"}),(0,r.jsx)("td",{children:"Unidirectional (server to client), best for delivering updates"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Connection Persistence"})}),(0,r.jsx)("td",{children:"No, connections are closed after each request"}),(0,r.jsx)("td",{children:"Yes, until the server has data to send"}),(0,r.jsx)("td",{children:"No, connections are established only when an event occurs"}),(0,r.jsx)("td",{children:"Yes, connections are kept alive until closed by either client or server"}),(0,r.jsx)("td",{children:"Yes, until the client closes the connection"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Use Cases"})}),(0,r.jsx)("td",{children:"Best for when updates are infrequent and data is small"}),(0,r.jsx)("td",{children:"Best for when updates are sporadic but real-time delivery is required"}),(0,r.jsx)("td",{children:"Best for real-time notifications, when you want to be notified when a particular event happens"}),(0,r.jsx)("td",{children:"Best for real-time applications, gaming, chat applications etc"}),(0,r.jsx)("td",{children:"Best for real-time applications, especially when updates are only required to be sent to the client"})]})]})]})}),(0,r.jsx)(d.A,{value:"communication-patterns-sync",label:"Sync",children:(0,r.jsxs)(l.A,{queryString:"secondary",children:[(0,r.jsx)(d.A,{value:"sync-development",label:"Development Styles",attributes:{className:"tabs__vertical"},children:(0,r.jsxs)("table",{children:[(0,r.jsx)("thead",{children:(0,r.jsxs)("tr",{children:[(0,r.jsx)("th",{children:"Aspect"}),(0,r.jsx)("th",{children:"Code First"}),(0,r.jsx)("th",{children:"API First"})]})}),(0,r.jsxs)("tbody",{children:[(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Visualization"})}),(0,r.jsx)("td",{children:(0,r.jsx)(s.mermaid,{value:"  graph TB\n\n  develop(Develop code) --\x3e integrate(Integrate code)\n  tests(Write tests and API docs) --\x3e |run tests| integrate\n  integrate --\x3e deploy(Deploy)\n  deploy --\x3e release(Release new version)"})}),(0,r.jsx)("td",{children:(0,r.jsx)(s.mermaid,{value:"  graph TB\n\n  design(Design API) --\x3e review(Review & mock API)\n  review --\x3e developApi(Develop API)\n\n  review --\x3e |generate code| developCode(Develop code)\n  document(Document API & write tests) -.-> developCode\n  developCode --\x3e integrate(Integrate & deploy code)\n  publish(Publish API docs & run tests) -.-> integrate\n\n  developApi --\x3e deploy(Deploy API)\n  deploy --\x3e release(Release new version)\n\n  integrate --\x3e release"})})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Definition"})}),(0,r.jsx)("td",{children:"Development of the application begins with coding, and the APIs are developed from the code"}),(0,r.jsx)("td",{children:"APIs are developed before the actual coding begins. The APIs are designed and documented first, followed by the development of the application"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Approach"})}),(0,r.jsx)("td",{children:"Bottom-up: Focuses on the application's functionality. Serves application's needs"}),(0,r.jsx)("td",{children:"Top-down: Client-oriented approach. Serves client's needs"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Design Focus"})}),(0,r.jsx)("td",{children:"Focuses primarily on the application's functionality and then on the API capabilities"}),(0,r.jsx)("td",{children:"Prioritizes the design and capabilities of the APIs, and then the application is built around these APIs"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Implementation Speed"})}),(0,r.jsx)("td",{children:"Can be faster initially because the development can start immediately without having to wait for the API design"}),(0,r.jsx)("td",{children:"Might be slower to start because the API design needs to be completed first. However, in the long run, it can speed up the development process as it provides a clear roadmap. In addition, cross-team collaboration can be improved as well and decentralize/distribute the workflow among multiple teams without any overhead or delays"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Collaboration"})}),(0,r.jsx)("td",{children:"Might lead to less collaboration as developers might not have a clear vision of the final product"}),(0,r.jsx)("td",{children:"Promotes collaboration between front-end and back-end developers, as well as other stakeholders, as everyone has a clear understanding of the APIs and their capabilities"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Scalability"})}),(0,r.jsx)("td",{children:"Scalability can be a challenge as changes in the code might require changes in the APIs"}),(0,r.jsx)("td",{children:"Considers scalability from the start. APIs are designed to cater to future needs, which makes scaling more straightforward"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Consistency"})}),(0,r.jsx)("td",{children:"May lead to inconsistency in API design as different developers might design APIs differently"}),(0,r.jsx)("td",{children:"Ensures consistency in API design as all APIs are designed before the coding begins, following a predefined set of standards"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Documentation"})}),(0,r.jsx)("td",{children:"Can be a challenge in the Code First approach, as it is often treated as an afterthought"}),(0,r.jsx)("td",{children:"Prioritizes documentation, which is done in the initial stages of the project. This ensures that all stakeholders understand the APIs and their capabilities"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Testing"})}),(0,r.jsx)("td",{children:"Testing is generally performed after the application has been developed"}),(0,r.jsx)("td",{children:"APIs can be tested independently of the application, allowing for early detection and resolution of issues"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Integration"})}),(0,r.jsx)("td",{children:"Might present integration challenges as the APIs might not align with 3rd-party systems or components"}),(0,r.jsx)("td",{children:"Considers integration from the start. APIs are designed to be reusable and can be easily integrated with other systems"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Maintenance"})}),(0,r.jsx)("td",{children:"Might lead to higher maintenance costs if changes in the code require changes in the APIs"}),(0,r.jsx)("td",{children:"With its focus on scalability and integration from the start, can lead to lower maintenance costs in the long run"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Use Case"})}),(0,r.jsx)("td",{children:"Well-suited for small, simple projects where quick development is required"}),(0,r.jsx)("td",{children:"Ideal for complex, large-scale projects where scalability, consistency, and integration are key considerations"})]})]})]})}),(0,r.jsxs)(d.A,{value:"sync-retry-patterns",label:"Retry Patterns",children:[(0,r.jsx)(s.h3,{id:"patterns",children:"Patterns"}),(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Cancel"}),": User can cancel the request"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Immediate retry"}),": User immediately resends a request"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Incremental intervals"}),": User waits for a short time for the first retry, and then incrementally increases the time for subsequent retries"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Exponential Backoff"}),": Retry after waiting doubled from previous attempt (1s, 2s, 4s...)"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Exponential Backoff with Jitter"}),": Adds randomness to waiting times to prevent retries from all hitting the server at once"]}),"\n"]}),(0,r.jsx)(s.h3,{id:"cons",children:"Cons"}),(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"Degrade/Overload the system"}),"\n",(0,r.jsx)(s.li,{children:"Idempotency consideration (operation that produces the same outcome for the same input)"}),"\n",(0,r.jsx)(s.li,{children:"Retry amplification (retries aren't always needed)"}),"\n"]}),(0,r.jsx)(s.h3,{id:"solutions",children:"Solutions"}),(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"Rate limiting"}),"\n",(0,r.jsx)(s.li,{children:"Circuit breakers"}),"\n"]})]})]})})]}),"\n",(0,r.jsx)(s.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,r.jsxs)(l.A,{queryString:"primary",children:[(0,r.jsx)(d.A,{value:"best-practices-asynchronous",label:"Asynchronous",children:(0,r.jsxs)(l.A,{queryString:"secondary",children:[(0,r.jsxs)(d.A,{value:"async-versioning",label:"Versioning",attributes:{className:"tabs__vertical"},children:[(0,r.jsx)(s.h3,{id:"semantic-versioning",children:"Semantic Versioning"}),(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Semantic Versioning (SemVer)"}),": (",(0,r.jsx)(s.code,{children:"1.0.0"}),")"]}),(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"MAJOR"}),": version for incompatible contract changes"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"MINOR"}),": version for adding functionality in a backward-compatible manner"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"PATCH"}),": version for backward-compatible bug fixes"]}),"\n"]}),(0,r.jsx)(s.h2,{id:"strategies",children:"Strategies"}),(0,r.jsxs)("table",{children:[(0,r.jsx)("thead",{children:(0,r.jsxs)("tr",{children:[(0,r.jsx)("th",{children:"Strategy"}),(0,r.jsx)("th",{children:"Definition"}),(0,r.jsx)("th",{children:"Consumers Action"}),(0,r.jsx)("th",{children:"Pros"}),(0,r.jsx)("th",{children:"Cons"})]})}),(0,r.jsxs)("tbody",{children:[(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Schema Versioning"})}),(0,r.jsx)("td",{children:"Explicitly include a version number in the message itself"}),(0,r.jsx)("td",{children:"Consumers can handle messages based on their version"}),(0,r.jsx)("td",{children:(0,r.jsxs)("ul",{children:[(0,r.jsx)("li",{children:"Granular control"}),(0,r.jsx)("li",{children:"Easy identification of changes"})]})}),(0,r.jsx)("td",{children:(0,r.jsxs)("ul",{children:[(0,r.jsx)("li",{children:"More complex implementation"}),(0,r.jsx)("li",{children:"Potential for breaking changes"})]})})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Backward Compatible Schema Evolution"})}),(0,r.jsx)("td",{children:"Introduce new optional fields to messages without breaking existing consumers"}),(0,r.jsx)("td",{children:"Consumers can ignore new fields they don't understand"}),(0,r.jsx)("td",{children:(0,r.jsxs)("ul",{children:[(0,r.jsx)("li",{children:"Minimizes disruption"}),(0,r.jsx)("li",{children:"Promotes smooth upgrades"})]})}),(0,r.jsx)("td",{children:(0,r.jsx)("ul",{children:(0,r.jsx)("li",{children:"Can lead to cluttered messages over time"})})})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Forward Compatible Schema Evolution"})}),(0,r.jsx)("td",{children:"Mark existing fields as deprecated in older versions"}),(0,r.jsx)("td",{children:"Introduce new fields in newer versions for future consumers"}),(0,r.jsx)("td",{children:(0,r.jsxs)("ul",{children:[(0,r.jsx)("li",{children:"Prepares for future changes"}),(0,r.jsx)("li",{children:"Avoids cluttering older messages"})]})}),(0,r.jsx)("td",{children:(0,r.jsxs)("ul",{children:[(0,r.jsx)("li",{children:"Requires handling deprecated fields"}),(0,r.jsx)("li",{children:"Potential confusion for consumers unaware of versions"})]})})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Content Negotiation"})}),(0,r.jsx)("td",{children:"Producer and consumer negotiate the message format during connection establishment"}),(0,r.jsx)("td",{children:"Allows for dynamic adaptation and interoperability between different versions"}),(0,r.jsx)("td",{children:(0,r.jsxs)("ul",{children:[(0,r.jsx)("li",{children:"Highly flexible"}),(0,r.jsx)("li",{children:"Avoids version conflicts"})]})}),(0,r.jsx)("td",{children:(0,r.jsxs)("ul",{children:[(0,r.jsx)("li",{children:"More complex implementation"}),(0,r.jsx)("li",{children:"Requires additional negotiation overhead"})]})})]})]})]}),(0,r.jsx)(s.h3,{id:"considerations",children:"Considerations"}),(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Trade-offs"}),": Complexity vs Flexibility, Backward vs Forward Compatibility"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Start simple"}),": Opt for schema versioning or backward-compatible evolution for most cases"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Use content negotiation"}),": For highly dynamic environments with diverse clients"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Versioning granularity"}),": Decide if versioning applies to entire messages or individual fields"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Version deprecation policy"}),": Define a timeline for removing support for older versions"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Versioning tooling"}),": Leverage tools for schema documentation, validation, and migration"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Clear communication"}),": Document versioning policies and notify stakeholders of upcoming changes"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Forsee Future Changes"}),": Plan for message versioning to accommodate future changes in the payload structure, and ensure backward and forward compatibility to facilitate system evolution"]}),"\n"]})]}),(0,r.jsxs)(d.A,{value:"async-communication-channels",label:"Communication Channels",children:[(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Identify Use Cases"}),":","\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"Processing large data sets"}),"\n",(0,r.jsx)(s.li,{children:"Triggering workflows"}),"\n",(0,r.jsx)(s.li,{children:"Sending notifications"}),"\n",(0,r.jsx)(s.li,{children:"Real-time communication"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Message Routing and Filtering"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"Topic-based vs Queue-based Routing"}),"\n",(0,r.jsx)(s.li,{children:"Content-Based Routing"}),"\n",(0,r.jsx)(s.li,{children:"Filtering Techniques (Header, Metadata, Content)"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Messaging Pattern"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Point-to-Point (P2P)"}),": Messages are delivered from a single producer to a single consumer. Ideal for one-off tasks or directed communication"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Publish-Subscribe (Pub/Sub)"}),": Messages are published to a topic, and any interested subscribers receive them. Great for real-time updates and broadcasting information"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Request-Reply"}),":  Similar to synchronous communication, but with a delayed response to handle long-running tasks"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Messaging Technology"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Message Queues (MQ)"}),": Robust and reliable, offering features like message persistence, retries, and guaranteed delivery (RabbitMQ, Apache Kafka, Amazon SQS)"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Streaming Platforms (Apache Kafka)"}),": Handle high-volume, real-time data pipelines with low latency"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Server-Sent Events (SSE) and WebSockets"}),":  Enable bi-directional communication for real-time web applications"]}),"\n"]}),"\n"]}),"\n"]}),(0,r.jsx)(s.h3,{id:"naming",children:"Naming"}),(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Abbreviation Standards"}),": Define a clear abbreviation policy for common elements (",(0,r.jsx)(s.code,{children:"prod"})," for production)"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Case Sensitivity"}),": Decide on case sensitivity (uppercase, lowercase, mixed) for consistency"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Namespace Separation"}),": Utilize separators (hyphen ",(0,r.jsx)(s.code,{children:"-"}),", underscore ",(0,r.jsx)(s.code,{children:"_"}),") to differentiate between elements clearly"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Naming Length"}),": Maintain a reasonable length to avoid excessive complexity"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Structure"}),": ",(0,r.jsx)(s.code,{children:"{base_resource}.{environment}.{application}.{functionality}[.{version}]"})," (",(0,r.jsx)(s.code,{children:"queue.prod.order-processing.payment-confirmation.v2"}),")","\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Base Resource"}),": Identify the top-level resource category (",(0,r.jsx)(s.code,{children:"queue"}),", ",(0,r.jsx)(s.code,{children:"topic"}),", ",(0,r.jsx)(s.code,{children:"exchange"}),")"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Environment"}),": Indicate the deployment environment (",(0,r.jsx)(s.code,{children:"dev"}),", ",(0,r.jsx)(s.code,{children:"test"}),", ",(0,r.jsx)(s.code,{children:"prod"}),")"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Domain/Product/Application"}),": Specify the entity using the resource (",(0,r.jsx)(s.code,{children:"order-processing"}),", ",(0,r.jsx)(s.code,{children:"user-service"}),")"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Functionality"}),": Describe the specific functionality of the resource (",(0,r.jsx)(s.code,{children:"payment-confirmation"}),", ",(0,r.jsx)(s.code,{children:"user-registration"}),")"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Versioning Strategy"}),": Establish a versioning approach to denote changes (semantic versioning)"]}),"\n"]}),"\n"]}),"\n"]})]}),(0,r.jsxs)(d.A,{value:"async-resource-naming-convention",label:"Resource Naming Convention",children:[(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Abbreviations"}),": Use abbreviations judiciously for commonly used terms, but ensure clarity for less familiar ones"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Clarity and Consistency"}),": Use clear and concise names that accurately reflect the field's purpose"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Domain-Specificity"}),": Use terminology relevant to the specific domain the message applies to"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Extensibility"}),": Design messages to be easily extensible for future requirements"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Generic Terms"}),': Avoid generic terms like "data" or "value" unless their meaning is self-evident']}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Hierarchical Structure"}),": If necessary, use a hierarchical structure for nested data"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Immutability"}),": Prefer immutable message fields to maintain data integrity"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Maintain consistent naming conventions"}),": Use consistent naming throughout the system (",(0,r.jsx)(s.code,{children:"camelCase"}),", ",(0,r.jsx)(s.code,{children:"snake_case"}),")"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Message Format"}),": Define a clear and consistent message format (JSON, Protobuf)"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Metadata Fields"}),": Incorporate metadata fields for tracking message processing (",(0,r.jsx)(s.code,{children:"retry_count"}),", ",(0,r.jsx)(s.code,{children:"status"}),", ",(0,r.jsx)(s.code,{children:"error_details"}),")"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Payload Structure"}),": Design payload structure to encapsulate data relevant to the specific use case"]}),"\n"]}),(0,r.jsx)(s.h3,{id:"common-fields",children:"Common Fields"}),(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Acknowledgment"}),": Mechanism for confirming message receipt or processing status"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Correlation ID"}),": Links related messages for tracking and tracing purposes"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Message ID"}),": Unique identifier for each message instance"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Message Type"}),": Indicates the purpose or category of the message"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Priority"}),": Importance level of the message for processing"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Source/Destination"}),": Identify the sender and recipient of the message"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Timestamps"}),": Creation time, expiration time, and processing time (UTC timestamp as number or in ISO-8601 format)"]}),"\n"]})]}),(0,r.jsx)(d.A,{value:"async-error-handling",label:"Error Handling",children:(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Dead Letter Queues"}),": Implement dead letter queues for handling undeliverable messages"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Error Logging"}),": Log errors and exceptions for troubleshooting and analysis"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Retry Policies"}),": Define retry policies with exponential backoff to handle transient failures"]}),"\n"]})}),(0,r.jsx)(d.A,{value:"async-data-filtering",label:"Data Filtering",children:(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Message Delivery Acknowledgment"}),": Implement acknowledgement mechanisms to confirm message receipt or processing status"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Message Expiration / Time-To-Live (TTL)"}),": Implement message expiration to ensure message delivery after specified time periods"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Message Ordering"}),": Ensure message ordering to avoid race conditions"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Message Queuing"}),": Implement message queuing for reliable delivery and load balancing"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Message Routing"}),": Implement message routing to ensure message delivery to the appropriate destination"]}),"\n"]})}),(0,r.jsx)(d.A,{value:"async-data-security",label:"Security",children:(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Access Control"}),": Implement access controls to restrict message access based on roles and permissions"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Compliance"}),": Ensure compliance with industry standards and regulations (GDPR, HIPAA)"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Encryption"}),": Encrypt sensitive message data both in transit and at rest"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Schema Registry"}),": Use schema registries to manage schema versions and enforce validation"]}),"\n"]})}),(0,r.jsx)(d.A,{value:"async-traceability",label:"Traceability",children:(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Auditing"}),": Enable auditing mechanisms for tracking message access and modifications"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Monitoring"}),": Set up monitoring for tracking message processing metrics and error rates"]}),"\n"]})}),(0,r.jsx)(d.A,{value:"async-performance",label:"Performance",children:(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Batching"}),": Implement batching techniques to reduce the number of messages sent"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Caching"}),": Utilize caching mechanisms for frequently accessed or static message data to enhance performance"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Compression"}),": Compress message data to reduce network overhead and improve performance"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Concurrency"}),": Implement concurrency patterns to handle high message volumes efficiently"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Payload Size"}),": Minimize payload size to reduce network overhead"]}),"\n"]})})]})}),(0,r.jsx)(d.A,{value:"best-practices-rest-api",label:"REST API",children:(0,r.jsxs)(l.A,{queryString:"secondary",children:[(0,r.jsx)(d.A,{value:"rest-api-versioning",label:"Versioning",attributes:{className:"tabs__vertical"},children:(0,r.jsxs)("table",{children:[(0,r.jsx)("thead",{children:(0,r.jsxs)("tr",{children:[(0,r.jsx)("th",{children:"Versioning"}),(0,r.jsx)("th",{children:"Definition"}),(0,r.jsx)("th",{children:"Caching"}),(0,r.jsx)("th",{children:"Compatibility"}),(0,r.jsx)("th",{children:"Example"}),(0,r.jsx)("th",{children:"Use Cases"})]})}),(0,r.jsxs)("tbody",{children:[(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"URL Path"})}),(0,r.jsx)("td",{children:"Version information is included in the URL path"}),(0,r.jsx)("td",{children:"Each version has a unique URL, making it easy to cache separately"}),(0,r.jsx)("td",{children:"Older versions remain accessible via their unique URLs"}),(0,r.jsx)("td",{children:(0,r.jsx)(s.code,{children:"test.com/v1/users"})}),(0,r.jsx)("td",{children:"Public APIs"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"URL Query"})}),(0,r.jsx)("td",{children:"Version information is included in the query parameters of the URL"}),(0,r.jsx)("td",{children:"Cache configuration might be complex as the URL is the same but the query parameter differs"}),(0,r.jsx)("td",{children:"Older versions remain accessible as long as the query parameters are supported"}),(0,r.jsx)("td",{children:(0,r.jsx)(s.code,{children:"/users?version=1.0"})}),(0,r.jsx)("td",{children:"Optional versioning"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Header"})}),(0,r.jsx)("td",{children:"Version information is included in the headers of the HTTP request"}),(0,r.jsx)("td",{children:"Caching with headers can be complex as most caches are URL-based"}),(0,r.jsx)("td",{children:"Compatibility depends on how well clients handle headers. Some may not support custom headers or may behave unpredictably"}),(0,r.jsx)("td",{children:(0,r.jsx)(s.code,{children:"Version: 1.0"})}),(0,r.jsx)("td",{children:"Versioning information should not affect caching or URI structure"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Media Type"})}),(0,r.jsx)("td",{children:"Version information is included in the media type"}),(0,r.jsx)("td",{children:"Caching is possible but may require additional configuration, as the URLs are same but media types differ"}),(0,r.jsx)("td",{children:"Compatibility is generally high, but older clients that don't support media type versioning could face issues"}),(0,r.jsx)("td",{children:(0,r.jsx)(s.code,{children:"application/company.resource.v1+json"})}),(0,r.jsx)("td",{children:"When backward-incompatible changes need to be communicated at the content type level"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Body"})}),(0,r.jsx)("td",{children:"Version information is included in the request body"}),(0,r.jsx)("td",{children:"Body-based versioning is typically not cache-friendly as it is difficult to segregate based on body content"}),(0,r.jsx)("td",{children:"Compatibility could be an issue, as it depends on clients sending correct data in the body"}),(0,r.jsx)("td",{children:(0,r.jsx)(s.code,{children:'{ "version": "1.0" }'})}),(0,r.jsx)("td",{children:"Unifies microservice communication (REST, async messaging, Protocol Buffers)"})]})]})]})}),(0,r.jsxs)(d.A,{value:"rest-api-resource-naming-convention",label:"Resource Naming Convention",children:[(0,r.jsx)(s.h3,{id:"url",children:"URL"}),(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"URL Path and URL Query Parameters"}),": Consider using hyphens (",(0,r.jsx)(s.code,{children:"-"}),") to separate words in your URLs, as it helps users and search engines identify concepts in the URL more easily","\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:(0,r.jsx)(s.code,{children:"/users/very-long-path?long-text=123"})}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"camelCase"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:(0,r.jsx)(s.code,{children:"/users/veryLongPath?longText=123"})}),"\n"]}),"\n"]}),"\n"]}),(0,r.jsx)(s.h3,{id:"nouns-vs-verbs",children:"Nouns vs Verbs"}),(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["Verbs should not be used in endpoint paths. Instead, the pathname should contain the nouns that identify the object that the endpoint that we are accessing or altering belongs to.","\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["Instead of using ",(0,r.jsx)(s.code,{children:"/getAllClients"})," to fetch all clients, use ",(0,r.jsx)(s.code,{children:"/clients"})]}),"\n"]}),"\n"]}),"\n"]}),(0,r.jsx)(s.h3,{id:"singular-vs-plural",children:"Singular vs Plural"}),(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["Stick to one convention because it depends on your domain","\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["as an example","\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"shopping cart"})," in e-commerce website is ",(0,r.jsx)(s.strong,{children:"1-to-1"})," relationship between client and a shopping cart. Therefore, it's confusing to have ",(0,r.jsx)(s.code,{children:"/carts"})]}),"\n",(0,r.jsxs)(s.li,{children:["on the other hand, we can have a ",(0,r.jsx)(s.strong,{children:"blog"})," with ",(0,r.jsx)(s.strong,{children:"articles"})," which makes more sense to have ",(0,r.jsx)(s.code,{children:"/articles"})," endpoint"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),(0,r.jsx)(s.h3,{id:"utilize-resource-nesting-efficiency",children:"Utilize Resource Nesting Efficiency"}),(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["If resource have a ",(0,r.jsx)(s.strong,{children:"has-a"})," relationship to another resource it's good to use ",(0,r.jsx)(s.strong,{children:"nesting"})," while implementing REST API Contracts","\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["Example: user can have some orders in e-commerce website","\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"user's orders"}),": ",(0,r.jsx)(s.code,{children:"/users/1/orders/"})]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"user's order"}),": ",(0,r.jsx)(s.code,{children:"/users/1/orders/1"})]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]})]}),(0,r.jsxs)(d.A,{value:"rest-api-rest-verbs",label:"REST Verbs",children:[(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"HEAD"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"identical to GET, except without the response body. It will do the same GET request but won't return anything"}),"\n",(0,r.jsx)(s.li,{children:"useful for checking what a GET request will return before actually making a GET request (download large file or response body)"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"OPTIONS"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"return data describing what other methods and operations the server supports at the given URL"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"PATCH"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"applied partial modification to the resource (send only username in the body) as opposed to POST which require the full user entity"}),"\n"]}),"\n"]}),"\n"]}),(0,r.jsxs)("table",{children:[(0,r.jsx)("thead",{children:(0,r.jsxs)("tr",{children:[(0,r.jsx)("th",{children:"Resource"}),(0,r.jsx)("th",{children:"GET (read)"}),(0,r.jsx)("th",{children:"POST (create)"}),(0,r.jsx)("th",{children:"PUT (update)"}),(0,r.jsx)("th",{children:"PATCH (partial update)"}),(0,r.jsx)("th",{children:"DELETE (delete)"}),(0,r.jsx)("th",{children:"OPTIONS"}),(0,r.jsx)("th",{children:"HEAD"})]})}),(0,r.jsxs)("tbody",{children:[(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("code",{children:"/users"})}),(0,r.jsx)("td",{children:"returns all users"}),(0,r.jsx)("td",{children:"creates a new user"}),(0,r.jsx)("td",{children:"bulk update of users"}),(0,r.jsx)("td",{children:"partial update of all users"}),(0,r.jsx)("td",{children:"delete all users"}),(0,r.jsx)("td",{rowspan:"2",children:"returns HTTP methods"}),(0,r.jsx)("td",{rowspan:"2",children:"returns HTTP headers"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("code",{children:"/users/1"})}),(0,r.jsx)("td",{children:"returns a specific use"}),(0,r.jsx)("td",{children:"method not allowed (405)"}),(0,r.jsx)("td",{children:"updates a specific user"}),(0,r.jsx)("td",{children:"partial update of a specific user"}),(0,r.jsx)("td",{children:"deletes a specific user"})]})]})]})]}),(0,r.jsxs)(d.A,{value:"rest-api-http-status-codes",label:"HTTP Status Codes",children:[(0,r.jsx)(s.h3,{id:"http-status-codes",children:"HTTP Status Codes"}),(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"1xx"}),": Information"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"2xx"}),": Success"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"3xx"}),": Redirection"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"4xx"}),": Client Error"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"5xx"}),": Server Error"]}),"\n"]}),(0,r.jsxs)("table",{children:[(0,r.jsx)("thead",{children:(0,r.jsxs)("tr",{children:[(0,r.jsx)("th",{children:"HTTP Code"}),(0,r.jsx)("th",{children:"HTTP Status"}),(0,r.jsx)("th",{children:"Use Cases"})]})}),(0,r.jsxs)("tbody",{children:[(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"200"}),(0,r.jsx)("td",{children:"OK"}),(0,r.jsx)("td",{children:"Request succeeded (REST call)"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"201"}),(0,r.jsx)("td",{children:"CREATED"}),(0,r.jsx)("td",{children:"Request succeeded and resource created (short async call)"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"202"}),(0,r.jsx)("td",{children:"ACCEPTED"}),(0,r.jsx)("td",{children:"Request has been accepted for processing (long async call)"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"301"}),(0,r.jsx)("td",{children:"MOVED PERMANENTLY"}),(0,r.jsx)("td",{children:"Resource was moved to a new place permanently"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"400"}),(0,r.jsx)("td",{children:"BAD REQUEST"}),(0,r.jsx)("td",{children:"REST API client's invalid input. Provide only client's oriented message"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"401"}),(0,r.jsx)("td",{children:"UNAUTHORIZED"}),(0,r.jsx)("td",{children:"Client is not authenticated"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"403"}),(0,r.jsx)("td",{children:"FORBIDDEN"}),(0,r.jsx)("td",{children:"Client is not authorised to access resource"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"404"}),(0,r.jsx)("td",{children:"NOT FOUND"}),(0,r.jsx)("td",{children:"Requested resource is not found"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"500"}),(0,r.jsx)("td",{children:"INTERNAL SERVER ERROR"}),(0,r.jsx)("td",{children:"Any unexpected error. Do not provide any information to a client instead log it"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"503"}),(0,r.jsx)("td",{children:"SERVICE UNAVAILABLE"}),(0,r.jsx)("td",{children:"Do not provide any information to a client instead log it"})]})]})]})]}),(0,r.jsx)(d.A,{value:"rest-api-error-handling",label:"Error Handling",children:(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsx)(s.p,{children:"Do not expose any sensitive information"}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:["Wrap any API calls and return only predefined messages for ",(0,r.jsx)(s.code,{children:"4xx"}),", ",(0,r.jsx)(s.code,{children:"5xx"})]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsx)(s.p,{children:"Implement global Exception and provide Default Response Entity"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"HTTP Code 400: Provide only client's oriented message"}),"\n",(0,r.jsx)(s.li,{children:"HTTP Code 500: Log the error and provide generic message"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsx)(s.p,{children:"Standardize response body"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-json",children:'{\n    "timestamp":"2000-01-15T22:00:00.000+0000",\n    "status":500,\n    "error":"Internal Server Error",\n    "message":"Error while processing request",\n    "path":"/api/user/1"\n}\n'})}),"\n"]}),"\n"]})}),(0,r.jsx)(d.A,{value:"rest-api-data-filtering",label:"Data Filtering",children:(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["use URL params","\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"filter"}),": ",(0,r.jsx)(s.code,{children:"GET /users?country=US&city=NY"})]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"sorting"}),": ",(0,r.jsx)(s.code,{children:"GET /users?sort=name:asc"})]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"paging"}),":","\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"offset/limit"}),": ",(0,r.jsx)(s.code,{children:"GET /users?offset=3&limit=120"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["slower solution because it process ",(0,r.jsx)(s.strong,{children:"x"})," rows and then return ",(0,r.jsx)(s.strong,{children:"y"})," rows"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"OFFSET 90000 LIMIT 10"}),": read 90010 rows and then return only 10 rows"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"cursor/token"}),": ",(0,r.jsx)(s.code,{children:"GET /users?cursor=12345"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"more efficient solution especially for large datasets"}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"token"}),": any column or property that is used to pivot through the data in the table. Most common is ",(0,r.jsx)(s.code,{children:"created_at"})," column"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:'WHERE created_at >= "2024-01-01" LIMIT 10'}),": filter through the table and read only 10 required rows"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"page token"}),": ",(0,r.jsx)(s.code,{children:"GET /users?page={base64String}"}),": Base64 encoded string can be represented as a string or JSON object for more advanced use cases"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]})}),(0,r.jsx)(d.A,{value:"rest-api-security",label:"Security",children:(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"Use SSL/TLS for secure communication"}),"\n",(0,r.jsxs)(s.li,{children:["Add secured short-lived headers","\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"JWT Token"}),": ",(0,r.jsx)(s.code,{children:"Authorization: Bearer <token>"})]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"CORS"}),": ",(0,r.jsx)(s.code,{children:"Access-Control-Allow-Origin: your.domain.com"})]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(s.li,{children:"Root Certificate"}),"\n",(0,r.jsxs)(s.li,{children:["Rate Limiting","\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["Design rate limiting rules based on ",(0,r.jsx)(s.strong,{children:"user"}),", ",(0,r.jsx)(s.strong,{children:"IP"}),", ",(0,r.jsx)(s.strong,{children:"action group"}),", etc."]}),"\n"]}),"\n"]}),"\n"]})}),(0,r.jsx)(d.A,{value:"rest-api-traceability",label:"Traceability",children:(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Traceability headers"}),": ",(0,r.jsx)(s.code,{children:"X-Request-Id: 888"}),", ",(0,r.jsx)(s.code,{children:"X-Trace: 888"}),", or custom header"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Async Logging"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"send logs to a lock-free ring buffer and return"}),"\n",(0,r.jsx)(s.li,{children:"flush to the disk periodically"}),"\n",(0,r.jsx)(s.li,{children:"higher throughput and lower latency"}),"\n"]}),"\n"]}),"\n"]})}),(0,r.jsxs)(d.A,{value:"rest-api-performance",label:"Performance",children:[(0,r.jsx)(s.h3,{id:"caching",children:"Caching"}),(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"store frequently accessed data in the cache instead of database"}),"\n",(0,r.jsx)(s.li,{children:"query database when there is a cache miss"}),"\n"]}),(0,r.jsx)(s.h3,{id:"payload-compression",children:"Payload Compression"}),(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"use gzip"}),"\n",(0,r.jsx)(s.li,{children:"reduce the data size to speed up the download/upload"}),"\n"]}),(0,r.jsx)(s.h3,{id:"connection-pool",children:"Connection Pool"}),(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"opening and closing DB connections add significant overhead"}),"\n",(0,r.jsx)(s.li,{children:"connection pool maintains a number of open connections for applications to reuse"}),"\n"]}),(0,r.jsx)(s.h3,{id:"batching",children:"Batching"}),(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"useful when you need to send multiple requests to the same resource to reduce the number of round trips"}),"\n"]})]}),(0,r.jsxs)(d.A,{value:"rest-api",label:"Request Payload",children:[(0,r.jsx)(s.p,{children:"This pattern is well-suited for any messaging protocols and data formats. Including but not limited to REST, Pub-Sub"}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-json",children:'{\n    "specversion" : "1.0",\n    "type" : "com.github.pull_request.closed",\n    "source" : "https://github.com/spec/pull",\n    "subject" : "123",\n    "id" : "5f9eab6f-3d1f-4d0f-bd6d-9a8c6c8c6c6c",\n    "time" : "2020-01-15T22:00:00Z",\n    "datacontenttype" : "application/json",\n    "data" : "{ "user": { "id": 1, "name": "John" } }"\n}\n'})}),(0,r.jsxs)("table",{children:[(0,r.jsx)("thead",{children:(0,r.jsxs)("tr",{children:[(0,r.jsx)("th",{children:"Attribute"}),(0,r.jsx)("th",{children:"Description"}),(0,r.jsx)("th",{children:"Constraints"}),(0,r.jsx)("th",{children:"Examples"})]})}),(0,r.jsxs)("tbody",{children:[(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"id"})}),(0,r.jsx)("td",{children:"Producers must ensure each event has a unique source and ID. If a duplicate event is resent (e.g., due to a network error), it may have the same ID. Consumers may assume events with identical source and ID are duplicates"}),(0,r.jsx)("td",{children:(0,r.jsxs)("ul",{children:[(0,r.jsx)("li",{children:"REQUIRED"}),(0,r.jsx)("li",{children:"MUST be a non-empty string"}),(0,r.jsx)("li",{children:"MUST be unique within the scope of the producer"})]})}),(0,r.jsx)("td",{children:(0,r.jsxs)("ul",{children:[(0,r.jsx)("li",{children:"Event counter maintained by the producer"}),(0,r.jsx)("li",{children:"UUID"}),(0,r.jsx)("li",{children:"Complex ID"}),(0,r.jsx)("li",{children:(0,r.jsx)(s.code,{children:"d9b280c3-890d-4a09-a518-8b3a2080d0d7"})})]})})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"source"})}),(0,r.jsx)("td",{children:"Event details include source type, publisher, and creation process. The source URI format is defined by the creator. Each event needs a unique source + ID combo, managed by producers. Applications can assign unique sources for easier ID creation. Source identifiers can be UUIDs, URNs, DNS or custom schemes. A source can have multiple producers, requiring collaboration on unique ID creation"}),(0,r.jsx)("td",{children:(0,r.jsxs)("ul",{children:[(0,r.jsx)("li",{children:"REQUIRED"}),(0,r.jsx)("li",{children:"MUST be a non-empty URI-reference"}),(0,r.jsx)("li",{children:"An absolute URI is RECOMMENDED"})]})}),(0,r.jsx)("td",{children:(0,r.jsxs)("ul",{children:[(0,r.jsx)("li",{children:"Internet-wide unique URI with a DNS authority"}),(0,r.jsx)("li",{children:"Universally-unique URN with a UUID"}),(0,r.jsx)("li",{children:"Application-specific identifiers"}),(0,r.jsx)("li",{children:(0,r.jsx)(s.code,{children:"https://github.com/spec/pull"})})]})})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"specversion"})}),(0,r.jsx)("td",{children:"Attribute includes only major and minor version numbers, allowing for patch changes without altering this property's value. Note: A suffix might be added for testing purposes during release candidate releases"}),(0,r.jsx)("td",{children:(0,r.jsxs)("ul",{children:[(0,r.jsx)("li",{children:"REQUIRED"}),(0,r.jsx)("li",{children:"MUST be a non-empty string"})]})}),(0,r.jsx)("td",{children:(0,r.jsxs)("ul",{children:[(0,r.jsx)("li",{children:(0,r.jsx)(s.code,{children:"1.0"})}),(0,r.jsx)("li",{children:(0,r.jsx)(s.code,{children:"1.1"})})]})})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"type"})}),(0,r.jsx)("td",{children:"Describes the type of event associated with the originating occurrence. It's commonly used for routing, observability, and policy enforcement. The format is defined by the producer and may include details such as the type version"}),(0,r.jsx)("td",{children:(0,r.jsxs)("ul",{children:[(0,r.jsx)("li",{children:"REQUIRED"}),(0,r.jsx)("li",{children:"MUST be a non-empty string"}),(0,r.jsx)("li",{children:"SHOULD be prefixed with a reverse-DNS name. The prefixed domain dictates the organization which defines the semantics of this event type"})]})}),(0,r.jsx)("td",{children:(0,r.jsxs)("ul",{children:[(0,r.jsx)("li",{children:(0,r.jsx)(s.code,{children:"com.github.pull_request.closed"})}),(0,r.jsx)("li",{children:(0,r.jsx)(s.code,{children:"com.example.object.created.v2"})})]})})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"datacontenttype"})}),(0,r.jsx)("td",{children:"Allows data to carry various content types, independent of the event format. It informs consumers about the content's format and encoding"}),(0,r.jsx)("td",{children:(0,r.jsxs)("ul",{children:[(0,r.jsx)("li",{children:"OPTIONAL"}),(0,r.jsx)("li",{children:"String"})]})}),(0,r.jsx)("td",{children:(0,r.jsxs)("ul",{children:[(0,r.jsx)("li",{children:(0,r.jsx)(s.code,{children:"application/xml"})}),(0,r.jsx)("li",{children:(0,r.jsx)(s.code,{children:"application/json"})})]})})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"dataschema"})}),(0,r.jsx)("td",{children:"Identifies the schema that data adheres to. Incompatible changes to the schema SHOULD be reflected by a different URI"}),(0,r.jsx)("td",{children:(0,r.jsxs)("ul",{children:[(0,r.jsx)("li",{children:"OPTIONAL"}),(0,r.jsx)("li",{children:"URI"})]})}),(0,r.jsx)("td",{children:(0,r.jsx)("ul",{children:(0,r.jsx)("li",{children:(0,r.jsx)(s.code,{children:"http://registry.com/schema/v1/api.json"})})})})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"subject"})}),(0,r.jsx)("td",{children:"Event-driven systems use event subjects to filter relevant events for subscribers, especially when dealing with limited middleware. Subscribers can specify filters based on the subject, like file extensions (.jpg, .jpeg) or blob names within a container. The subject essentially allows targeted filtering"}),(0,r.jsx)("td",{children:(0,r.jsxs)("ul",{children:[(0,r.jsx)("li",{children:"OPTIONAL"}),(0,r.jsx)("li",{children:"String"})]})}),(0,r.jsx)("td",{children:(0,r.jsx)("ul",{children:(0,r.jsx)("li",{children:(0,r.jsx)(s.code,{children:"file.jpg"})})})})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"time"})}),(0,r.jsx)("td",{children:"Timestamp of the event occurrence"}),(0,r.jsx)("td",{children:(0,r.jsxs)("ul",{children:[(0,r.jsx)("li",{children:"OPTIONAL"}),(0,r.jsx)("li",{children:"Timestamp"}),(0,r.jsx)("li",{children:"RFC 3339"})]})}),(0,r.jsx)("td",{children:(0,r.jsx)("ul",{children:(0,r.jsx)("li",{children:(0,r.jsx)(s.code,{children:"2020-01-15T22:00:00Z"})})})})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"data"})}),(0,r.jsx)("td",{children:"Content that is associated with the event"}),(0,r.jsx)("td",{children:(0,r.jsxs)("ul",{children:[(0,r.jsx)("li",{children:"OPTIONAL"}),(0,r.jsxs)("li",{children:["Based on the ",(0,r.jsx)(s.code,{children:"datacontenttype"})]})]})}),(0,r.jsx)("td",{children:(0,r.jsx)("ul",{children:(0,r.jsx)("li",{children:(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-json",children:'{\n  "user": {\n    "id": 1,\n    "name": "John",\n    "age": 20\n  }\n}\n'})})})})})]})]})]})]}),(0,r.jsx)(d.A,{value:"rest-api-response-entity",label:"Response Entity",children:(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"Don't return plain text responses"}),"\n",(0,r.jsx)(s.li,{children:"In most cases REST APIs should accept JSON for request payload and also respond with JSON because it is a standard for transferring data"}),"\n"]})})]})})]})]})}function j(e={}){const{wrapper:s}={...(0,t.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(x,{...e})}):x(e)}}}]);