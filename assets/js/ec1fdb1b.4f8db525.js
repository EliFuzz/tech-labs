"use strict";(self.webpackChunkclassic=self.webpackChunkclassic||[]).push([[3409],{68730:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>o,contentTitle:()=>a,default:()=>j,frontMatter:()=>c,metadata:()=>s,toc:()=>h});const s=JSON.parse('{"id":"education/software-development/git","title":"Git","description":"Git Overview","source":"@site/docs/education/03-software-development/10-git.mdx","sourceDirName":"education/03-software-development","slug":"/education/software-development/git","permalink":"/tech-labs/docs/education/software-development/git","draft":false,"unlisted":false,"editUrl":"https://github.com/EliFuzz/tech-labs/docs/education/03-software-development/10-git.mdx","tags":[],"version":"current","sidebarPosition":10,"frontMatter":{"title":"Git","description":"Git Overview","hide_table_of_contents":true},"sidebar":"education","previous":{"title":"Cache","permalink":"/tech-labs/docs/education/software-development/cache"},"next":{"title":"Licenses","permalink":"/tech-labs/docs/education/software-development/license"}}');var r=n(86070),l=n(15658),t=n(52421),d=n(74610);const c={title:"Git",description:"Git Overview",hide_table_of_contents:!0},a=void 0,o={},h=[{value:"Benefits",id:"benefits",level:3},{value:"Best Practices",id:"best-practices",level:3}];function x(e){const i={code:"code",h3:"h3",img:"img",li:"li",mermaid:"mermaid",ul:"ul",...(0,l.R)(),...e.components};return(0,r.jsxs)(t.A,{queryString:"primary",children:[(0,r.jsx)(d.A,{value:"inner-workflow",label:"Inner Workflow",children:(0,r.jsxs)("table",{children:[(0,r.jsx)("thead",{children:(0,r.jsxs)("tr",{children:[(0,r.jsx)("th",{style:{width:"50%",width:"650px"},children:"Git"}),(0,r.jsx)("th",{style:{width:"50%",width:"650px"},children:"Git Commands"})]})}),(0,r.jsx)("tbody",{children:(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)(i.mermaid,{value:"  graph TB\n\n  subgraph Local1 [Local]\n    direction BT\n\n    localRepo1[(Local Repository)]\n    stagingArea1[[Staging Area]]\n    workingDir1{{Working Directory}}\n    developer1(Developer)\n\n    developer1 --\x3e |edit| workingDir1\n    workingDir1 --\x3e |git add| stagingArea1\n    stagingArea1 --\x3e |git commit| localRepo1\n  end\n\n  subgraph Local2 [Local]\n    direction BT\n\n    localRepo2[(Local Repository)]\n    stagingArea2[[Staging Area]]\n    workingDir2{{Working Directory}}\n    developer2(Developer)\n\n    developer2 --\x3e |edit| workingDir2\n    workingDir2 --\x3e |git add| stagingArea2\n    stagingArea2 --\x3e |git commit| localRepo2\n  end\n\n  subgraph Remote\n    direction TB\n\n    remote[(Remote Repository)]\n  end\n\n  Local1 --\x3e |git push| Remote\n  Remote --\x3e |git fetch| Local1\n\n  Local2 --\x3e |git push| Remote\n  Remote --\x3e |git fetch| Local2"})}),(0,r.jsx)("td",{children:(0,r.jsx)(i.mermaid,{value:"  sequenceDiagram\n\n  participant Working Directory\n  participant Staging Area\n  participant Local Repository\n  participant Remote Repository\n\n  alt Push to Remote\n    Working Directory->>Staging Area: git add\n    Staging Area->>Local Repository: git commit\n    Local Repository->>Remote Repository: git push\n  end\n\n  alt Merge\n    Remote Repository->>Local Repository: git fetch\n    Local Repository->>Working Directory: git merge\n  end\n\n  alt Pull\n    Remote Repository->>Working Directory: git pull\n  end\n\n  alt Checkout\n    Remote Repository->>Local Repository: git clone\n    Local Repository->>Working Directory: git checkout\n  end"})})]})})]})}),(0,r.jsxs)(d.A,{value:"ci-cd",label:"CI/CD",children:[(0,r.jsx)(i.mermaid,{value:"  graph LR\n\n  subgraph agile[Agile Development]\n    direction LR\n\n   plan(Plan) --\x3e code(Code) --\x3e build(Build)\n  end\n\n  subgraph integration[Continuous Integration]\n    direction LR\n\n    integrate(Integrate) --\x3e test(Test)\n  end\n\n  subgraph delivery[Continuous Delivery]\n    direction LR\n\n    release(Release)\n  end\n\n  subgraph deployment[Continuous Deployment]\n    direction LR\n\n    deploy(Deploy)\n  end\n\n  agile --\x3e integration --\x3e delivery --\x3e deployment"}),(0,r.jsx)(i.h3,{id:"benefits",children:"Benefits"}),(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsx)(i.li,{children:"Higher efficiency"}),"\n",(0,r.jsx)(i.li,{children:"Reduced risk of defects"}),"\n",(0,r.jsx)(i.li,{children:"Faster product delivery"}),"\n",(0,r.jsx)(i.li,{children:"Log generation"}),"\n",(0,r.jsx)(i.li,{children:"Rollback"}),"\n"]})]}),(0,r.jsxs)(d.A,{value:"git-branching-strategies",label:"Branching Strategies",children:[(0,r.jsxs)("table",{class:"text_vertical",children:[(0,r.jsx)("thead",{children:(0,r.jsxs)("tr",{children:[(0,r.jsx)("th",{children:"Strategy"}),(0,r.jsx)("th",{style:{minWidth:"350px"},children:"Visualization"}),(0,r.jsx)("th",{children:"Definition"}),(0,r.jsx)("th",{children:"Branches"}),(0,r.jsx)("th",{children:"Pros"}),(0,r.jsx)("th",{children:"Cons"}),(0,r.jsx)("th",{children:"Use Cases"})]})}),(0,r.jsxs)("tbody",{children:[(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Git Flow"})}),(0,r.jsx)("td",{children:(0,r.jsx)(i.img,{src:n(70640).A+"",width:"1639",height:"547"})}),(0,r.jsxs)("td",{children:["Complex branching strategy for parallel development. Developers create ",(0,r.jsx)(i.code,{children:"feature"})," branches from a ",(0,r.jsx)(i.code,{children:"develop"})," branch, then merge them back for ",(0,r.jsx)(i.code,{children:"release"}),". It uses multiple branch types: ",(0,r.jsx)(i.code,{children:"master"}),", ",(0,r.jsx)(i.code,{children:"develop"}),", ",(0,r.jsx)(i.code,{children:"feature"}),", ",(0,r.jsx)(i.code,{children:"release"}),", and ",(0,r.jsx)(i.code,{children:"hotfix"}),". ",(0,r.jsx)(i.code,{children:"Master"})," and ",(0,r.jsx)(i.code,{children:"develop"})," are long-lived, while others are short-lived and for supporting development"]}),(0,r.jsx)("td",{children:(0,r.jsxs)("ul",{children:[(0,r.jsxs)("li",{children:[(0,r.jsx)("b",{children:"master"}),": Stable production code"]}),(0,r.jsxs)("li",{children:[(0,r.jsx)("b",{children:"develop"}),": Ongoing development"]}),(0,r.jsxs)("li",{children:[(0,r.jsx)("b",{children:"feature"}),": New features (short-lived)"]}),(0,r.jsxs)("li",{children:[(0,r.jsx)("b",{children:"release"}),": Preparing for release (from develop)"]}),(0,r.jsxs)("li",{children:[(0,r.jsx)("b",{children:"hotfix"}),": Urgent bug fixes (from master)"]})]})}),(0,r.jsx)("td",{children:(0,r.jsxs)("ul",{children:[(0,r.jsxs)("li",{children:["Stable releases: separate ",(0,r.jsx)(i.code,{children:"dev"})," branches protect ",(0,r.jsx)(i.code,{children:"main"})," branch"]}),(0,r.jsx)("li",{children:"Organized work: clear branch types for specific tasks"}),(0,r.jsx)("li",{children:"Manages multiple versions"})]})}),(0,r.jsx)("td",{children:(0,r.jsxs)("ul",{children:[(0,r.jsx)("li",{children:"Complex merging: multiple branches to manage"}),(0,r.jsx)("li",{children:"Debugging difficulty: many commits make finding issues hard"}),(0,r.jsx)("li",{children:"Slower development: complexity slows down process"})]})}),(0,r.jsx)("td",{children:"Large teams, complex projects"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"GitHub Flow"})}),(0,r.jsx)("td",{children:(0,r.jsx)(i.img,{src:n(49453).A+"",width:"563",height:"199"})}),(0,r.jsxs)("td",{children:["No ",(0,r.jsx)(i.code,{children:"release"})," branches. Developers work on ",(0,r.jsx)(i.code,{children:"feature"})," branches from ",(0,r.jsx)(i.code,{children:"main"}),", then merge back and delete the branch. ",(0,r.jsx)(i.code,{children:"Main"})," branch stays deployable"]}),(0,r.jsx)("td",{children:(0,r.jsxs)("ul",{children:[(0,r.jsxs)("li",{children:[(0,r.jsx)("b",{children:"main"}),": Production-ready code"]}),(0,r.jsxs)("li",{children:[(0,r.jsx)("b",{children:"feature"}),": New features and bug fixes (short-lived)"]})]})}),(0,r.jsx)("td",{children:(0,r.jsxs)("ul",{children:[(0,r.jsx)("li",{children:"Fast, streamlined: Agile principles, short cycles, frequent releases"}),(0,r.jsx)("li",{children:"Faster feedback: quick identification and resolution of issues"}),(0,r.jsx)("li",{children:"Efficient deploys: single branch for testing/automation"})]})}),(0,r.jsx)("td",{children:(0,r.jsxs)("ul",{children:[(0,r.jsx)("li",{children:"No multiple versions"}),(0,r.jsxs)("li",{children:["Unstable code risk: no ",(0,r.jsx)(i.code,{children:"dev"})," branch, requires thorough testing"]}),(0,r.jsx)("li",{children:"Merge conflicts: for larger teams & transparency issues"})]})}),(0,r.jsx)("td",{children:"Small teams, rapid development"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"GitLab Flow"})}),(0,r.jsx)("td",{children:(0,r.jsx)(i.img,{src:n(10741).A+"",width:"413",height:"207"})}),(0,r.jsxs)("td",{children:["Simplifies branching with direct ",(0,r.jsx)(i.code,{children:"main"})," branch use. Great in multi-environment development, isolating versions and prioritizing stability with internal testing before production deployments"]}),(0,r.jsx)("td",{children:(0,r.jsxs)("ul",{children:[(0,r.jsxs)("li",{children:[(0,r.jsx)("b",{children:"master"}),": Production-ready code"]}),(0,r.jsxs)("li",{children:[(0,r.jsx)("b",{children:"environments"}),": staging / testing/ pre-production / production"]}),(0,r.jsxs)("li",{children:[(0,r.jsx)("b",{children:"feature"}),": New features and bug fixes (short-lived)"]})]})}),(0,r.jsx)("td",{children:(0,r.jsx)("ul",{children:(0,r.jsx)("li",{children:"Good balance between simplicity and release management"})})}),(0,r.jsx)("td",{children:(0,r.jsx)("ul",{children:(0,r.jsx)("li",{children:"Requires strong emphasis on CI/CD practices"})})}),(0,r.jsx)("td",{children:"Small teams, rapid development"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Trunked Based"})}),(0,r.jsx)("td",{children:(0,r.jsx)(i.img,{src:n(86608).A+"",width:"563",height:"211"})}),(0,r.jsxs)("td",{children:["Developers commit directly to a shared, always-releasable ",(0,r.jsx)(i.code,{children:"trunk"})," multiple times a day. This fosters CI/CD by enabling frequent integration and faster releases. ",(0,r.jsx)("b",{children:"Feature flags"})," help by decoupling deployment from release, keeping unfinished features hidden while complete ones are released quickly"]}),(0,r.jsx)("td",{children:(0,r.jsxs)("ul",{children:[(0,r.jsxs)("li",{children:[(0,r.jsx)("b",{children:"trunk"}),": Single branch for all development"]}),(0,r.jsxs)("li",{children:[(0,r.jsx)("b",{children:"feature"}),": New features and bug fixes (short-lived)"]})]})}),(0,r.jsx)("td",{children:(0,r.jsxs)("ul",{children:[(0,r.jsx)("li",{children:"Enables CI with frequent trunk updates"}),(0,r.jsx)("li",{children:"Improves collaboration with direct trunk commits (better visibility)"}),(0,r.jsx)("li",{children:"Reduces merge conflicts with frequent small pushes"}),(0,r.jsx)("li",{children:"Faster releases with constantly releasable trunk"})]})}),(0,r.jsx)("td",{children:(0,r.jsx)("ul",{children:(0,r.jsx)("li",{children:"Requires experienced devs for shared trunk management"})})}),(0,r.jsx)("td",{children:"Continuous delivery pipelines"})]})]})]}),(0,r.jsx)(i.h3,{id:"best-practices",children:"Best Practices"}),(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:["Keep branch strategy simple","\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:["Use feature branches for your work: Use ",(0,r.jsx)(i.code,{children:"feature"})," branches for all new features and bug fixes"]}),"\n",(0,r.jsxs)(i.li,{children:["Name your feature branches by convention","\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsx)(i.li,{children:(0,r.jsx)(i.code,{children:"users/username/work-item"})}),"\n",(0,r.jsx)(i.li,{children:(0,r.jsx)(i.code,{children:"bugfix/work-item"})}),"\n",(0,r.jsx)(i.li,{children:(0,r.jsx)(i.code,{children:"feature/feature-name"})}),"\n",(0,r.jsx)(i.li,{children:(0,r.jsx)(i.code,{children:"feature/feature-area/feature-name"})}),"\n",(0,r.jsx)(i.li,{children:(0,r.jsx)(i.code,{children:"hotfix/description"})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(i.li,{children:"Use feature flags to manage long-running branches"}),"\n",(0,r.jsxs)(i.li,{children:["Merge ",(0,r.jsx)(i.code,{children:"feature"})," branches into the ",(0,r.jsx)(i.code,{children:"main"})," branch using pull requests"]}),"\n",(0,r.jsxs)(i.li,{children:["Keep a high quality, up-to-date ",(0,r.jsx)(i.code,{children:"main"})," branch"]}),"\n",(0,r.jsxs)(i.li,{children:["Manage releases","\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsx)(i.li,{children:"Use release branches & omit using tags for releases: Tags for releases add complexity. They require extra steps and can be missed, causing issues for developers. Release branches offer a simpler workflow"}),"\n",(0,r.jsx)(i.li,{children:"Port changes back to the main branch"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]})]}),(0,r.jsx)(d.A,{value:"git-workflow",label:"Git Workflow",children:(0,r.jsxs)("table",{children:[(0,r.jsx)("thead",{children:(0,r.jsxs)("tr",{children:[(0,r.jsx)("th",{children:"Workflow"}),(0,r.jsx)("th",{style:{minWidth:"350px"},children:"Visualization"}),(0,r.jsx)("th",{children:"Definition"}),(0,r.jsx)("th",{children:"Impact on History"}),(0,r.jsx)("th",{children:"Use Cases"})]})}),(0,r.jsxs)("tbody",{children:[(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Merge"})}),(0,r.jsx)("td",{children:(0,r.jsx)(i.img,{src:n(86180).A+"",width:"433",height:"117"})}),(0,r.jsx)("td",{children:"Combines changes from one branch into another"}),(0,r.jsx)("td",{children:"Preserves the commit history of both branches"}),(0,r.jsx)("td",{children:"Integrating changes from feature branches"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Rebase"})}),(0,r.jsx)("td",{children:(0,r.jsx)(i.img,{src:n(35196).A+"",width:"558",height:"124"})}),(0,r.jsx)("td",{children:"Transfers commits from one branch to another, maintaining a linear history"}),(0,r.jsx)("td",{children:"Rewrites the commit history, making it linear and removes original branch's existence"}),(0,r.jsx)("td",{children:"Preferred for creating a clean and linear history, often used for feature branches before merging"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Squash"})}),(0,r.jsx)("td",{children:(0,r.jsx)(i.img,{src:n(17907).A+"",width:"433",height:"117"})}),(0,r.jsx)("td",{children:"Condenses multiple commits into a single commit"}),(0,r.jsx)("td",{children:"Creates a new commit with a concise history"}),(0,r.jsx)("td",{children:"For cleaning up history before merging into the main branch, especially for pull requests"})]})]})]})}),(0,r.jsx)(d.A,{value:"roles-responsibilities",label:"Roles & Responsibilities",children:(0,r.jsxs)("table",{children:[(0,r.jsx)("thead",{children:(0,r.jsxs)("tr",{children:[(0,r.jsx)("th",{children:"Role"}),(0,r.jsx)("th",{style:{minWidth:"350px"},children:"Visualization"}),(0,r.jsx)("th",{children:"Focus"}),(0,r.jsx)("th",{children:"Goals"}),(0,r.jsx)("th",{children:"Responsibilities"}),(0,r.jsx)("th",{children:"Key Metrics"}),(0,r.jsx)("th",{children:"Challenges"})]})}),(0,r.jsxs)("tbody",{children:[(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"DevOps"})}),(0,r.jsx)("td",{children:(0,r.jsx)(i.img,{src:n(32778).A+"",width:"628",height:"209"})}),(0,r.jsx)("td",{children:"Collaboration & Automation of Dev & Ops"}),(0,r.jsx)("td",{children:(0,r.jsxs)("ul",{children:[(0,r.jsx)("li",{children:"Faster software delivery"}),(0,r.jsx)("li",{children:"Improved communication & collaboration"}),(0,r.jsx)("li",{children:"Reduced silos between Dev & Ops"})]})}),(0,r.jsx)("td",{children:(0,r.jsxs)("ul",{children:[(0,r.jsx)("li",{children:"Automating infrastructure provisioning and configuration"}),(0,r.jsx)("li",{children:"Managing deployment pipelines"}),(0,r.jsx)("li",{children:"Monitoring system performance"}),(0,r.jsx)("li",{children:"Facilitating collaboration between development and operations teams"})]})}),(0,r.jsx)("td",{children:(0,r.jsxs)("ul",{children:[(0,r.jsx)("li",{children:"Mean Time to Deploy (MTTD)"}),(0,r.jsx)("li",{children:"Mean Time to Recovery (MTTR)"}),(0,r.jsx)("li",{children:"Change Failure Rate (CFR)"}),(0,r.jsx)("li",{children:"Deployment Frequency"}),(0,r.jsx)("li",{children:"Lead Time for Changes"})]})}),(0,r.jsx)("td",{children:(0,r.jsxs)("ul",{children:[(0,r.jsx)("li",{children:"Siloed organizational culture"}),(0,r.jsx)("li",{children:"Resistance to change"}),(0,r.jsx)("li",{children:"Tool sprawl"}),(0,r.jsx)("li",{children:"Lack of collaboration and communication between teams"}),(0,r.jsx)("li",{children:"Balancing speed of delivery with stability and reliability"})]})})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Site Reliability Engineer (SRE)"})}),(0,r.jsx)("td",{children:(0,r.jsx)(i.img,{src:n(65839).A+"",width:"552",height:"319"})}),(0,r.jsx)("td",{children:"Application Reliability & Performance"}),(0,r.jsx)("td",{children:(0,r.jsxs)("ul",{children:[(0,r.jsx)("li",{children:"High availability & scalability"}),(0,r.jsx)("li",{children:"Reduced downtime"}),(0,r.jsx)("li",{children:"Improved incident response"})]})}),(0,r.jsx)("td",{children:(0,r.jsxs)("ul",{children:[(0,r.jsx)("li",{children:"Setting and enforcing reliability targets"}),(0,r.jsx)("li",{children:"Defining Service Level Objectives (SLOs) and Service Level Indicators (SLIs)"}),(0,r.jsx)("li",{children:"Designing and implementing monitoring and alerting systems"}),(0,r.jsx)("li",{children:"Conducting postmortems and root cause analysis"})]})}),(0,r.jsx)("td",{children:(0,r.jsxs)("ul",{children:[(0,r.jsx)("li",{children:"Service Level Objectives (SLOs)"}),(0,r.jsx)("li",{children:"Service Level Indicators (SLIs)"}),(0,r.jsx)("li",{children:"Error Budgets"}),(0,r.jsx)("li",{children:"Availability"}),(0,r.jsx)("li",{children:"Reliability"}),(0,r.jsx)("li",{children:"Incident Response Time"})]})}),(0,r.jsx)("td",{children:(0,r.jsxs)("ul",{children:[(0,r.jsx)("li",{children:"Balancing feature development with reliability improvements"}),(0,r.jsx)("li",{children:"Managing complex distributed systems"}),(0,r.jsx)("li",{children:"Dealing with alert fatigue and false positives"}),(0,r.jsx)("li",{children:"Aligning incentives between development and operations teams"})]})})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Platform Engineering"})}),(0,r.jsx)("td",{children:(0,r.jsx)(i.img,{src:n(37290).A+"",width:"523",height:"214"})}),(0,r.jsx)("td",{children:"Building & Maintaining Developer Platform"}),(0,r.jsx)("td",{children:(0,r.jsxs)("ul",{children:[(0,r.jsx)("li",{children:"Streamlined development workflow"}),(0,r.jsx)("li",{children:"Self-service infrastructure for developers"}),(0,r.jsx)("li",{children:"Increased developer productivity"})]})}),(0,r.jsx)("td",{children:(0,r.jsxs)("ul",{children:[(0,r.jsx)("li",{children:"Designing and implementing scalable and resilient infrastructure"}),(0,r.jsx)("li",{children:"Managing cloud resources"}),(0,r.jsx)("li",{children:"Building and maintaining internal platforms and tooling"}),(0,r.jsx)("li",{children:"Providing support for development teams"})]})}),(0,r.jsx)("td",{children:(0,r.jsxs)("ul",{children:[(0,r.jsx)("li",{children:"Infrastructure Availability"}),(0,r.jsx)("li",{children:"Scalability"}),(0,r.jsx)("li",{children:"Performance"}),(0,r.jsx)("li",{children:"Cost Efficiency"}),(0,r.jsx)("li",{children:"Time to Provision Resources"})]})}),(0,r.jsx)("td",{children:(0,r.jsxs)("ul",{children:[(0,r.jsx)("li",{children:"Managing infrastructure complexity at scale"}),(0,r.jsx)("li",{children:"Optimizing resource utilization and cost"}),(0,r.jsx)("li",{children:"Ensuring security and compliance requirements are met"}),(0,r.jsx)("li",{children:"Evolving platform capabilities to support changing business needs"})]})})]})]})]})})]})}function j(e={}){const{wrapper:i}={...(0,l.R)(),...e.components};return i?(0,r.jsx)(i,{...e,children:(0,r.jsx)(x,{...e})}):x(e)}},32778:(e,i,n)=>{n.d(i,{A:()=>s});const s=n.p+"assets/images/devops-515f0451d9ebb473edcdbf22bc4eadd3.svg"},70640:(e,i,n)=>{n.d(i,{A:()=>s});const s=n.p+"assets/images/git-flow-f10e54db843c29dc4c544a9da9af6045.svg"},86180:(e,i,n)=>{n.d(i,{A:()=>s});const s=n.p+"assets/images/git-merge-fe47794aeb98b26c6614827c1e3e5fcc.svg"},35196:(e,i,n)=>{n.d(i,{A:()=>s});const s=n.p+"assets/images/git-rebase-c6a3b41da411921f84fb545682e9c965.svg"},17907:(e,i,n)=>{n.d(i,{A:()=>s});const s=n.p+"assets/images/git-squash-1ab480809a45c8a8e140100cfeb16e36.svg"},49453:(e,i,n)=>{n.d(i,{A:()=>s});const s=n.p+"assets/images/github-flow-4c3b2958b48f3bb0541766e7632254d0.svg"},10741:(e,i,n)=>{n.d(i,{A:()=>s});const s=n.p+"assets/images/gitlab-flow-2fdafbb3104c9b0b3853b0dfe155b87c.svg"},37290:(e,i,n)=>{n.d(i,{A:()=>s});const s=n.p+"assets/images/platform-engineering-5cb87a5d293d5b45753572c21991698c.svg"},65839:(e,i,n)=>{n.d(i,{A:()=>s});const s=n.p+"assets/images/sre-ec773fcf01320baf49f8333cc5746c21.svg"},86608:(e,i,n)=>{n.d(i,{A:()=>s});const s=n.p+"assets/images/trunked-based-b134dd97d8b7239f83638b67e3422707.svg"}}]);