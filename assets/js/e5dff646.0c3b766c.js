"use strict";(self.webpackChunkclassic=self.webpackChunkclassic||[]).push([[7237],{29045:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>f,contentTitle:()=>m,default:()=>N,frontMatter:()=>p,metadata:()=>t,toc:()=>j});const t=JSON.parse('{"id":"education/computer-science/algorithms/algo/reverse-traversal","title":"Reverse Traversal","description":"Reverse Traversal","source":"@site/docs/education/01-computer-science/10-algorithms/04-algo/reverse-traversal.mdx","sourceDirName":"education/01-computer-science/10-algorithms/04-algo","slug":"/education/computer-science/algorithms/algo/reverse-traversal","permalink":"/tech-labs/docs/education/computer-science/algorithms/algo/reverse-traversal","draft":false,"unlisted":false,"editUrl":"https://github.com/EliFuzz/tech-labs/docs/education/01-computer-science/10-algorithms/04-algo/reverse-traversal.mdx","tags":[],"version":"current","frontMatter":{"title":"Reverse Traversal","description":"Reverse Traversal","hide_table_of_contents":true},"sidebar":"education","previous":{"title":"Regular Expression Matching","permalink":"/tech-labs/docs/education/computer-science/algorithms/algo/regular-expression-matching"},"next":{"title":"Seam Carving","permalink":"/tech-labs/docs/education/computer-science/algorithms/algo/seam-carving"}}');var a=r(23420),s=r(38906),l=r(31519),i=r(20007),c=r(20636);const o="package main\n\ntype ListNode struct {\n    Val  int\n    Next *ListNode\n}\n\nfunc reverseTraversal(head *ListNode) {\n    if head == nil {\n        return\n    }\n    reverseTraversal(head.Next)\n    fmt.Println(head.Val)\n}\n",d="class ListNode {\n\n  int val;\n  ListNode next;\n\n  ListNode(int x) {\n    val = x;\n  }\n}\n\npublic class Main {\n\n  public void reverseTraversal(ListNode head) {\n    if (head == null) {\n      return;\n    }\n    reverseTraversal(head.next);\n    System.out.println(head.val);\n  }\n}\n",u="class ListNode {\n  constructor(val, next = null) {\n    this.val = val;\n    this.next = next;\n  }\n}\n\nfunction reverseTraversal(head) {\n  if (head === null) {\n    return;\n  }\n  reverseTraversal(head.next);\n  console.log(head.val);\n}\n",h="class ListNode(var `val`: Int) {\n    var next: ListNode? = null\n}\n\nfun reverseTraversal(head: ListNode?) {\n    if (head == null) return\n    reverseTraversal(head.next)\n    println(head.`val`)\n}\n",v="class ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\ndef reverse_traversal(head):\n    if head is None:\n        return\n    reverse_traversal(head.next)\n    print(head.val)\n",x='struct ListNode {\n    val: i32,\n    next: Option<Box<ListNode>>,\n}\n\nimpl ListNode {\n    fn new(val: i32) -> Self {\n        ListNode { val, next: None }\n    }\n}\n\nfn reverse_traversal(head: Option<Box<ListNode>>) {\n    if let Some(node) = head {\n        reverse_traversal(node.next);\n        println!("{}", node.val);\n    }\n}\n',g="class ListNode {\n  val: number;\n  next: ListNode | null;\n\n  constructor(val: number, next: ListNode | null = null) {\n    this.val = val;\n    this.next = next;\n  }\n}\n\nfunction reverseTraversal(head: ListNode | null): void {\n  if (head === null) return;\n  reverseTraversal(head.next);\n  console.log(head.val);\n}\n",p={title:"Reverse Traversal",description:"Reverse Traversal",hide_table_of_contents:!0},m=void 0,f={},j=[{value:"Definition",id:"definition",level:2},{value:"Practice",id:"practice",level:2}];function b(e){const n={code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h2,{id:"definition",children:"Definition"}),"\n",(0,a.jsxs)(l.A,{queryString:"primary",children:[(0,a.jsx)(i.A,{value:"definition",label:"Definition",children:(0,a.jsx)(n.p,{children:"The Reverse Traversal Algorithm is a technique used to traverse through a data structure in reverse order, starting from the end and moving towards the beginning"})}),(0,a.jsx)(i.A,{value:"how",label:"Explanation",children:(0,a.jsx)(n.p,{children:"Start from the last element of the data structure and recursively or iteratively moving towards the first element. At each step, it processes the current element and then proceeds to the previous one until it reaches the beginning of the data structure"})}),(0,a.jsx)(i.A,{value:"guidance",label:"Guidance",children:(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Identify the data structure you want to traverse in reverse order"}),"\n",(0,a.jsx)(n.li,{children:"Determine whether you'll use recursion or iteration for the traversal"}),"\n",(0,a.jsxs)(n.li,{children:["Recursive","\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"stop recursion when you reach the beginning of the data structure"}),"\n",(0,a.jsx)(n.li,{children:"process the current element/node, then call the function recursively with the previous element/node"}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["Iterative","\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"initialize a pointer or index to the last element of the data structure"}),"\n",(0,a.jsx)(n.li,{children:"iterate backwards through the data structure, processing each element in reverse order"}),"\n"]}),"\n"]}),"\n"]})}),(0,a.jsx)(i.A,{value:"tips",label:"Tips",children:(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"ensure that your base case for recursion properly handles the end condition to prevent infinite recursion"}),"\n",(0,a.jsx)(n.li,{children:"keep track of the current position or node during traversal to process each element correctly"}),"\n"]})})]}),"\n",(0,a.jsx)(n.h2,{id:"practice",children:"Practice"}),"\n",(0,a.jsxs)(l.A,{queryString:"primary",children:[(0,a.jsx)(i.A,{value:"practice",label:"Practice",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"reverseTraversalRecursive(array, currentIndex):\n  if currentIndex < 0: # Base case: stop when reaching the beginning of the array\n    return\n  process(array[currentIndex]) # Process the current element\n  reverseTraversal(array, currentIndex - 1) # Recursive step: move to the previous element\n\nreverseTraversalIterative(array):\n  endIndex = length(array) - 1\n  for i from endIndex to 0: # Iterate backwards through the array\n    process(array[i]) # Process each element in reverse order\n"})})}),(0,a.jsx)(i.A,{value:"solution",label:"Solution",children:(0,a.jsxs)(l.A,{queryString:"code",children:[(0,a.jsx)(i.A,{value:"go",label:"",attributes:{title:"Go Lang",className:"code_lang go m"},children:(0,a.jsx)(c.A,{language:"go",children:o})}),(0,a.jsx)(i.A,{value:"java",label:"",attributes:{title:"Java",className:"code_lang java m"},children:(0,a.jsx)(c.A,{language:"java",children:d})}),(0,a.jsx)(i.A,{value:"js",label:"",attributes:{title:"JavaScript",className:"code_lang js m"},children:(0,a.jsx)(c.A,{language:"js",children:u})}),(0,a.jsx)(i.A,{value:"kotlin",label:"",attributes:{title:"Kotlin",className:"code_lang kotlin m"},children:(0,a.jsx)(c.A,{language:"kotlin",children:h})}),(0,a.jsx)(i.A,{value:"python",label:"",attributes:{title:"Python",className:"code_lang python m"},children:(0,a.jsx)(c.A,{language:"python",children:v})}),(0,a.jsx)(i.A,{value:"rust",label:"",attributes:{title:"Rust",className:"code_lang rust m"},children:(0,a.jsx)(c.A,{language:"rust",children:x})}),(0,a.jsx)(i.A,{value:"ts",label:"",attributes:{title:"TypeScript",className:"code_lang ts m"},children:(0,a.jsx)(c.A,{language:"ts",children:g})})]})})]})]})}function N(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(b,{...e})}):b(e)}}}]);