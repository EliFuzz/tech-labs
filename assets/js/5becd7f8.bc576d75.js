"use strict";(self.webpackChunkclassic=self.webpackChunkclassic||[]).push([[9327],{10917:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>x,contentTitle:()=>h,default:()=>k,frontMatter:()=>b,metadata:()=>_,toc:()=>v});var t=i(11527),o=i(88672),a=i(29140),r=i(52360),c=i(52296),s=i(92951);const l=e=>{let{data:n}=e;return(0,t.jsx)(t.Fragment,{children:(0,t.jsx)(a.Z,{children:n.map((e=>(0,t.jsx)(r.Z,{value:e.key,label:"",attributes:{title:"Go Lang",className:"code_lang m "+e.key},children:(0,t.jsxs)(a.Z,{queryString:"type",children:[(0,t.jsx)(r.Z,{value:"Syntax",label:"Syntax",children:(0,t.jsxs)(a.Z,{queryString:"syntax",children:[(0,t.jsx)(r.Z,{value:"Examples",label:"Examples",attributes:{className:"tabs__vertical"},children:e.syntax?.examples?.map((n=>(0,t.jsx)(c.Z,{language:e.key,title:n.description,children:n.code},n.name)))}),(0,t.jsx)(r.Z,{value:"Comments",label:"Comments",children:e.syntax?.comments?.map((n=>(0,t.jsx)(c.Z,{language:e.key,title:n.description,children:n.code},n.name)))}),(0,t.jsx)(r.Z,{value:"Namespaces",label:"Namespaces",children:e.syntax?.namespaces?.map((n=>(0,t.jsx)(c.Z,{language:e.key,title:n.description,children:n.code},n.name)))}),(0,t.jsx)(r.Z,{value:"Imports",label:"Imports",children:e.syntax?.imports?.map((n=>(0,t.jsx)(c.Z,{language:e.key,title:n.description,children:n.code},n.name)))}),(0,t.jsx)(r.Z,{value:"Variables",label:"Variables",children:e.syntax?.variables?.map((n=>(0,t.jsx)(c.Z,{language:e.key,title:n.description,children:n.code},n.name)))}),(0,t.jsx)(r.Z,{value:"Functions",label:"Functions",children:e.syntax?.functions?.map((n=>(0,t.jsx)(c.Z,{language:e.key,title:n.description,children:n.code},n.name)))}),(0,t.jsx)(r.Z,{value:"Flow Controls",label:"Flow Controls",children:e.syntax?.flowControls?.map((n=>(0,t.jsx)(c.Z,{language:e.key,title:n.description,children:n.code},n.name)))}),(0,t.jsx)(r.Z,{value:"Structures",label:"Structures",children:e.syntax?.structures?.map((n=>(0,t.jsx)(c.Z,{language:e.key,title:n.description,children:n.code},n.name)))}),(0,t.jsx)(r.Z,{value:"Error Handling",label:"Error Handling",children:e.syntax?.errorHandling?.map((n=>(0,t.jsx)(c.Z,{language:e.key,title:n.description,children:n.code},n.name)))}),(0,t.jsx)(r.Z,{value:"Concurrency",label:"Concurrency",children:e.syntax?.concurrency?.map((n=>(0,t.jsx)(c.Z,{language:e.key,title:n.description,children:n.code},n.name)))})]})}),(0,t.jsx)(r.Z,{value:"Data Types",label:"Data Types",children:e?.dataTypes?.map((n=>(0,t.jsx)(c.Z,{language:e.key,title:`${n.name} - ${n.description}`,children:n.code},n.name)))}),(0,t.jsx)(r.Z,{value:"Keywords",label:"Reserved Keywords",children:(0,t.jsx)(s.Z,{size:"small",bordered:!0,dataSource:e.reservedKeywords||[],renderItem:e=>(0,t.jsx)(s.Z.Item,{children:e})})})]})},e.key)))})})},d=JSON.parse('{"key":"go","metadata":{"name":"Go","url":"https://golang.org/","logo":"/static/img/lang/go.svg"},"dataTypes":[{"name":"bool","description":"Boolean","code":"true"},{"name":"string","description":"UTF-8 string","code":"\\"Hello, World!\\""},{"name":"byte","description":"Byte (8-bit) - alias for uint8: 0 to 255(2\u2078 - 1)","code":"0"},{"name":"int8","description":"Signed Integer (8-bit): -128(-2\u2078) to 127(2\u2078 - 1)","code":"-0"},{"name":"uint8","description":"Unsigned Integer (8-bit): 0 to 255(2\u2078 - 1)","code":"0"},{"name":"int16","description":"Signed Integer (16-bit): -32768(-2\xb9\u2076) to 32767(2\xb9\u2076 - 1)","code":"-0"},{"name":"uint16","description":"Unsigned Integer (16-bit): 0 to 65535(2\xb9\u2076 - 1)","code":"0"},{"name":"int32","description":"Signed Integer (32-bit): -2147483648(-2\xb3\xb9) to 2147483647(2\xb3\xb9 - 1)","code":"-0"},{"name":"uint32","description":"Unsigned Integer (32-bit): 0 to 4294967295(2\xb3\xb9 - 1)","code":"0"},{"name":"int64","description":"Signed Integer (64-bit): -9223372036854775808(-2\u2076\xb3) to 9223372036854775807(2\u2076\xb3 - 1)","code":"-0"},{"name":"uint64","description":"Unsigned Integer (64-bit): 0 to 18446744073709551615(2\u2076\xb3 - 1)","code":"0"},{"name":"int","description":"Signed Integer (32/64-bit) - platform dependent","code":"0"},{"name":"uint","description":"Unsigned Integer (32/64-bit) - platform dependent","code":"0"},{"name":"uintptr","description":"Unsigned Integer (pointer size) - platform dependent","code":"0xc82000c290"},{"name":"rune","description":"Rune - alias for int32: represents a Unicode code point","code":"0"},{"name":"float32","description":"32-bit floating point: -3.4028234663852886e+38 to 3.4028234663852886e+38","code":"0.0"},{"name":"float64","description":"64-bit floating point: -1.7976931348623157e+308 to 1.7976931348623157e+308","code":"0.0"},{"name":"complex64","description":"32-bit complex number: -3.4028234663852886e+38 to 3.4028234663852886e+38","code":"complex(8,-5)"},{"name":"complex128","description":"64-bit complex number: -1.7976931348623157e+308 to 1.7976931348623157e+308","code":"complex(8,-5)"}],"reservedKeywords":["break","case","chan","const","continue","default","defer","else","fallthrough","for","func","go","goto","if","import","interface","map","package","range","return","select","struct","switch","type","var"],"syntax":{"examples":[{"name":"hello_world","description":"Hello World","code":"package main\\n\\nimport \\"fmt\\"\\n\\nfunc main() {\\n  fmt.Println(\\"Hello, World!\\")\\n}"}],"comments":[{"name":"single_line_comment","description":"Single line comment","code":"// Single line comment"},{"name":"multi_line_comment","description":"Multi-line comment","code":"/* Multi-line\\ncomment */"}],"namespaces":[{"name":"namespace","description":"Package: every source file begins with a package clause. \'main\' denotes an executable, not a library","code":"package main"}],"imports":[{"name":"package_standard_library","description":"package in the Go standard library","code":"import \\"fmt\\""},{"name":"package_nested","description":"Implements some I/O utility functions","code":"import \\"io/ioutil\\""},{"name":"package_alias","description":"Math library with local alias m","code":"import m \\"math\\""},{"name":"package_github","description":"package in the github.com/google/uuid library","code":"import \\"github.com/google/uuid\\""}],"variables":[{"name":"variable_declaration","description":"Variable declaration","code":"var x int"},{"name":"variable_assignment","description":"Variable assignment","code":"var x int\\nx = 8"},{"name":"variable_assignment_with_type","description":"Variable assignment with type","code":"var x uint = 8"},{"name":"short_declaration","description":"Short declaration","code":"x:=8"},{"name":"multiple_return_values","description":"Multiple return values","code":"sum, prod := sum(x, y)"},{"name":"string","description":"String","code":"str := \\"Hello, World!\\""},{"name":"multiline_string","description":"Multiline string","code":"str := `A \\"raw\\" string literal\\n\\ncan include line breaks.`"},{"name":"string_interpolation","description":"String interpolation","code":"message := fmt.Sprintf(\\"Hello, my name is %s\\", name)"},{"name":"rune","description":"Rune, an alias for int32, represents a Unicode code point","code":"g := \'\u03a3\'"},{"name":"float","description":"Float64","code":"f := 3.14159"},{"name":"complex","description":"Complex128: represented internally with 2 float64\'s","code":"c := 3 + 4i"},{"name":"convertion_syntax","description":"Conversion syntax","code":"n := byte(\'\\\\n\')"},{"name":"byte_slice","description":"Byte slice","code":"bs := []byte(\\"hello\\")"},{"name":"array_initialization","description":"Array initialization with 0\'s","code":"var arr [4]int"},{"name":"array_initialization_with_values","description":"Array initialization with values","code":"arr := [...]int{3, 1, 8, 88, 100}"},{"name":"array_copy","description":"Copy of arr, 2 separate instances","code":"arr_copy := arr"},{"name":"array_update","description":"Update value at index 0, only arr_copy is affected","code":"arr_copy[0] = 8"},{"name":"2d_array_declaration","description":"2D array declaration with 0\'s","code":"var d2 [][]float64"},{"name":"slice_initialization_with_0","description":"Slice initialization with 0\'s","code":"sl := make([]int, 4)"},{"name":"slice_initialization_with_values","description":"Slice initialization with values","code":"sl := []int{4, 8, 9}"},{"name":"slice_copy","description":"Copy of slice. Both variables point to the same instance therefore update both","code":"sl_copy := sl\\nsl_copy[0] = 8"},{"name":"slice_append","description":"Append to slice","code":"sl = append(sl, 8)"},{"name":"slice_append_another_slice","description":"Append another slice","code":"sl = append(sl, []int{8, 9}...)"},{"name":"pointer","description":"Pointer","code":"p := 5\\nfmt.Println(*p)"},{"name":"unused_variable","description":"Unused variable","code":"_ := myFunc()"},{"name":"map_initialization","description":"Map initialization","code":"m := map[string]int{\\"3\\": 3, \\"4\\": 4}\\nm[\\"1\\"] = 1"},{"name":"variadic_parameters_func_input","description":"Variadic parameters function input","code":"func myFunc(x...int) {}"},{"name":"variadic_parameters_passing","description":"Variadic parameters passing to function","code":"myFunc(arr...)"}],"functions":[{"name":"main","description":"Main function","code":"func main() {}"},{"name":"custom_function_declaration","description":"Custom function declaration","code":"func myFunc() {}"},{"name":"function_with_parameters","description":"Function with parameters","code":"func myFunc(x int) {}"},{"name":"function_with_return","description":"Function with return","code":"func myFunc() int {}"},{"name":"function_with_multiple_return","description":"Function with multiple return","code":"func sum(x, y int) (sum, prod int) {\\n  return x + y, x * y\\n}"},{"name":"function_with_named_return","description":"Function with named return","code":"func sum(x, y int) (sum int) {\\n  sum = x + y\\n  return\\n}"},{"name":"call","description":"Call function","code":"myFunc()"},{"name":"call_with_parameters","description":"Call function with parameters","code":"myFunc(8)"},{"name":"closure_initialization","description":"Closure initialization","code":"x := func() bool {\\n  return x > 1000\\n}"},{"name":"closure_call","description":"Closure call","code":"x()"},{"name":"closure_inline","description":"Closure inline","code":"x := func() bool { return x > 1000 }()"},{"name":"anonymous_function","description":"Anonymous function","code":"func(a, b int) int {\\n  return (a + b) * 2\\n}(8, 2)"},{"name":"defer","description":"Defer statements execute function calls in reverse order after the surrounding function returns, commonly used for tasks like file closure to keep related operations close in code","code":"defer myFunc()"},{"name":"decorator","description":"Decorators","code":"func myFunc(str string) func(before, after string) string {\\n  return func(before, after string) string {\\n    return fmt.Sprintf(\\"%s %s %s\\", before, str, after)  \\n  }\\n}"}],"flowControls":[{"name":"if","description":"If statement","code":"if true {}"},{"name":"if_else","description":"If-else statement","code":"if true {} else {}"},{"name":"switch","description":"Switch statement","code":"x := 48.0\\nswitch x {\\n  case 0:\\n  case 1, 2:\\n  case 48:\\n  case 49:\\n    // Unreached.\\n  default:\\n}"},{"name":"type_switch","description":"Type switch statement","code":"var data interface{}\\ndata = \\"\\"\\nswitch c := data.(type) {\\n  case string:\\n    fmt.Println(c, \\"string\\")\\n  case int64:\\n    fmt.Printf(\\"%d int64\\\\n\\", c)\\n  default:\\n}"},{"name":"for","description":"For statement","code":"for x := 0; x < 3; x++ {\\n  fmt.Println(x)\\n}"},{"name":"for_break","description":"For statement with break","code":"for x := 0; x < 3; x++ {\\n  if x == 1 {\\n    break\\n  }\\n  fmt.Println(x)\\n}"},{"name":"for_continue","description":"For statement with continue","code":"for x := 0; x < 3; x++ {\\n  if x == 1 {\\n    continue\\n  }\\n  fmt.Println(x)\\n}"},{"name":"for_range","description":"For statement with range. Range is used to iterate over an array, a slice, a string, a map, or a channel","code":"for key, value := range map[string]int{\\"1\\": 1, \\"2\\": 2, \\"3\\": 3} {\\n  fmt.Printf(\\"key=%s, value=%d\\\\n\\", key, value)\\n}"}],"structures":[{"name":"interface_initialization","description":"Interface initialization","code":"type myInterface interface {\\n  myMethod()\\n}"},{"name":"struct_initialization","description":"Struct initialization","code":"type myStruct struct {\\n  myField int\\n}"}],"errorHandling":[{"name":"ok_idiom","description":"Ok idiom","code":"m := map[int]string{8: \\"8\\"}\\nif x, ok := m[1]; ok {\\n  fmt.Print(x)\\n} else {\\n  fmt.Print(\\"missing\\")\\n}"},{"name":"error_idiom","description":"Error idiom","code":"if _, err := myFunc(); err != nil {\\n  fmt.Println(err)\\n}"}],"concurrency":[{"name":"goroutine","description":"Goroutine","code":"go myFunc()"},{"name":"channel_initialization","description":"Channel initialization","code":"c := make(chan int)"},{"name":"channel","description":"Channel","code":"func inc(i int, c chan int) {\\n  c <- i + 1\\n}"},{"name":"channel_send_inline","description":"Channel send inline","code":"c <- 8"},{"name":"channel_send_function","description":"Channel send function","code":"go inc(8, c)"},{"name":"channel_receive","description":"Channel receive","code":"x := <-c"}]}}'),m=JSON.parse('{"key":"java","metadata":{"name":"Java","url":"https://www.java.com/","logo":"/static/img/lang/java.svg"},"dataTypes":[{"name":"byte","description":"Byte: -128 to 127","code":"0"},{"name":"short","description":"Short: -32768 to 32767","code":"0"},{"name":"int","description":"Integer: -2147483648 to 2147483647","code":"0"},{"name":"long","description":"Long: -9223372036854775808 to 9223372036854775807","code":"0L"},{"name":"float","description":"Float: -3.4028235E38 to 3.4028235E38","code":"0.0f"},{"name":"double","description":"Double: -1.7976931348623157E308 to 1.7976931348623157E308","code":"0.0"},{"name":"char","description":"Character","code":"\'\\\\u0000\'"},{"name":"string","description":"UTF-16 string","code":"\\"Hello, World!\\""},{"name":"boolean","description":"Boolean","code":"true"}],"reservedKeywords":["abstract","continue","for","new","switch","assert","default","goto","package","synchronized","boolean","do","if","private","this","break","double","implements","protected","throw","byte","else","import","public","throws","case","enum","instanceof","return","transient","catch","extends","int","short","try","char","final","interface","static","void","class","finally","long","strictfp","volatile","const","float","native","super","while"],"syntax":{"examples":[{"name":"hello_world","description":"Hello World","code":"public class Main {\\n  public static void main(String[] args) {\\n    System.out.println(\\"Hello, World!\\");\\n  }\\n}"}],"comments":[{"name":"single_line_comment","description":"Single line comment","code":"// Single line comment"},{"name":"multi_line_comment","description":"Multi-line comment","code":"/* Multi-line\\ncomment */"}],"namespaces":[],"imports":[],"variables":[],"functions":[],"flowControls":[],"structures":[],"errorHandling":[],"concurrency":[]}}'),p=JSON.parse('{"key":"js","metadata":{"name":"Javascript","url":"https://www.javascript.com/","logo":"/static/img/lang/js.svg"},"dataTypes":[{"name":"null","description":"Null (typeof \'object\')","code":"null"},{"name":"undefined","description":"Undefined (typeof \'undefined\')","code":"undefined"},{"name":"boolean","description":"Boolean","code":"true"},{"name":"number","description":"Number","code":"0"},{"name":"bigInt","description":"BigInt","code":"0n"},{"name":"string","description":"UTF-16 string","code":"\\"Hello, World!\\""},{"name":"symbol","description":"Symbol","code":"Symbol()"}],"reservedKeywords":["abstract","arguments","await","boolean","break","byte","case","catch","char","class","const","continue","debugger","default","delete","do","double","else","enum","eval","export","extends","false","final","finally","float","for","function","goto","if","implements","import","in","instanceof","int","interface","let","long","native","new","null","package","private","protected","public","return","short","static","super","switch","synchronized","this","throw","throws","transient","true","try","typeof","var","void","volatile","while","with","yield"],"syntax":{"examples":[{"name":"hello_world","description":"Hello World","code":"console.log(\\"Hello, World!\\")"}],"comments":[{"name":"single_line_comment","description":"Single line comment","code":"// Single line comment"},{"name":"multi_line_comment","description":"Multi-line comment","code":"/* Multi-line\\ncomment */"}],"namespaces":[],"imports":[],"variables":[],"functions":[],"flowControls":[],"structures":[],"errorHandling":[],"concurrency":[]}}'),u=JSON.parse('{"key":"kotlin","metadata":{"name":"Kotlin","url":"https://kotlinlang.org/","logo":"/static/img/lang/kt.svg"},"dataTypes":[{"name":"boolean","description":"Boolean","code":"false"},{"name":"char","description":"Character","code":"\'\\\\u0000\'"},{"name":"string","description":"UTF-16 string","code":"\\"Hello, World!\\""},{"name":"array","description":"Array","code":"arrayOf()"},{"name":"byte","description":"Byte (8-bit): -128(-2\u2078) to 127(2\u2078 - 1)","code":"0"},{"name":"ubyte","description":"UByte (8-bit): 0 to 255(2\u2078 - 1)","code":"0"},{"name":"short","description":"Short (16-bit): -32768(-2\xb9\u2076) to 32767(2\xb9\u2076 - 1)","code":"0"},{"name":"ushort","description":"UShort (16-bit): 0 to 65535(2\xb9\u2076 - 1)","code":"0"},{"name":"int","description":"Int (32-bit): -2147483648(-2\xb3\xb9) to 2147483647(2\xb3\xb9 - 1)","code":"0"},{"name":"uint","description":"UInt (32-bit): 0 to 4294967295(2\xb3\xb9 - 1)","code":"0"},{"name":"long","description":"Long (64-bit): -9223372036854775808(-2\u2076\xb3) to 9223372036854775807(2\u2076\xb3 - 1)","code":"0L"},{"name":"ulong","description":"ULong (64-bit): 0 to 18446744073709551615(2\u2076\xb3 - 1)","code":"0L"},{"name":"float","description":"Float: -3.4028235E38 to 3.4028235E38","code":"0.0f"},{"name":"double","description":"Double: -1.7976931348623157E308 to 1.7976931348623157E308","code":"0.0"}],"reservedKeywords":["as","break","class","continue","do","else","false","for","fun","if","in","interface","is","null","object","package","return","super","this","throw","true","try","typealias","typeof","val","var","when","while"],"syntax":{"examples":[{"name":"hello_world","description":"Hello World","code":"fun main() {\\n  println(\\"Hello, World!\\")\\n}"}],"comments":[{"name":"single_line_comment","description":"Single line comment","code":"// Single line comment"},{"name":"multi_line_comment","description":"Multi-line comment","code":"/* Multi-line\\ncomment */"}],"namespaces":[],"imports":[],"variables":[],"functions":[],"flowControls":[],"structures":[],"errorHandling":[],"concurrency":[]}}'),g=JSON.parse('{"key":"python","metadata":{"name":"Python","url":"https://www.python.org/","logo":"/static/img/lang/py.svg"},"dataTypes":[{"name":"bool","description":"Boolean","code":"False"},{"name":"noneType","description":"None Type","code":"NoneType"},{"name":"str","description":"UTF-8 string","code":"\\"Hello, World!\\""},{"name":"int","description":"Integer","code":"0"},{"name":"float","description":"Float","code":"0.0"},{"name":"complex","description":"Complex","code":"0j"},{"name":"list","description":"List","code":"[]"},{"name":"tuple","description":"Tuple","code":"()"},{"name":"range","description":"Range","code":"range()"},{"name":"dict","description":"Dictionary","code":"{}"},{"name":"set","description":"Set","code":"set()"},{"name":"frozenset","description":"Frozen Set","code":"frozenset()"},{"name":"bytes","description":"Bytes","code":"b\\"\\""},{"name":"bytearray","description":"Bytearray","code":"bytearray()"},{"name":"memoryview","description":"Memoryview","code":"memoryview()"}],"reservedKeywords":["and","as","assert","break","class","continue","def","del","elif","else","except","False","finally","for","from","global","if","import","in","is","lambda","None","nonlocal","not","or","pass","raise","return","True","try","while","with","yield"],"syntax":{"examples":[{"name":"hello_world","description":"Hello World","code":"if __name__ == \\"__main__\\":\\n    print(\\"Hello, World!\\")"}],"comments":[{"name":"single_line_comment","description":"Single line comment","code":"# Single line comment"},{"name":"multi_line_comment","description":"Multi-line comment","code":"\'\'\' Multi-line\\ncomment \'\'\'"}],"namespaces":[],"imports":[],"variables":[],"functions":[],"flowControls":[],"structures":[],"errorHandling":[],"concurrency":[]}}'),f=JSON.parse('{"key":"rust","metadata":{"name":"Rust","url":"https://www.rust-lang.org/","logo":"/static/img/lang/rust.svg"},"dataTypes":[{"name":"bool","description":"Boolean","code":"true"},{"name":"char","description":"Character","code":"\'a\'"},{"name":"i8","description":"i8 signed 8-bit integer: -128(-2\u2078) to 127(2\u2078 - 1)","code":"0"},{"name":"u8","description":"u8 unsigned 8-bit integer: 0 to 255(2\u2078 - 1)","code":"0"},{"name":"i16","description":"i16 signed 16-bit integer: -32768(-2\xb9\u2076) to 32767(2\xb9\u2076 - 1)","code":"0"},{"name":"u16","description":"u16 unsigned 16-bit integer: 0 to 65535(2\xb9\u2076 - 1)","code":"0"},{"name":"i32","description":"i32 signed 32-bit integer: -2147483648(-2\xb3\xb9) to 2147483647(2\xb3\xb9 - 1)","code":"0"},{"name":"u32","description":"u32 unsigned 32-bit integer: 0 to 4294967295(2\xb3\xb9 - 1)","code":"0"},{"name":"i64","description":"i64 signed 64-bit integer: -9223372036854775808(-2\u2076\xb3) to 9223372036854775807(2\u2076\xb3 - 1)","code":"0"},{"name":"u64","description":"u64 unsigned 64-bit integer: 0 to 18446744073709551615(2\u2076\xb3 - 1)","code":"0"},{"name":"i128","description":"i128 signed 128-bit integer: -170141183460469231731687303715884105728(-2\xb9\xb2\u2078) to 170141183460469231731687303715884105727(2\xb9\xb2\u2078 - 1)","code":"0"},{"name":"u128","description":"u128 unsigned 128-bit integer: 0 to 340282366920938463463374607431768211455(2\xb9\xb2\u2078 - 1)","code":"0"},{"name":"f32","description":"f32 32-bit floating point number","code":"0.0"},{"name":"f64","description":"f64 64-bit floating point number","code":"0.0"}],"reservedKeywords":["abstract","as","become","box","break","const","continue","crate","do","else","enum","extern","false","final","fn","for","if","impl","in","let","loop","macro","match","mod","move","mut","override","priv","pub","ref","return","Self","self","static","struct","super","trait","true","try","type","typeof","unsafe","unsized","use","virtual","where","while","yield"],"syntax":{"examples":[{"name":"hello_world","description":"Hello World","code":"fn main() {\\n  println!(\\"Hello, World!\\")\\n}"}],"comments":[{"name":"single_line_comment","description":"Single line comment","code":"// Single line comment"},{"name":"multi_line_comment","description":"Multi-line comment","code":"/* Multi-line\\ncomment */"}],"namespaces":[],"imports":[],"variables":[],"functions":[],"flowControls":[],"structures":[],"errorHandling":[],"concurrency":[]}}'),y=JSON.parse('{"key":"ts","metadata":{"name":"TypeScript","url":"https://www.typescriptlang.org/","logo":"/static/img/lang/ts.svg"},"dataTypes":[{"name":"boolean","description":"boolean","code":"false"},{"name":"number","description":"Number","code":"0"},{"name":"string","description":"UTF-16 string","code":"\\"Hello, World!\\""},{"name":"bigInt","description":"BigInt","code":"0n"},{"name":"symbol","description":"Symbol","code":"Symbol()"}],"reservedKeywords":["any","as","boolean","break","case","catch","class","const","constructor","continue","debugger","declare","default","delete","do","else","enum","export","extends","false","finally","for","from","function","get","if","implements","import","in","instanceof","interface","let","module","new","null","number","of","package","private","protected","public","require","return","set","static","string","super","switch","symbol","this","throw","true","try","type","typeof","var","void","while","with","yield"],"syntax":{"examples":[{"name":"hello_world","description":"Hello World","code":"console.log(\\"Hello, World!\\")"}],"comments":[{"name":"single_line_comment","description":"Single line comment","code":"// Single line comment"},{"name":"multi_line_comment","description":"Multi-line comment","code":"/* Multi-line\\ncomment */"}],"namespaces":[],"imports":[],"variables":[],"functions":[],"flowControls":[],"structures":[],"errorHandling":[],"concurrency":[]}}'),b={title:"Overview",description:"Comparison of Programming Languages",hide_table_of_contents:!0},h=void 0,_={id:"education/programming-languages/overview",title:"Overview",description:"Comparison of Programming Languages",source:"@site/docs/education/02-programming-languages/01-overview.mdx",sourceDirName:"education/02-programming-languages",slug:"/education/programming-languages/overview",permalink:"/tech-labs/docs/education/programming-languages/overview",draft:!1,unlisted:!1,editUrl:"https://github.com/EliFuzz/tech-labs/docs/education/02-programming-languages/01-overview.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Overview",description:"Comparison of Programming Languages",hide_table_of_contents:!0},sidebar:"education",previous:{title:"Programming Languages",permalink:"/tech-labs/docs/category/programming-languages"},next:{title:"Design Patterns",permalink:"/tech-labs/docs/category/design-patterns"}},x={},v=[];function w(e){return(0,t.jsx)(l,{data:[d,m,p,u,g,f,y]})}function k(e={}){const{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(w,{...e})}):w()}}}]);