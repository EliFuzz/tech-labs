"use strict";(self.webpackChunkclassic=self.webpackChunkclassic||[]).push([[1490],{33890:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>d,default:()=>x,frontMatter:()=>c,metadata:()=>o,toc:()=>h});var s=i(11527),l=i(88672),t=i(29140),r=i(52360);const c={title:"Clean Code",description:"Clean Code",hide_table_of_contents:!0},d=void 0,o={id:"education/design-patterns/clean-code",title:"Clean Code",description:"Clean Code",source:"@site/docs/education/03-design-patterns/03-clean-code.mdx",sourceDirName:"education/03-design-patterns",slug:"/education/design-patterns/clean-code",permalink:"/tech-labs/docs/education/design-patterns/clean-code",draft:!1,unlisted:!1,editUrl:"https://github.com/EliFuzz/tech-labs/docs/education/03-design-patterns/03-clean-code.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"Clean Code",description:"Clean Code",hide_table_of_contents:!0},sidebar:"education",previous:{title:"Diagram Visualization",permalink:"/tech-labs/docs/education/design-patterns/visualization"},next:{title:"Architectural Styles",permalink:"/tech-labs/docs/education/design-patterns/architectural-styles"}},a={},h=[];function u(e){const n={img:"img",li:"li",p:"p",strong:"strong",ul:"ul",...(0,l.a)(),...e.components};return(0,s.jsxs)(t.Z,{children:[(0,s.jsx)(r.Z,{value:"overview",label:"Overview",children:(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:i(52841).Z+"",width:"1238",height:"400"})})}),(0,s.jsx)(r.Z,{value:"principles",label:"Principles",children:(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Elegant"}),": Pleasing to read with clear structure and logic"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Efficient"}),": Doesn't waste resources, performs well, and avoids complexity"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Error-free"}),": Minimizes bugs, handles errors gracefully"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Expressive"}),": Clearly communicates intent using meaningful names and comments"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Extensible"}),": Easily adaptable to changing requirements"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Modular"}),": Composed of small, reusable units following the single responsibility principle"]}),"\n"]})}),(0,s.jsx)(r.Z,{value:"benefits",label:"Benefits",children:(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Productivity"}),": Simplifies writing, reading, debugging, testing, and maintenance, reducing time and effort for new features, bug fixes, and refactoring"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Quality"}),": Enhances user experience and satisfaction by meeting both functional and non-functional software requirements such as performance, security, reliability, and usability"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Collaboration"}),": Facilitates teamwork and knowledge sharing, enabling quick understanding of code and effective collaboration on complex projects"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Learning"}),": Aids developers in skill improvement and technology acquisition through exposure to best practices, design patterns, and coding standards, enhancing coding abilities"]}),"\n"]})}),(0,s.jsxs)(r.Z,{value:"guidelines",label:"Guidelines",children:[(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"General"})}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Follow standard conventions"}),"\n",(0,s.jsx)(n.li,{children:"Keep it simple stupid"}),"\n",(0,s.jsx)(n.li,{children:"Follow the Boy Scout Rule"}),"\n",(0,s.jsx)(n.li,{children:"Always identify the root cause"}),"\n"]}),(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Design"})}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Keep configurable data at high levels"}),"\n",(0,s.jsx)(n.li,{children:"Favor polymorphism over if/else or switch/case statements"}),"\n",(0,s.jsx)(n.li,{children:"Separate multi-threading code"}),"\n",(0,s.jsx)(n.li,{children:"Avoid over-configurability"}),"\n",(0,s.jsx)(n.li,{children:"Use dependency injection"}),"\n",(0,s.jsx)(n.li,{children:"Adhere to the Law of Demeter"}),"\n"]}),(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Understandability"})}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Be consistent"}),"\n",(0,s.jsx)(n.li,{children:"Use explanatory variables"}),"\n",(0,s.jsx)(n.li,{children:"Encapsulate boundary conditions"}),"\n",(0,s.jsx)(n.li,{children:"Favor dedicated value objects over primitive types"}),"\n",(0,s.jsx)(n.li,{children:"Avoid logical dependencies"}),"\n",(0,s.jsx)(n.li,{children:"Avoid negative conditionals"}),"\n"]}),(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Naming Conventions"})}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Opt for descriptive and unambiguous names"}),"\n",(0,s.jsx)(n.li,{children:"Make meaningful distinctions"}),"\n",(0,s.jsx)(n.li,{children:"Use pronounceable names"}),"\n",(0,s.jsx)(n.li,{children:"Use searchable names"}),"\n",(0,s.jsx)(n.li,{children:"Replace magic numbers with named constants"}),"\n",(0,s.jsx)(n.li,{children:"Don\u2019t append prefixes or type information"}),"\n"]}),(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Function"})}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Keep functions small"}),"\n",(0,s.jsx)(n.li,{children:"Ensure functions do one thing only"}),"\n",(0,s.jsx)(n.li,{children:"Use descriptive names"}),"\n",(0,s.jsx)(n.li,{children:"Favor fewer arguments"}),"\n",(0,s.jsx)(n.li,{children:"Functions should not have side effects"}),"\n",(0,s.jsx)(n.li,{children:"Avoid flag arguments"}),"\n"]}),(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Comments"})}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Strive to explain yourself in code, not comments"}),"\n",(0,s.jsx)(n.li,{children:"Avoid redundancy in comments"}),"\n",(0,s.jsx)(n.li,{children:"Don\u2019t add unnecessary noise through comments"}),"\n",(0,s.jsx)(n.li,{children:"Don\u2019t use closing brace comments"}),"\n",(0,s.jsx)(n.li,{children:"Don\u2019t comment out code, just remove it"}),"\n",(0,s.jsx)(n.li,{children:"Use comments to explain intent, clarify code, and warn of consequences"}),"\n"]}),(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Source Code Structure"})}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Separate concepts vertically"}),"\n",(0,s.jsx)(n.li,{children:"Related code should appear vertically dense"}),"\n",(0,s.jsx)(n.li,{children:"Declare variables close to where they are used"}),"\n",(0,s.jsx)(n.li,{children:"Dependent functions should be close together in your code structure"}),"\n",(0,s.jsx)(n.li,{children:"Similar functions should be grouped together in your code structure"}),"\n",(0,s.jsx)(n.li,{children:"Place functions in a downward direction in your code structure"}),"\n",(0,s.jsx)(n.li,{children:"Keep lines of code short for readability purposes"}),"\n",(0,s.jsx)(n.li,{children:"Avoid horizontal alignment in your code structure"}),"\n",(0,s.jsx)(n.li,{children:"Use white space to associate related things and disassociate weakly related things in your code structure"}),"\n",(0,s.jsx)(n.li,{children:"Maintain consistent indentation throughout your code structure"}),"\n"]}),(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Objects and Data Structures"})}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Internal structure should be hidden within objects and data structures"}),"\n",(0,s.jsx)(n.li,{children:"Favor data structures over objects when possible"}),"\n",(0,s.jsx)(n.li,{children:"Avoid hybrid structures (half object and half data)"}),"\n",(0,s.jsx)(n.li,{children:"Objects and data structures should be small and do one thing only"}),"\n",(0,s.jsx)(n.li,{children:"They should have a small number of instance variables"}),"\n",(0,s.jsx)(n.li,{children:"Base classes should not know anything about their derivatives"}),"\n",(0,s.jsx)(n.li,{children:"It\u2019s better to have many functions than to pass some code into a function to select a behavior"}),"\n",(0,s.jsx)(n.li,{children:"Non-static methods are generally preferable to static methods"}),"\n"]}),(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Testing"})}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"One assert per test"}),"\n",(0,s.jsx)(n.li,{children:"Readable"}),"\n",(0,s.jsx)(n.li,{children:"Fast"}),"\n",(0,s.jsx)(n.li,{children:"Independent"}),"\n",(0,s.jsx)(n.li,{children:"Repeatable"}),"\n"]}),(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Code Smells"})}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Rigidity"}),"\n",(0,s.jsx)(n.li,{children:"Fragility"}),"\n",(0,s.jsx)(n.li,{children:"Immobility"}),"\n",(0,s.jsx)(n.li,{children:"Needless Complexity"}),"\n",(0,s.jsx)(n.li,{children:"Needless Repetition"}),"\n",(0,s.jsx)(n.li,{children:"Clearness"}),"\n"]})]})]})}function x(e={}){const{wrapper:n}={...(0,l.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},52841:(e,n,i)=>{i.d(n,{Z:()=>s});const s=i.p+"assets/images/clean-code-overview-b779d2c3f8e7ec2d85ea330810649d95.svg"}}]);