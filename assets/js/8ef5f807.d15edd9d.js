"use strict";(self.webpackChunkclassic=self.webpackChunkclassic||[]).push([[5100],{89734:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>d,contentTitle:()=>c,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>h});var t=n(86070),i=n(27468),r=n(78826),a=n(28437);const o={title:"Architectural Styles",description:"Architectural Styles Overview",hide_table_of_contents:!0},c=void 0,l={id:"education/system-design/architectural-styles",title:"Architectural Styles",description:"Architectural Styles Overview",source:"@site/docs/education/04-system-design/07-architectural-styles.mdx",sourceDirName:"education/04-system-design",slug:"/education/system-design/architectural-styles",permalink:"/tech-labs/docs/education/system-design/architectural-styles",draft:!1,unlisted:!1,editUrl:"https://github.com/EliFuzz/tech-labs/docs/education/04-system-design/07-architectural-styles.mdx",tags:[],version:"current",sidebarPosition:7,frontMatter:{title:"Architectural Styles",description:"Architectural Styles Overview",hide_table_of_contents:!0},sidebar:"education",previous:{title:"Kubernetes",permalink:"/tech-labs/docs/education/system-design/kubernetes"},next:{title:"Communication Patterns",permalink:"/tech-labs/docs/education/system-design/communication-patterns"}},d={},h=[];function u(e){const s={img:"img",li:"li",p:"p",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(r.A,{queryString:"primary",children:[(0,t.jsxs)(a.A,{value:"architecture-styles-definition",label:"Definition",children:[(0,t.jsx)(s.p,{children:"Architectural style is a framework of guidelines dictating the structure and organization of a software system, encompassing component roles, interactions, and dependencies. It also addresses non-functional aspects like scalability, performance, security, testability, and maintainability. While not rigid, it offers a flexible approach adaptable to project requirements. There's no one-size-fits-all solution; instead, various trade-offs and considerations must be weighed to select the most suitable style for a given scenario"}),(0,t.jsx)(s.p,{children:(0,t.jsx)(s.img,{src:n(12028).A+"",width:"690",height:"370"})})]}),(0,t.jsx)(a.A,{value:"architecture-styles-benefits",label:"Benefits",children:(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Modularity"}),": breaking down a complex system into smaller and simpler components that can be developed, tested, deployed, and maintained independently"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Reusability"}),": avoiding duplication of code and logic by creating reusable components that can be shared across different parts of the system or even across different systems"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Extensibility"}),": allowing the system to evolve and adapt to changing requirements and new features by adding or modifying components without affecting the existing ones"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Testability"}),": making the system easier to test by isolating the components and their dependencies and providing clear interfaces and contracts between them"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Maintainability"}),": making the system easier to understand, modify, debug, and refactor by following consistent and coherent conventions and principles"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Decoupling"}),": reducing the coupling or dependency between components by minimizing the amount of information and behavior they share or expose to each other"]}),"\n"]})}),(0,t.jsxs)(a.A,{value:"architecture-styles-performance",label:"Software Performance",children:[(0,t.jsx)(s.p,{children:"Software performance refers to the ability of a software system to execute its intended functions within a certain time frame and with optimal use of resources. It is a critical aspect of software development and maintenance, as it directly impacts the user experience, system reliability, and overall efficiency."}),(0,t.jsx)(s.p,{children:"Software performance can be defined as the measure of how well a software system executes its intended functions and responds to user input within a specified time frame."}),(0,t.jsx)(s.p,{children:"It encompasses various aspects, including:"}),(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Response time"}),": The time it takes for the system to respond to user input or queries"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Throughput"}),": The number of tasks or requests the system can process within a given time frame"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Resource"})," utilization: The efficiency with which the system uses hardware and software resources, such as CPU, memory, disk I/O, and network bandwidth"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Scalability"}),": The system\u2019s ability to handle increased workload or user traffic without a significant decrease in performance"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Reliability"}),": The system\u2019s ability to perform its intended functions consistently and without errors or failures"]}),"\n"]}),(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Key Performance Indicators (KPIs) for Software Systems"})}),(0,t.jsx)(s.p,{children:"Key Performance Indicators (KPIs) are measurable values that demonstrate how effectively a software system is achieving its intended goals."}),(0,t.jsx)(s.p,{children:"Some common KPIs for software performance include:"}),(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Response time"}),": Average response time, response time variability, and response time distribution"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Throughput"}),": Number of requests processed per unit time, such as requests per second (RPS) or transactions per minute (TPM)"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Resource utilization"}),": CPU usage, memory usage, disk I/O, network bandwidth, and database queries per second"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Scalability"}),": Number of users, concurrent connections, or requests handled by the system without significant performance degradation"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Reliability"}),": Mean time between failures (MTBF), mean time to recover (MTTR), and error rates"]}),"\n"]}),(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Factors that Affect Software Performance"})}),(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Hardware resources"}),": Availability, utilization, and performance of hardware components, such as CPU, memory, storage, and network interfaces"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Software architecture"}),": Design and structure of the software system, including the number of layers, components, and interactions between them"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Algorithmic complexity"}),": The time and space complexity of algorithms used in the software, which can impact response time and resource utilization"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Data size and growth"}),": The amount of data processed and stored by the system, which can affect performance as the data set grows"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"User behavior"}),": Patterns and intensity of user activity, such as the number of concurrent users, frequency of requests, and usage patterns"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Network and I/O performance"}),": Network latency, packet loss, and I/O operations can impact the system\u2019s ability to retrieve and process data"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Resource contention"}),": Competition for shared resources, such as CPU, memory, and I/O devices, which can lead to performance bottlenecks"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Interference and noise"}),": Interference from other systems or background processes, as well as random fluctuations in system performance, can affect software performance"]}),"\n"]}),(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Methods for Measuring and Monitoring Software Performance"})}),(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Synthetic transactions"}),": Simulating user interactions to measure response time, throughput, and resource utilization"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Real-user monitoring"}),": Tracking actual user interactions to assess performance from the end-user perspective"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Load testing"}),": Testing the system under varying loads to evaluate its scalability and performance under different workloads"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Stress testing"}),": Testing the system under extreme conditions, such as high concurrency or large data sets, to identify performance bottlenecks"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"End-user experience monitoring"}),": Monitoring user experience metrics, such as page load times, error rates, and user satisfaction"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Performance modeling"}),": Creating mathematical models of the system to predict performance under different conditions and optimize system configuration"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Performance benchmarking"}),": Comparing the system\u2019s performance to industry-standard benchmarks or competing systems"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Root cause analysis"}),": Identifying the underlying causes of performance issues through techniques such as profiling, tracing, and logging"]}),"\n"]})]})]})}function m(e={}){const{wrapper:s}={...(0,i.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(u,{...e})}):u(e)}},12028:(e,s,n)=>{n.d(s,{A:()=>t});const t=n.p+"assets/images/overview-3a0012b902f4b22d50ee031dbcdf97d1.svg"}}]);