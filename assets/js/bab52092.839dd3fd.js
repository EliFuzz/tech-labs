"use strict";(self.webpackChunkclassic=self.webpackChunkclassic||[]).push([[1864],{77941:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>f,contentTitle:()=>j,default:()=>v,frontMatter:()=>w,metadata:()=>p,toc:()=>b});var t=i(86070),a=i(27468),l=i(78826),r=i(28437),s=i(41634);const o="package main\n\nfunc generate(numRows int) [][]int {\n    triangle := make([][]int, numRows)\n    for i := range triangle {\n        triangle[i] = make([]int, i+1)\n        triangle[i][0] = 1\n        triangle[i][i] = 1\n        for j := 1; j < i; j++ {\n            triangle[i][j] = triangle[i-1][j-1] + triangle[i-1][j]\n        }\n    }\n    return triangle\n}\n",c="import java.util.ArrayList;\nimport java.util.List;\n\npublic class PascalTriangle {\n\n  public static List<List<Integer>> generate(int numRows) {\n    List<List<Integer>> triangle = new ArrayList<>();\n    if (numRows <= 0) {\n      return triangle;\n    }\n\n    List<Integer> firstRow = new ArrayList<>();\n    firstRow.add(1);\n    triangle.add(firstRow);\n\n    for (int i = 1; i < numRows; i++) {\n      List<Integer> prevRow = triangle.get(i - 1);\n      List<Integer> newRow = new ArrayList<>();\n      newRow.add(1);\n      for (int j = 1; j < i; j++) {\n        newRow.add(prevRow.get(j - 1) + prevRow.get(j));\n      }\n      newRow.add(1);\n      triangle.add(newRow);\n    }\n    return triangle;\n  }\n}\n",u="function generate(numRows) {\n  let triangle = [];\n  for (let i = 0; i < numRows; i++) {\n    let row = [];\n    for (let j = 0; j <= i; j++) {\n      if (j === 0 || j === i) {\n        row.push(1);\n      } else {\n        row.push(triangle[i - 1][j - 1] + triangle[i - 1][j]);\n      }\n    }\n    triangle.push(row);\n  }\n  return triangle;\n}\n",d="fun generate(numRows: Int): List<List<Int>> {\n    val triangle = mutableListOf<MutableList<Int>>()\n    if (numRows <= 0) return triangle\n\n    var row = mutableListOf(1)\n    triangle.add(row)\n\n    for (i in 1 until numRows) {\n        val newRow = mutableListOf<Int>()\n        newRow.add(1)\n        for (j in 1 until i) {\n            newRow.add(triangle[i - 1][j - 1] + triangle[i - 1][j])\n        }\n        newRow.add(1)\n        triangle.add(newRow)\n    }\n    return triangle\n}\n",g="def generate(numRows):\n    triangle = []\n    for i in range(numRows):\n        row = [None] * (i + 1)\n        row[0], row[-1] = 1, 1\n        for j in range(1, len(row) - 1):\n            row[j] = triangle[i - 1][j - 1] + triangle[i - 1][j]\n        triangle.append(row)\n    return triangle\n",h="fn generate(num_rows: i32) -> Vec<Vec<i32>> {\n    let mut triangle = Vec::new();\n    for i in 0..num_rows {\n        let mut row = vec![0; (i + 1) as usize];\n        row[0] = 1;\n        row[i as usize] = 1;\n        for j in 1..i {\n            row[j as usize] = triangle[(i - 1) as usize][(j - 1) as usize] + triangle[(i - 1) as usize][j as usize];\n        }\n        triangle.push(row);\n    }\n    triangle\n}\n",m="function generate(numRows: number): number[][] {\n  const triangle: number[][] = [];\n  for (let i = 0; i < numRows; i++) {\n    const row: number[] = [];\n    for (let j = 0; j <= i; j++) {\n      if (j === 0 || j === i) row.push(1);\n      else row.push(triangle[i - 1][j - 1] + triangle[i - 1][j]);\n    }\n    triangle.push(row);\n  }\n  return triangle;\n}\n",w={title:"Pascal's Triangle",description:"Pascal's Triangle",hide_table_of_contents:!0},j=void 0,p={id:"education/computer-science/algorithms/algo/pascals-triangle",title:"Pascal's Triangle",description:"Pascal's Triangle",source:"@site/docs/education/01-computer-science/10-algorithms/03-algo/pascals-triangle.mdx",sourceDirName:"education/01-computer-science/10-algorithms/03-algo",slug:"/education/computer-science/algorithms/algo/pascals-triangle",permalink:"/tech-labs/docs/education/computer-science/algorithms/algo/pascals-triangle",draft:!1,unlisted:!1,editUrl:"https://github.com/EliFuzz/tech-labs/docs/education/01-computer-science/10-algorithms/03-algo/pascals-triangle.mdx",tags:[],version:"current",frontMatter:{title:"Pascal's Triangle",description:"Pascal's Triangle",hide_table_of_contents:!0},sidebar:"education",previous:{title:"Palindrome",permalink:"/tech-labs/docs/education/computer-science/algorithms/algo/palindrome"},next:{title:"Permutations",permalink:"/tech-labs/docs/education/computer-science/algorithms/algo/permutations"}},f={},b=[{value:"Definition",id:"definition",level:2},{value:"Practice",id:"practice",level:2}];function x(e){const n={code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"definition",children:"Definition"}),"\n",(0,t.jsxs)(l.A,{queryString:"primary",children:[(0,t.jsx)(r.A,{value:"definition",label:"Definition",children:(0,t.jsx)(n.p,{children:"Pascal's Triangle Algorithm generates Pascal's triangle, a triangular array of binomial coefficients. It is a mathematical concept used in various fields, including combinatorics and algebra. The algorithm efficiently calculates the coefficients without directly computing factorials or using recursive methods"})}),(0,t.jsx)(r.A,{value:"how",label:"Explanation",children:(0,t.jsx)(n.p,{children:"Starts with a single 1 at the top, with each subsequent row generated by adding adjacent numbers from the row above. The first and last elements of each row are always 1. To compute the middle elements, each element is the sum of the two elements directly above it. This process continues for the desired number of rows"})}),(0,t.jsx)(r.A,{value:"guidance",label:"Guidance",children:(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Start with a 2D array or list initialized with a single element, 1"}),"\n",(0,t.jsxs)(n.li,{children:["For each row in the triangle","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Initialize the row with 1"}),"\n",(0,t.jsxs)(n.li,{children:["For each element in the row (excluding the first and last)","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Calculate the element by summing the elements directly above and above to the left"}),"\n",(0,t.jsx)(n.li,{children:"Append the calculated element to the row"}),"\n",(0,t.jsx)(n.li,{children:"Append 1 to the end of the row"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.li,{children:"Repeat for the desired number of rows"}),"\n"]}),"\n"]}),"\n"]})}),(0,t.jsx)(r.A,{value:"tips",label:"Tips",children:(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"utilize efficient methods to avoid redundant calculations"}),"\n",(0,t.jsx)(n.li,{children:"optimize memory usage by storing only necessary elements"}),"\n"]})})]}),"\n",(0,t.jsx)(n.h2,{id:"practice",children:"Practice"}),"\n",(0,t.jsxs)(l.A,{queryString:"primary",children:[(0,t.jsx)(r.A,{value:"practice",label:"Practice",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"generatePascalsTriangle(numRows):\n  triangle = []\n  for row from 0 to numRows-1:\n    newRow = []\n    for col from 0 to row:\n      if col is 0 or col is row:\n        newRow.append(1)  // First and last elements are always 1\n      else:\n        // Calculate element by summing elements above and above to the left\n        newElement = triangle[row-1][col-1] + triangle[row-1][col]\n        newRow.append(newElement)\n    triangle.append(newRow)\n  return triangle\n"})})}),(0,t.jsx)(r.A,{value:"solution",label:"Solution",children:(0,t.jsxs)(l.A,{queryString:"code",children:[(0,t.jsx)(r.A,{value:"go",label:"",attributes:{title:"Go Lang",className:"code_lang go m"},children:(0,t.jsx)(s.A,{language:"go",children:o})}),(0,t.jsx)(r.A,{value:"java",label:"",attributes:{title:"Java",className:"code_lang java m"},children:(0,t.jsx)(s.A,{language:"java",children:c})}),(0,t.jsx)(r.A,{value:"js",label:"",attributes:{title:"JavaScript",className:"code_lang js m"},children:(0,t.jsx)(s.A,{language:"js",children:u})}),(0,t.jsx)(r.A,{value:"kotlin",label:"",attributes:{title:"Kotlin",className:"code_lang kotlin m"},children:(0,t.jsx)(s.A,{language:"kotlin",children:d})}),(0,t.jsx)(r.A,{value:"python",label:"",attributes:{title:"Python",className:"code_lang python m"},children:(0,t.jsx)(s.A,{language:"python",children:g})}),(0,t.jsx)(r.A,{value:"rust",label:"",attributes:{title:"Rust",className:"code_lang rust m"},children:(0,t.jsx)(s.A,{language:"rust",children:h})}),(0,t.jsx)(r.A,{value:"ts",label:"",attributes:{title:"TypeScript",className:"code_lang ts m"},children:(0,t.jsx)(s.A,{language:"ts",children:m})})]})})]})]})}function v(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(x,{...e})}):x(e)}}}]);