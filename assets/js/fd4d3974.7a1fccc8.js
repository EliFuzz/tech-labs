"use strict";(self.webpackChunkclassic=self.webpackChunkclassic||[]).push([[5916],{76079:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>x,frontMatter:()=>a,metadata:()=>r,toc:()=>h});const r=JSON.parse('{"id":"education/tech-stack/frontend/graphql/advanced","title":"Advanced","description":"Advanced GraphQL Topics","source":"@site/docs/education/02-tech-stack/02-frontend/02-graphql/03-advanced.mdx","sourceDirName":"education/02-tech-stack/02-frontend/02-graphql","slug":"/education/tech-stack/frontend/graphql/advanced","permalink":"/tech-labs/docs/education/tech-stack/frontend/graphql/advanced","draft":false,"unlisted":false,"editUrl":"https://github.com/EliFuzz/tech-labs/docs/education/02-tech-stack/02-frontend/02-graphql/03-advanced.mdx","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"title":"Advanced","description":"Advanced GraphQL Topics","hide_table_of_contents":true},"sidebar":"education","previous":{"title":"Federation","permalink":"/tech-labs/docs/education/tech-stack/frontend/graphql/federation"},"next":{"title":"JavaScript","permalink":"/tech-labs/docs/category/javascript"}}');var s=i(23420),t=i(38906),l=i(20007),d=i(31519);const a={title:"Advanced",description:"Advanced GraphQL Topics",hide_table_of_contents:!0},c="Advanced",o={},h=[{value:"Domain-Driven Design (DDD)",id:"domain-driven-design-ddd",level:2}];function u(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"advanced",children:"Advanced"})}),"\n",(0,s.jsx)(n.h2,{id:"domain-driven-design-ddd",children:"Domain-Driven Design (DDD)"}),"\n",(0,s.jsxs)(d.A,{queryString:"primary",children:[(0,s.jsx)(l.A,{value:"core",label:"Core Concepts",children:(0,s.jsxs)(d.A,{queryString:"primary",children:[(0,s.jsx)(l.A,{value:"core-fundamentals",label:"Fundamentals",attributes:{className:"tabs__vertical"},children:(0,s.jsxs)("table",{class:"text_vertical",children:[(0,s.jsx)("thead",{children:(0,s.jsxs)("tr",{children:[(0,s.jsx)("th",{children:"DDD Concept"}),(0,s.jsx)("th",{children:"Definition"}),(0,s.jsx)("th",{children:"Characteristics"}),(0,s.jsx)("th",{children:"Considerations"}),(0,s.jsx)("th",{children:"Example"})]})}),(0,s.jsxs)("tbody",{children:[(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Ubiquitous Language"})}),(0,s.jsx)("td",{children:"A common language shared between domain experts and developers, reflected in code and schema"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Type names must use domain terminology, not technical terms"}),(0,s.jsx)("li",{children:"Field names should match business vocabulary exactly"}),(0,s.jsx)("li",{children:"Descriptions should use domain language"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"All type names use business terminology"}),(0,s.jsx)("li",{children:"Field names match domain expert vocabulary"}),(0,s.jsx)("li",{children:"Schema descriptions use ubiquitous language"}),(0,s.jsx)("li",{children:"No technical jargon in public schema"}),(0,s.jsx)("li",{children:"Consistent terminology across all types"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:"# \u2705 Good - Uses domain language\ntype Order {\n    orderNumber: String!\n    customer: Customer!\n    lineItems: [LineItem!]!\n    totalAmount: Money!\n    status: OrderStatus!\n}\n\n# \u274c Bad - Uses technical language\ntype OrderRecord {\n    id: ID!\n    customerId: ID!\n    items: [OrderItemRecord!]!\n    total: Float!\n    statusCode: Int!\n}\n"})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Bounded Contexts"})}),(0,s.jsx)("td",{children:"Explicit boundaries within which a domain model is defined and applicable"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Each subgraph represents one bounded context"}),(0,s.jsx)("li",{children:"Types within a context have consistent meaning"}),(0,s.jsx)("li",{children:"Cross-context references use federation"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Each subgraph maps to exactly one bounded context"}),(0,s.jsx)("li",{children:"No overlapping responsibilities between subgraphs"}),(0,s.jsx)("li",{children:"Clear ownership boundaries defined"}),(0,s.jsx)("li",{children:"Context boundaries align with team boundaries"}),(0,s.jsx)("li",{children:"Minimal coupling between contexts"})]})}),(0,s.jsxs)("td",{children:[(0,s.jsx)(n.p,{children:"Consider separate bounded contexts when applicable:"}),(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Does this concept have different meanings in different parts of the business?"}),(0,s.jsx)("li",{children:"Do different teams own different aspects of this concept?"}),(0,s.jsx)("li",{children:"Would changes to this concept affect different business capabilities?"})]})]})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Entities"})}),(0,s.jsx)("td",{children:"Objects with distinct identity that persists over time"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsxs)("li",{children:["Always have an ",(0,s.jsx)(n.code,{children:"id"})," field"]}),(0,s.jsx)("li",{children:"Identity is stable across operations"}),(0,s.jsx)("li",{children:"Can be referenced from other contexts"}),(0,s.jsxs)("li",{children:["Support federation ",(0,s.jsx)(n.code,{children:"@key"})," directive"]})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"All entities have stable identity fields"}),(0,s.jsx)("li",{children:"Identity fields are immutable"}),(0,s.jsx)("li",{children:"Entities can be federated across subgraphs"}),(0,s.jsx)("li",{children:"Entity boundaries respect aggregate boundaries"}),(0,s.jsx)("li",{children:"Identity generation strategy is consistent"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:'type Customer @key(fields: "id") {\n    id: ID!\n    customerNumber: String!\n    profile: CustomerProfile!\n    # Entity-specific behavior\n    orders: [Order!]!\n}\n'})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Value Objects"})}),(0,s.jsx)("td",{children:"Objects that describe characteristics but have no conceptual identity"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsxs)("li",{children:["No ",(0,s.jsx)(n.code,{children:"id"})," field"]}),(0,s.jsx)("li",{children:"Immutable by design"}),(0,s.jsx)("li",{children:"Compared by value, not identity"}),(0,s.jsx)("li",{children:"Often embedded within entities"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Value objects have no identity fields"}),(0,s.jsx)("li",{children:"All fields are non-nullable where appropriate"}),(0,s.jsx)("li",{children:"Value objects are immutable"}),(0,s.jsx)("li",{children:"Validation rules are embedded in type design"}),(0,s.jsx)("li",{children:"Consistent representation across contexts"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:"type Money {\n    amount: Decimal!\n    currency: Currency!\n}\n\ntype Address {\n    street: String!\n    city: String!\n    postalCode: String!\n    country: Country!\n}\n"})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Aggregates"})}),(0,s.jsx)("td",{children:"Clusters of entities and value objects that are treated as a single unit for data changes"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Root entity serves as aggregate root"}),(0,s.jsx)("li",{children:"Internal consistency maintained within aggregate"}),(0,s.jsx)("li",{children:"External references only to aggregate root"}),(0,s.jsx)("li",{children:"Mutations operate on entire aggregate"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Aggregate root is clearly identified"}),(0,s.jsx)("li",{children:"Internal entities not exposed as top-level types"}),(0,s.jsx)("li",{children:"Mutations target aggregate roots only"}),(0,s.jsx)("li",{children:"Aggregate boundaries respect business invariants"}),(0,s.jsx)("li",{children:"Cross-aggregate references use IDs only"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:'# Aggregate Root\ntype Order @key(fields: "id") {\n    id: ID!\n    orderNumber: String!\n    customer: Customer! # External reference\n    lineItems: [LineItem!]! # Internal entities\n    shippingAddress: Address! # Value object\n    totalAmount: Money! # Value object\n    status: OrderStatus!\n}\n\n# Internal Entity (not directly accessible)\ntype LineItem {\n    productId: ID!\n    quantity: Int!\n    unitPrice: Money!\n    lineTotal: Money!\n}\n'})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Domain Services"})}),(0,s.jsx)("td",{children:"Operations that don't naturally belong to entities or value objects"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Implemented as mutations or queries"}),(0,s.jsx)("li",{children:"Operate across multiple aggregates"}),(0,s.jsx)("li",{children:"Encapsulate complex business logic"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Domain services have clear business purpose"}),(0,s.jsx)("li",{children:"Services operate on domain concepts, not data structures"}),(0,s.jsx)("li",{children:"Complex business rules encapsulated in services"}),(0,s.jsx)("li",{children:"Services maintain aggregate boundaries"}),(0,s.jsx)("li",{children:"Input/output types use domain language"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:"type Mutation {\n    # Domain Service: Order Processing\n    processOrder(input: ProcessOrderInput!): ProcessOrderPayload!\n\n    # Domain Service: Inventory Allocation\n    allocateInventory(input: AllocateInventoryInput!): AllocationResult!\n}\n\ntype Query {\n    # Domain Service: Pricing Calculation\n    calculateShipping(input: ShippingCalculationInput!): ShippingQuote!\n}\n"})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Domain Events"})}),(0,s.jsx)("td",{children:"Something that happened in the domain that domain experts care about"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Modeled as types for event sourcing"}),(0,s.jsx)("li",{children:"Used in subscriptions for real-time updates"}),(0,s.jsx)("li",{children:"Enable loose coupling between contexts"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Events represent business-significant occurrences"}),(0,s.jsx)("li",{children:"Event names use past tense"}),(0,s.jsx)("li",{children:"Events are immutable"}),(0,s.jsx)("li",{children:"Events include necessary context data"}),(0,s.jsx)("li",{children:"Event versioning strategy defined"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:"type OrderPlaced implements DomainEvent {\n    eventId: ID!\n    aggregateId: ID!\n    occurredAt: DateTime!\n    version: Int!\n\n    # Event-specific data\n    orderNumber: String!\n    customerId: ID!\n    totalAmount: Money!\n}\n\ntype Subscription {\n    orderEvents(customerId: ID): OrderEvent!\n}\n\nunion OrderEvent = OrderPlaced | OrderShipped | OrderCancelled\n"})})})]})]})]})}),(0,s.jsx)(l.A,{value:"core-federation",label:"Federation",children:(0,s.jsxs)("table",{children:[(0,s.jsx)("thead",{children:(0,s.jsxs)("tr",{children:[(0,s.jsx)("th",{children:"DDD Concept"}),(0,s.jsx)("th",{children:"Definition"}),(0,s.jsx)("th",{children:"Characteristics"}),(0,s.jsx)("th",{children:"Considerations"}),(0,s.jsx)("th",{children:"Example"})]})}),(0,s.jsxs)("tbody",{children:[(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Subgraph as Bounded Context"})}),(0,s.jsx)("td",{children:"A subgraph represents a bounded context in a federated architecture, owned by a domain-specific team"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"One subgraph per bounded context"}),(0,s.jsx)("li",{children:"Autonomous deployment and ownership"}),(0,s.jsx)("li",{children:"Minimal external dependencies"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Align subgraphs with team responsibilities"}),(0,s.jsx)("li",{children:"Ensure clear boundaries and independence"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:'# Customer Subgraph\ntype Customer @key(fields: "id") {\n    id: ID!\n    profile: CustomerProfile!\n    contactInformation: ContactInfo!\n}\n'})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Entity Ownership and Extension"})}),(0,s.jsx)("td",{children:"Entities are defined in their owning context and extended elsewhere with relevant data only"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Primary definition includes full business meaning"}),(0,s.jsx)("li",{children:"Extensions only add context-specific info"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Respect ownership boundaries"}),(0,s.jsx)("li",{children:"Mark external fields properly"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:'# Primary (Customer Subgraph)\ntype Customer @key(fields: "id") {\n    id: ID!\n    customerNumber: String!\n}\n\n# Extension (Order Subgraph)\nextend type Customer @key(fields: "id") {\n    id: ID! @external\n    orders: [Order!]!\n}\n'})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Cross-Context References"})}),(0,s.jsx)("td",{children:"Reference external entities via ID or use federated references for richer linking across subgraphs"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Use stable identifiers"}),(0,s.jsx)("li",{children:"Maintain referential integrity"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Avoid embedding external data"}),(0,s.jsx)("li",{children:"Resolve federated references correctly"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:'type Order @key(fields: "id") {\n    id: ID!\n    customerId: ID!\n}\n\n# Federated reference\ntype Order @key(fields: "id") {\n    id: ID!\n    customer: Customer!\n}\n'})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Aggregate-Centric Design"})}),(0,s.jsx)("td",{children:"Subgraphs encapsulate domain aggregates, exposing root and child entities along with behavior (mutations)"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Encapsulates full aggregate"}),(0,s.jsx)("li",{children:"Mutations scoped to aggregate boundaries"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Maintain invariants within subgraph"}),(0,s.jsx)("li",{children:"Ensure ownership and isolation"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:'# Order Aggregate\ntype Order @key(fields: "id") {\n    id: ID!\n    lineItems: [LineItem!]!\n}\n\ntype Mutation {\n    placeOrder(input: PlaceOrderInput!): PlaceOrderPayload!\n}\n'})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Capability-Centric Subgraph"})}),(0,s.jsx)("td",{children:"Organize subgraphs around business capabilities such as pricing, inventory, or promotions"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Focused service interfaces"}),(0,s.jsx)("li",{children:"Minimal external data access"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Boundaries must be clearly defined"}),(0,s.jsx)("li",{children:"Keep internal logic self-contained"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:"# Pricing Subgraph\ntype Query {\n    calculatePrice(input: PriceCalculationInput!): PriceQuote!\n}\n"})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Event-Driven Subgraph"})}),(0,s.jsx)("td",{children:"Subgraphs that publish or consume domain events for reactive architectures"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Implements event types"}),(0,s.jsx)("li",{children:"Subscription-based updates"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Ensure schema stability for events"}),(0,s.jsx)("li",{children:"Preserve event order"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:"# Inventory Events\ntype Subscription {\n    inventoryUpdates(productIds: [ID!]): InventoryUpdate!\n}\n"})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Federation Directives"})}),(0,s.jsxs)("td",{children:["Directives like ",(0,s.jsx)(n.code,{children:"@key"}),", ",(0,s.jsx)(n.code,{children:"@external"}),", ",(0,s.jsx)(n.code,{children:"@requires"}),", and ",(0,s.jsx)(n.code,{children:"@provides"})," support cross-subgraph coordination"]}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsxs)("li",{children:[(0,s.jsx)(n.code,{children:"@key"})," defines identity"]}),(0,s.jsxs)("li",{children:[(0,s.jsx)(n.code,{children:"@external"})," marks fields from other contexts"]}),(0,s.jsxs)("li",{children:[(0,s.jsx)(n.code,{children:"@requires"})," declares data dependencies"]}),(0,s.jsxs)("li",{children:[(0,s.jsx)(n.code,{children:"@provides"})," exposes computed fields"]})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Use keys that are stable and immutable"}),(0,s.jsx)("li",{children:"Track data ownership and resolution logic"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:'extend type Customer @key(fields: "id") {\n    id: ID! @external\n    email: String! @external\n    preferences: Preferences! @requires(fields: "email")\n}\n'})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Schema Composition Strategy"})}),(0,s.jsx)("td",{children:"Ensure consistent and valid schema composition across all subgraphs"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"No conflicting definitions"}),(0,s.jsx)("li",{children:"External references resolvable"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Detect circular dependencies early"}),(0,s.jsx)("li",{children:"Validate supergraph composition regularly"})]})}),(0,s.jsx)("td",{})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Query Planning Optimization"})}),(0,s.jsx)("td",{children:"Optimize how queries are planned and resolved across subgraphs in the federated graph"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Batch calls to reduce latency"}),(0,s.jsx)("li",{children:"Cache federation metadata"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Monitor performance and plan cost"}),(0,s.jsx)("li",{children:"Limit query complexity"})]})}),(0,s.jsx)("td",{})]})]})]})})]})}),(0,s.jsx)(l.A,{value:"ddd",label:"DDD",children:(0,s.jsxs)(d.A,{queryString:"secondary",children:[(0,s.jsx)(l.A,{value:"ddd-bounded-context",label:"Bounded Context",attributes:{className:"tabs__vertical"},children:(0,s.jsxs)("table",{class:"text_vertical",children:[(0,s.jsx)("thead",{children:(0,s.jsxs)("tr",{children:[(0,s.jsx)("th",{children:"DDD Concept"}),(0,s.jsx)("th",{children:"Definition"}),(0,s.jsx)("th",{children:"Characteristics"}),(0,s.jsx)("th",{children:"Considerations"}),(0,s.jsx)("th",{children:"Example"})]})}),(0,s.jsxs)("tbody",{children:[(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Bounded Context Mapping"})}),(0,s.jsx)("td",{children:"A strategic design practice that defines explicit boundaries between different parts of a domain model"}),(0,s.jsx)("td",{children:"In GraphQL federation, these boundaries directly translate to subgraph boundaries"}),(0,s.jsx)("td",{children:"Crucial for successful federated architecture"}),(0,s.jsx)("td",{})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Context Identification Strategy: Business Capability Analysis"})}),(0,s.jsx)("td",{children:"Identify distinct business capabilities and their boundaries"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Delivers independent business value"}),(0,s.jsx)("li",{children:"Can be owned by a single team"}),(0,s.jsx)("li",{children:"Has its own data and business rules"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Each capability delivers independent value"}),(0,s.jsx)("li",{children:"Clear ownership boundaries defined"}),(0,s.jsx)("li",{children:"Minimal overlap between capabilities"}),(0,s.jsx)("li",{children:"Capabilities align with organizational structure"}),(0,s.jsx)("li",{children:"Data ownership clearly defined"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-markdown",children:"E-commerce Domain:\n\u251c\u2500\u2500 Customer Management\n\u2502   \u251c\u2500\u2500 Customer Registration\n\u2502   \u251c\u2500\u2500 Profile Management\n\u2502   \u2514\u2500\u2500 Customer Support\n\u251c\u2500\u2500 Product Catalog\n\u2502   \u251c\u2500\u2500 Product Information\n\u2502   \u251c\u2500\u2500 Inventory Management\n\u2502   \u2514\u2500\u2500 Pricing\n\u251c\u2500\u2500 Order Management\n\u2502   \u251c\u2500\u2500 Order Processing\n\u2502   \u251c\u2500\u2500 Payment Processing\n\u2502   \u2514\u2500\u2500 Fulfillment\n\u2514\u2500\u2500 Marketing\n    \u251c\u2500\u2500 Promotions\n    \u251c\u2500\u2500 Recommendations\n    \u2514\u2500\u2500 Analytics\n"})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Context Identification Strategy: Data Ownership Analysis"})}),(0,s.jsx)("td",{children:"Identify which parts of the domain model are owned by which contexts"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Single context creates data"}),(0,s.jsx)("li",{children:"Single context has authority to change data"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Each data element has single owner"}),(0,s.jsx)("li",{children:"Ownership aligns with business authority"}),(0,s.jsx)("li",{children:"Cross-context references use IDs"}),(0,s.jsx)("li",{children:"No shared mutable state"}),(0,s.jsx)("li",{children:"Data consistency responsibilities clear"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:'type Customer @key(fields: "id") {\n    id: ID!\n    customerNumber: String!\n    profile: CustomerProfile!\n    contactInfo: ContactInfo!\n}\n\n# Order Context - Owns order data, references customer\ntype Order @key(fields: "id") {\n    id: ID!\n    customerId: ID! # Reference, not ownership\n    orderNumber: String!\n    lineItems: [LineItem!]! # Owns line items\n}\n\n# Product Context - Owns product information\ntype Product @key(fields: "id") {\n    id: ID!\n    sku: String!\n    name: String!\n    description: String!\n}\n'})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Context Identification Strategy: Team Boundary Analysis"})}),(0,s.jsx)("td",{children:"Align context boundaries with team structure and expertise"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"One team per bounded context"}),(0,s.jsx)("li",{children:"Team has domain expertise for their context"}),(0,s.jsx)("li",{children:"Team can make independent decisions"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"One team per bounded context"}),(0,s.jsx)("li",{children:"Team has domain expertise for their context"}),(0,s.jsx)("li",{children:"Team can make independent decisions"}),(0,s.jsx)("li",{children:"Minimal coordination required between teams"}),(0,s.jsx)("li",{children:"Clear escalation paths for cross-context issues"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-markdown",children:"Team Structure \u2192 Context Mapping:\nFrontend Team \u2192 Customer Experience Context\n\u251c\u2500\u2500 User Interface\n\u251c\u2500\u2500 User Experience\n\u2514\u2500\u2500 Client-side State\n\nBackend Teams:\n\u251c\u2500\u2500 Customer Team \u2192 Customer Management Context\n\u251c\u2500\u2500 Catalog Team \u2192 Product Catalog Context\n\u251c\u2500\u2500 Order Team \u2192 Order Management Context\n\u2514\u2500\u2500 Platform Team \u2192 Shared Infrastructure Context\n"})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Context Relationship Pattern: Shared Kernel"})}),(0,s.jsx)("td",{children:"Two contexts share a common subset of the domain model"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Common value objects across contexts"}),(0,s.jsx)("li",{children:"Shared business rules"}),(0,s.jsx)("li",{children:"Small, stable shared model"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Shared model is small and stable"}),(0,s.jsx)("li",{children:"Changes require coordination"}),(0,s.jsx)("li",{children:"Shared types are value objects"}),(0,s.jsx)("li",{children:"No shared entities"}),(0,s.jsx)("li",{children:"Clear governance for shared model"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:"scalar Money\nscalar DateTime\n\nenum Currency {\n    USD\n    EUR\n    GBP\n}\n\ntype Address {\n    street: String!\n    city: String!\n    postalCode: String!\n    country: String!\n}\n"})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Context Relationship Pattern: Customer-Supplier"})}),(0,s.jsx)("td",{children:"One context (supplier) provides services to another context (customer)"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Clear supplier-customer relationship"}),(0,s.jsx)("li",{children:"Supplier provides stable interface"}),(0,s.jsx)("li",{children:"Customer adapts to supplier changes"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Clear supplier-customer relationship"}),(0,s.jsx)("li",{children:"Supplier provides stable interface"}),(0,s.jsx)("li",{children:"Customer adapts to supplier changes"}),(0,s.jsx)("li",{children:"Service level agreements defined"}),(0,s.jsx)("li",{children:"Backward compatibility maintained"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:'type Product @key(fields: "id") {\n    id: ID!\n    sku: String!\n    name: String!\n    price: Money!\n}\n\n# Customer Context (Order Management)\nextend type Product @key(fields: "id") {\n    id: ID! @external\n    # Uses product data for order processing\n}\n\ntype LineItem {\n    product: Product!\n    quantity: Int!\n    unitPrice: Money!\n}\n'})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Context Relationship Pattern: Conformist"})}),(0,s.jsx)("td",{children:"Customer context conforms to supplier's model without translation"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Supplier has strong domain expertise"}),(0,s.jsx)("li",{children:"Customer has limited influence"}),(0,s.jsx)("li",{children:"Integration cost is high"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Supplier model fits customer needs"}),(0,s.jsx)("li",{children:"Customer accepts supplier changes"}),(0,s.jsx)("li",{children:"No translation layer needed"}),(0,s.jsx)("li",{children:"Clear dependency management"}),(0,s.jsx)("li",{children:"Supplier stability assessed"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:"# Supplier defines the model\ntype PaymentMethod {\n    id: ID!\n    type: PaymentType!\n    details: PaymentDetails!\n}\n\n# Customer uses model as-is\ntype Order {\n    id: ID!\n    paymentMethod: PaymentMethod! # Direct usage\n}\n"})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Context Relationship Pattern: Anti-Corruption Layer"})}),(0,s.jsx)("td",{children:"Customer context translates supplier's model to protect its own model"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Supplier model doesn't fit domain"}),(0,s.jsx)("li",{children:"Legacy system integration"}),(0,s.jsx)("li",{children:"External service integration"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Translation layer implemented"}),(0,s.jsx)("li",{children:"Internal model protected"}),(0,s.jsx)("li",{children:"Translation logic tested"}),(0,s.jsx)("li",{children:"Performance impact considered"}),(0,s.jsx)("li",{children:"Error handling for translation failures"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:'# External Supplier Model (legacy system)\ntype LegacyCustomer {\n    custId: String!\n    custName: String!\n    custAddr: String!\n}\n\n# Internal Domain Model\ntype Customer @key(fields: "id") {\n    id: ID!\n    customerNumber: String!\n    profile: CustomerProfile!\n    address: Address!\n}\n\n# Translation in resolver layer (not shown in schema)\n'})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Context Relationship Pattern: Open Host Service"})}),(0,s.jsx)("td",{children:"Context provides a well-defined service interface for multiple customers"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Stable, well-documented interface"}),(0,s.jsx)("li",{children:"Multiple consumer contexts"}),(0,s.jsx)("li",{children:"Versioning strategy defined"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Stable, well-documented interface"}),(0,s.jsx)("li",{children:"Multiple consumer contexts"}),(0,s.jsx)("li",{children:"Versioning strategy defined"}),(0,s.jsx)("li",{children:"Service level agreements"}),(0,s.jsx)("li",{children:"Consumer feedback incorporated"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:'# Open Host Service - Product Catalog\ntype Query {\n    product(id: ID!): Product\n    products(filter: ProductFilter): [Product!]!\n    searchProducts(query: String!): ProductSearchResult!\n}\n\ntype Product @key(fields: "id") {\n    id: ID!\n    sku: String!\n    name: String!\n    description: String!\n    category: Category!\n    price: Money!\n    availability: Availability!\n}\n\n# Well-defined, stable interface for multiple consumers\n'})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Context Relationship Pattern: Published Language"})}),(0,s.jsx)("td",{children:"Shared language for integration between contexts"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Common language defined"}),(0,s.jsx)("li",{children:"Event schemas documented"}),(0,s.jsx)("li",{children:"Versioning strategy in place"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Common language defined"}),(0,s.jsx)("li",{children:"Event schemas documented"}),(0,s.jsx)("li",{children:"Versioning strategy in place"}),(0,s.jsx)("li",{children:"Consumer compatibility maintained"}),(0,s.jsx)("li",{children:"Schema evolution managed"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:"# Published Language - Domain Events\ninterface DomainEvent {\n    eventId: ID!\n    aggregateId: ID!\n    eventType: String!\n    occurredAt: DateTime!\n    version: Int!\n}\n\ntype CustomerRegistered implements DomainEvent {\n    eventId: ID!\n    aggregateId: ID!\n    eventType: String!\n    occurredAt: DateTime!\n    version: Int!\n\n    # Event-specific data\n    customerId: ID!\n    customerNumber: String!\n    email: String!\n}\n"})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Context Mapping in Federation: Subgraph Boundary Definition"})}),(0,s.jsx)("td",{children:"Mapping Bounded Contexts to Subgraphs in a federated GraphQL architecture"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Represents a single bounded context"}),(0,s.jsx)("li",{children:"Can be owned by a single team"}),(0,s.jsx)("li",{children:"Entities and operations are cohesive"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"One bounded context per subgraph"}),(0,s.jsx)("li",{children:"Clear entity ownership"}),(0,s.jsx)("li",{children:"Cohesive operations"}),(0,s.jsx)("li",{children:"Minimal cross-subgraph dependencies"}),(0,s.jsx)("li",{children:"Team ownership aligned"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-markdown",children:"Bounded Context \u2192 Subgraph Mapping:\nCustomer Management Context \u2192 Customer Subgraph\n\u251c\u2500\u2500 Customer entity (primary)\n\u251c\u2500\u2500 Customer profile management\n\u251c\u2500\u2500 Customer authentication\n\u2514\u2500\u2500 Customer preferences\n\nProduct Catalog Context \u2192 Product Subgraph\n\u251c\u2500\u2500 Product entity (primary)\n\u251c\u2500\u2500 Product categories\n\u251c\u2500\u2500 Product attributes\n\u2514\u2500\u2500 Product search\n\nOrder Management Context \u2192 Order Subgraph\n\u251c\u2500\u2500 Order entity (primary)\n\u251c\u2500\u2500 Order processing\n\u251c\u2500\u2500 Order status tracking\n\u2514\u2500\u2500 Order history\n"})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Cross-Context Integration Pattern: Event-Driven Integration"})}),(0,s.jsx)("td",{children:"Use domain events for loose coupling between contexts"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Events represent business occurrences"}),(0,s.jsx)("li",{children:"Event schemas are stable"}),(0,s.jsx)("li",{children:"Eventual consistency acceptable"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Events represent business occurrences"}),(0,s.jsx)("li",{children:"Event schemas are stable"}),(0,s.jsx)("li",{children:"Eventual consistency acceptable"}),(0,s.jsx)("li",{children:"Error handling for event processing"}),(0,s.jsx)("li",{children:"Event ordering considerations"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:"# Publishing Context\ntype Mutation {\n    placeOrder(input: PlaceOrderInput!): PlaceOrderPayload!\n}\n\ntype Subscription {\n    orderEvents: OrderEvent!\n}\n\nunion OrderEvent = OrderPlaced | OrderShipped | OrderCancelled\n\n# Consuming Context\ntype Subscription {\n    # Subscribe to events from other contexts\n    customerOrderEvents(customerId: ID!): OrderEvent!\n}\n"})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Cross-Context Integration Pattern: Synchronous Integration"})}),(0,s.jsx)("td",{children:"Direct federation for immediate consistency needs"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Immediate consistency required"}),(0,s.jsx)("li",{children:"Performance implications understood"}),(0,s.jsx)("li",{children:"Fallback strategies defined"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Immediate consistency required"}),(0,s.jsx)("li",{children:"Performance implications understood"}),(0,s.jsx)("li",{children:"Fallback strategies defined"}),(0,s.jsx)("li",{children:"Circuit breaker patterns implemented"}),(0,s.jsx)("li",{children:"Monitoring and alerting in place"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:'# Customer Context\ntype Customer @key(fields: "id") {\n    id: ID!\n    profile: CustomerProfile!\n}\n\n# Order Context\nextend type Customer @key(fields: "id") {\n    id: ID! @external\n    orders: [Order!]! # Real-time access to orders\n    currentOrder: Order # Immediate consistency needed\n}\n'})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Context Evolution Strategy: Context Splitting"})}),(0,s.jsx)("td",{children:"Dividing a large or complex context into smaller, more manageable ones"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Context becomes too large"}),(0,s.jsx)("li",{children:"Multiple teams need ownership"}),(0,s.jsx)("li",{children:"Different change frequencies"}),(0,s.jsx)("li",{children:"Distinct business capabilities emerge"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Clear split rationale"}),(0,s.jsx)("li",{children:"New boundaries defined"}),(0,s.jsx)("li",{children:"Data migration planned"}),(0,s.jsx)("li",{children:"Interface contracts established"}),(0,s.jsx)("li",{children:"Rollback strategy prepared"})]})}),(0,s.jsx)("td",{})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Context Evolution Strategy: Context Merging"})}),(0,s.jsx)("td",{children:"Consolidating smaller or highly coupled contexts into a single, unified context"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Contexts are too small"}),(0,s.jsx)("li",{children:"High coupling between contexts"}),(0,s.jsx)("li",{children:"Single team ownership"}),(0,s.jsx)("li",{children:"Shared data model"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Merge benefits clear"}),(0,s.jsx)("li",{children:"Unified model designed"}),(0,s.jsx)("li",{children:"Migration strategy defined"}),(0,s.jsx)("li",{children:"Team alignment achieved"}),(0,s.jsx)("li",{children:"Monitoring during transition"})]})}),(0,s.jsx)("td",{})]})]})]})}),(0,s.jsx)(l.A,{value:"ddd-entity-aggregate",label:"Entity Aggregate",children:(0,s.jsxs)("table",{class:"text_vertical",children:[(0,s.jsx)("thead",{children:(0,s.jsxs)("tr",{children:[(0,s.jsx)("th",{children:"DDD Concept"}),(0,s.jsx)("th",{children:"Definition"}),(0,s.jsx)("th",{children:"Characteristics"}),(0,s.jsx)("th",{children:"Considerations"}),(0,s.jsx)("th",{children:"Example"})]})}),(0,s.jsxs)("tbody",{children:[(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Ubiquitous Language"})}),(0,s.jsx)("td",{children:"A common language shared between domain experts and developers, reflected in code and schema"}),(0,s.jsx)("td",{children:(0,s.jsx)("ul",{children:(0,s.jsx)("li",{children:"Type names must use domain terminology, not technical terms"})})}),(0,s.jsx)("td",{children:(0,s.jsx)("ul",{children:(0,s.jsx)("li",{children:"All type names use business terminology"})})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:"# \u2705 Good - Uses domain language\ntype Order {\n    orderNumber: String!\n    customer: Customer!\n    lineItems: [LineItem!]!\n    totalAmount: Money!\n    status: OrderStatus!\n}\n\n# \u274c Bad - Uses technical language\ntype OrderRecord {\n    id: ID!\n    customerId: ID!\n    items: [OrderItemRecord!]!\n    total: Float!\n    statusCode: Int!\n}\n"})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Entity Identity Design"})}),(0,s.jsx)("td",{children:"Every entity must have a stable, unique identity that persists throughout its lifecycle"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Identity fields are immutable"}),(0,s.jsx)("li",{children:"Identity fields are unique across all instances"}),(0,s.jsx)("li",{children:"Identity generation strategy is consistent"}),(0,s.jsx)("li",{children:"Identity fields are suitable for federation keys"}),(0,s.jsx)("li",{children:"Business meaning of identity is clear"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Is there a natural business identifier? (Yes \u2192 Business key; No \u2192 Technical identifier)"}),(0,s.jsx)("li",{children:"Is the business identifier immutable? (No \u2192 Technical identifier; Yes \u2192 Business key)"}),(0,s.jsx)("li",{children:"Do external systems need specific identifier format? (Yes \u2192 Multiple keys; No \u2192 Single key)"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:'# UUID-based identity\ntype Customer @key(fields: "id") {\n    id: ID! # UUID: "550e8400-e29b-41d4-a716-446655440000"\n    customerNumber: String!\n    profile: CustomerProfile!\n}\n\n# Business key identity\ntype Product @key(fields: "sku") {\n    sku: String! # Business key: "LAPTOP-DELL-XPS13"\n    name: String!\n    description: String!\n}\n\n# Composite identity\ntype OrderLineItem @key(fields: "orderId productSku") {\n    orderId: ID!\n    productSku: String!\n    quantity: Int!\n    unitPrice: Money!\n}\n\n# Multiple identity options\ntype Customer @key(fields: "id") @key(fields: "customerNumber") {\n    id: ID!\n    customerNumber: String! # Alternative key for legacy systems\n    email: String!\n}\n'})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Entity Lifecycle Modeling"})}),(0,s.jsx)("td",{children:"Model entity states and transitions explicitly in the schema"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"All possible states explicitly modeled"}),(0,s.jsx)("li",{children:"State transitions are clear"}),(0,s.jsx)("li",{children:"Lifecycle timestamps included"}),(0,s.jsx)("li",{children:"State-dependent fields identified"}),(0,s.jsx)("li",{children:"Invalid state combinations prevented"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Explicitly define all possible states"}),(0,s.jsx)("li",{children:"Ensure clear transitions between states"}),(0,s.jsx)("li",{children:"Include timestamps for key lifecycle events"}),(0,s.jsx)("li",{children:"Identify fields that are dependent on the entity's state"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:'type Order @key(fields: "id") {\n    id: ID!\n    orderNumber: String!\n    status: OrderStatus!\n    createdAt: DateTime!\n    updatedAt: DateTime!\n\n    # Lifecycle-specific fields\n    placedAt: DateTime\n    shippedAt: DateTime\n    deliveredAt: DateTime\n    cancelledAt: DateTime\n\n    # State-dependent data\n    trackingNumber: String # Only available when shipped\n    cancellationReason: String # Only available when cancelled\n}\n\nenum OrderStatus {\n    DRAFT\n    PLACED\n    CONFIRMED\n    SHIPPED\n    DELIVERED\n    CANCELLED\n    RETURNED\n}\n'})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Owned Relationships"})}),(0,s.jsx)("td",{children:"Entity owns and manages related entities within aggregate boundary"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Owned entities not exposed as top-level types"}),(0,s.jsx)("li",{children:"Owned entities have no independent identity"}),(0,s.jsx)("li",{children:"Lifecycle tied to owning entity"}),(0,s.jsx)("li",{children:"Consistency maintained within aggregate"}),(0,s.jsx)("li",{children:"No external references to owned entities"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Are the related entities always accessed and managed through the owning entity?"}),(0,s.jsx)("li",{children:"Do the related entities lack independent meaning outside the owner?"}),(0,s.jsx)("li",{children:"Is their lifecycle directly dependent on the owning entity's lifecycle?"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:'type Order @key(fields: "id") {\n    id: ID!\n    # Owned entities - managed within aggregate\n    lineItems: [LineItem!]! # Order owns line items\n    shippingAddress: Address! # Order owns shipping address\n    billingAddress: Address! # Order owns billing address\n}\n\ntype LineItem {\n    # No @key directive - not independently accessible\n    productSku: String!\n    quantity: Int!\n    unitPrice: Money!\n    lineTotal: Money!\n}\n'})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Referenced Relationships"})}),(0,s.jsx)("td",{children:"Entity references other entities by identity"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"References use stable identifiers"}),(0,s.jsx)("li",{children:"Referenced entities defined in appropriate contexts"}),(0,s.jsx)("li",{children:"Federation directives correctly applied"}),(0,s.jsx)("li",{children:"Circular dependencies avoided"}),(0,s.jsx)("li",{children:"Reference integrity handled at application level"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Are the referenced entities independent and can exist without the referencing entity?"}),(0,s.jsx)("li",{children:"Do the referenced entities have their own lifecycle and management?"}),(0,s.jsx)("li",{children:"Is data consistency across these entities handled at a higher level (e.g., eventual consistency)?"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:'type Order @key(fields: "id") {\n    id: ID!\n    customerId: ID! # Reference to Customer entity\n    # Federated reference - resolved across subgraphs\n    customer: Customer!\n}\n\n# Customer defined in different subgraph\nextend type Customer @key(fields: "id") {\n    id: ID! @external\n    orders: [Order!]! # Back-reference\n}\n'})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Aggregate Root Design"})}),(0,s.jsx)("td",{children:"Each aggregate has exactly one root entity that serves as the entry point"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Single aggregate root identified"}),(0,s.jsx)("li",{children:"Root entity has clear identity"}),(0,s.jsx)("li",{children:"All aggregate components accessible through root"}),(0,s.jsx)("li",{children:"Business invariants maintained at aggregate level"}),(0,s.jsx)("li",{children:"Aggregate boundaries respect consistency requirements"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"What is the primary entity that all other entities within the aggregate depend on?"}),(0,s.jsx)("li",{children:"Does this root encapsulate all changes to its internal entities?"}),(0,s.jsx)("li",{children:"Are all business rules and invariants applied at the root level?"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:'# Aggregate Root\ntype Order @key(fields: "id") {\n    id: ID!\n    orderNumber: String!\n    customerId: ID!\n\n    # Aggregate components\n    lineItems: [LineItem!]!\n    shippingAddress: Address!\n    billingAddress: Address!\n\n    # Aggregate-level computed fields\n    totalAmount: Money!\n    itemCount: Int!\n    status: OrderStatus!\n\n    # Aggregate behavior\n    canBeCancelled: Boolean!\n    canBeModified: Boolean!\n}\n\n# Internal entities - not directly accessible\ntype LineItem {\n    productSku: String!\n    productName: String!\n    quantity: Int!\n    unitPrice: Money!\n    lineTotal: Money!\n}\n\n# Value objects\ntype Address {\n    street: String!\n    city: String!\n    postalCode: String!\n    country: String!\n}\n'})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Aggregate Boundary Definition"})}),(0,s.jsx)("td",{children:"Defines the scope of consistency and transactional integrity"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Aggregate boundaries respect business invariants"}),(0,s.jsx)("li",{children:"Entities within aggregate are highly cohesive"}),(0,s.jsx)("li",{children:"Cross-aggregate references use IDs"}),(0,s.jsx)("li",{children:"Aggregate size is manageable"}),(0,s.jsx)("li",{children:"Consistency requirements clearly defined"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Do these entities need to be consistent together? (Yes \u2192 Same aggregate; No \u2192 Different aggregates)"}),(0,s.jsx)("li",{children:"Do these entities change together? (Yes \u2192 Same aggregate; No \u2192 Different aggregates)"}),(0,s.jsx)("li",{children:"Can these entities exist independently? (No \u2192 Same aggregate; Yes \u2192 Different aggregates)"}),(0,s.jsx)("li",{children:"Is the relationship ownership or reference? (Ownership \u2192 Same aggregate; Reference \u2192 Different aggregates)"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:'# Single Aggregate: Order + LineItems + Addresses\ntype Order @key(fields: "id") {\n    id: ID!\n    # These must be consistent together\n    lineItems: [LineItem!]! # Owned - same aggregate\n    shippingAddress: Address! # Owned - same aggregate\n    totalAmount: Money! # Computed from line items\n}\n\n# Separate Aggregate: Customer\ntype Customer @key(fields: "id") {\n    id: ID!\n    profile: CustomerProfile!\n    # Orders reference customer but are separate aggregates\n}\n\n# Reference between aggregates\ntype Order @key(fields: "id") {\n    customerId: ID! # Reference, not ownership\n    customer: Customer! # Federated reference\n}\n'})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Aggregate Operations"})}),(0,s.jsx)("td",{children:"Design mutations that operate on complete aggregates"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Mutations target aggregate roots"}),(0,s.jsx)("li",{children:"Input types include all necessary data"}),(0,s.jsx)("li",{children:"Business rules validated in mutations"}),(0,s.jsx)("li",{children:"Aggregate consistency maintained"}),(0,s.jsx)("li",{children:"Error handling for business rule violations"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Do the mutations only modify one aggregate at a time?"}),(0,s.jsx)("li",{children:"Are all necessary inputs for a complete aggregate operation provided in a single mutation?"}),(0,s.jsx)("li",{children:"Are business rules for the aggregate enforced within the mutation?"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:"type Mutation {\n    # Aggregate creation\n    createOrder(input: CreateOrderInput!): CreateOrderPayload!\n\n    # Aggregate modification\n    updateOrder(input: UpdateOrderInput!): UpdateOrderPayload!\n    addLineItem(input: AddLineItemInput!): AddLineItemPayload!\n    removeLineItem(input: RemoveLineItemInput!): RemoveLineItemPayload!\n\n    # Aggregate state transitions\n    confirmOrder(orderId: ID!): ConfirmOrderPayload!\n    cancelOrder(input: CancelOrderInput!): CancelOrderPayload!\n}\n\ninput CreateOrderInput {\n    customerId: ID!\n    lineItems: [LineItemInput!]!\n    shippingAddress: AddressInput!\n    billingAddress: AddressInput!\n}\n\ninput LineItemInput {\n    productSku: String!\n    quantity: Int!\n}\n\ntype CreateOrderPayload {\n    order: Order\n    errors: [Error!]!\n}\n"})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Entity Inheritance and Polymorphism"})}),(0,s.jsx)("td",{children:"Model entity hierarchies using GraphQL interfaces and unions"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Interface defines common entity contract"}),(0,s.jsx)("li",{children:"Concrete types implement interface completely"}),(0,s.jsx)("li",{children:"Type-specific fields clearly separated"}),(0,s.jsx)("li",{children:"Federation keys consistent across types"}),(0,s.jsx)("li",{children:"Polymorphic queries supported"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Are there shared behaviors or attributes across different entity types?"}),(0,s.jsx)("li",{children:"Do client applications need to query or operate on these entities polymorphically?"}),(0,s.jsx)("li",{children:"Is the hierarchy stable and unlikely to change frequently?"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:'# Base entity interface\ninterface Product @key(fields: "id") {\n    id: ID!\n    sku: String!\n    name: String!\n    description: String!\n    price: Money!\n}\n\n# Concrete entity types\ntype PhysicalProduct implements Product @key(fields: "id") {\n    id: ID!\n    sku: String!\n    name: String!\n    description: String!\n    price: Money!\n\n    # Physical product specific fields\n    weight: Weight!\n    dimensions: Dimensions!\n    shippingClass: ShippingClass!\n}\n\ntype DigitalProduct implements Product @key(fields: "id") {\n    id: ID!\n    sku: String!\n    name: String!\n    description: String!\n    price: Money!\n\n    # Digital product specific fields\n    downloadUrl: String!\n    licenseType: LicenseType!\n    fileSize: Int!\n}\n\n# Union for polymorphic queries\nunion ProductVariant = PhysicalProduct | DigitalProduct\n'})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Entity Versioning Patterns"})}),(0,s.jsx)("td",{children:"Handle entity evolution over time"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Version fields for optimistic locking"}),(0,s.jsx)("li",{children:"Deprecated fields properly marked"}),(0,s.jsx)("li",{children:"Migration path documented"}),(0,s.jsx)("li",{children:"Schema version tracking"}),(0,s.jsx)("li",{children:"Backward compatibility maintained"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Do you need to prevent concurrent updates to the same entity?"}),(0,s.jsx)("li",{children:"Do you need to track changes to an entity's structure or data over time?"}),(0,s.jsx)("li",{children:"Is backward compatibility a significant concern for your clients?"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:'type Customer @key(fields: "id") {\n    id: ID!\n    version: Int! # Optimistic locking\n    # Core fields\n    customerNumber: String!\n    profile: CustomerProfile!\n\n    # Versioned fields with deprecation\n    email: String! @deprecated(reason: "Use profile.contactInfo.email")\n    phone: String @deprecated(reason: "Use profile.contactInfo.phone")\n\n    # Evolution tracking\n    createdAt: DateTime!\n    updatedAt: DateTime!\n    schemaVersion: String! # Track schema evolution\n}\n\ntype CustomerProfile {\n    personalInfo: PersonalInfo!\n    contactInfo: ContactInfo!\n    preferences: CustomerPreferences!\n}\n'})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Soft Delete Patterns"})}),(0,s.jsx)("td",{children:"Handle entity deletion without data loss"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Soft delete flags included"}),(0,s.jsx)("li",{children:"Deletion metadata captured"}),(0,s.jsx)("li",{children:"Queries filter deleted entities by default"}),(0,s.jsx)("li",{children:"Conditional field resolution based on deletion status"}),(0,s.jsx)("li",{children:"Data retention policies considered"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Is there a business requirement to retain deleted data for auditing or recovery?"}),(0,s.jsx)("li",{children:"Do you need to differentiate between truly deleted entities and logically deleted ones?"}),(0,s.jsx)("li",{children:"How should queries behave when encountering soft-deleted entities?"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:'type Customer @key(fields: "id") {\n    id: ID!\n    customerNumber: String!\n\n    # Soft delete fields\n    isActive: Boolean!\n    deletedAt: DateTime\n    deletionReason: String\n\n    # Conditional fields based on deletion status\n    profile: CustomerProfile # Null when deleted\n    orders: [Order!]! # Empty when deleted\n}\n\ntype Query {\n    # Active customers only by default\n    customers(includeDeleted: Boolean = false): [Customer!]!\n    customer(id: ID!, includeDeleted: Boolean = false): Customer\n}\n'})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Nested Aggregates (Anti-Pattern)"})}),(0,s.jsx)("td",{children:"Avoid aggregates within aggregates"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"No aggregates nested within other aggregates"}),(0,s.jsx)("li",{children:"Cross-aggregate references use IDs"}),(0,s.jsx)("li",{children:"Federation used for cross-aggregate navigation"}),(0,s.jsx)("li",{children:"Aggregate boundaries clearly defined"}),(0,s.jsx)("li",{children:"Consistency boundaries respected"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:'Does one aggregate truly "own" another, or does it merely reference it?'}),(0,s.jsx)("li",{children:'Would modifying the "inner" aggregate require modifying the "outer" aggregate\'s invariants?'}),(0,s.jsx)("li",{children:"Are the consistency requirements distinct for each potential aggregate?"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:'# \u274c Bad - Nested aggregates\ntype Order @key(fields: "id") {\n    id: ID!\n    customer: Customer! # Customer is separate aggregate\n    lineItems: [LineItem!]!\n}\n\n# \u2705 Good - Reference to separate aggregate\ntype Order @key(fields: "id") {\n    id: ID!\n    customerId: ID! # Reference only\n    customer: Customer! # Federated reference\n    lineItems: [LineItem!]!\n}\n'})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Aggregate Collaboration Patterns"})}),(0,s.jsx)("td",{children:"Model how aggregates work together"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Aggregates remain independent"}),(0,s.jsx)("li",{children:"Collaboration through events or services"}),(0,s.jsx)("li",{children:"Eventual consistency between aggregates"}),(0,s.jsx)("li",{children:"Compensation patterns for failures"}),(0,s.jsx)("li",{children:"Clear responsibility boundaries"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"How do independent aggregates interact without violating their boundaries?"}),(0,s.jsx)("li",{children:"What mechanisms (e.g., domain events) facilitate communication and data synchronization?"}),(0,s.jsx)("li",{children:"How are eventual consistency and potential failures handled?"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:'# Order aggregate\ntype Order @key(fields: "id") {\n    id: ID!\n    customerId: ID!\n    status: OrderStatus!\n}\n\n# Inventory aggregate\ntype InventoryItem @key(fields: "productSku") {\n    productSku: String!\n    quantityAvailable: Int!\n    quantityReserved: Int!\n}\n\n# Collaboration through domain events\ntype Mutation {\n    placeOrder(input: PlaceOrderInput!): PlaceOrderPayload!\n    # This triggers InventoryReserved event\n}\n\ntype Subscription {\n    inventoryEvents: InventoryEvent!\n}\n\nunion InventoryEvent = InventoryReserved | InventoryReleased\n'})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Aggregate Factories"})}),(0,s.jsx)("td",{children:"Encapsulate complex aggregate creation logic"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Complex creation logic encapsulated"}),(0,s.jsx)("li",{children:"Factory methods have clear purpose"}),(0,s.jsx)("li",{children:"Input validation comprehensive"}),(0,s.jsx)("li",{children:"Business rules enforced during creation"}),(0,s.jsx)("li",{children:"Error handling for creation failures"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Is the creation process for an aggregate complex, involving multiple steps or external dependencies?"}),(0,s.jsx)("li",{children:"Do you need to ensure that an aggregate is always created in a valid state?"}),(0,s.jsx)("li",{children:"Can the creation logic be reused across different parts of the application?"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:"type Mutation {\n    # Factory method for complex order creation\n    createOrderFromCart(input: CreateOrderFromCartInput!): CreateOrderPayload!\n\n    # Factory method for subscription orders\n    createSubscriptionOrder(input: CreateSubscriptionInput!): CreateOrderPayload!\n}\n\ninput CreateOrderFromCartInput {\n    cartId: ID!\n    shippingAddressId: ID!\n    paymentMethodId: ID!\n    promotionCodes: [String!]\n}\n\ntype CreateOrderPayload {\n    order: Order\n    warnings: [Warning!]!\n    errors: [Error!]!\n}\n"})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Entity Distribution Strategies"})}),(0,s.jsx)("td",{children:"Distribute entity data across appropriate subgraphs"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Entity data distributed by business capability"}),(0,s.jsx)("li",{children:"Core entity in primary subgraph"}),(0,s.jsx)("li",{children:"Extensions in relevant subgraphs"}),(0,s.jsx)("li",{children:"No data duplication across subgraphs"}),(0,s.jsx)("li",{children:"Clear ownership boundaries"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Which business domain is primarily responsible for managing a given entity?"}),(0,s.jsx)("li",{children:"How can different subgraphs extend an entity without duplicating core data?"}),(0,s.jsx)("li",{children:"How do you ensure a single source of truth for critical entity data?"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:'# Customer subgraph - Core customer data\ntype Customer @key(fields: "id") {\n    id: ID!\n    customerNumber: String!\n    profile: CustomerProfile!\n    registrationDate: DateTime!\n}\n\n# Order subgraph - Order-related customer data\nextend type Customer @key(fields: "id") {\n    id: ID! @external\n    orders: [Order!]!\n    orderHistory: OrderHistory!\n    loyaltyPoints: Int!\n}\n\n# Marketing subgraph - Marketing-related customer data\nextend type Customer @key(fields: "id") {\n    id: ID! @external\n    marketingPreferences: MarketingPreferences!\n    campaignHistory: [Campaign!]!\n    segmentMemberships: [Segment!]!\n}\n'})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Cross-Subgraph Entity Consistency"})}),(0,s.jsx)("td",{children:"Maintain consistency across distributed entity data"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Consistency strategy defined"}),(0,s.jsx)("li",{children:"Event-driven updates implemented"}),(0,s.jsx)("li",{children:"Version tracking for consistency checks"}),(0,s.jsx)("li",{children:"Conflict resolution strategies"}),(0,s.jsx)("li",{children:"Monitoring for consistency issues"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"What level of consistency (e.g., strong, eventual) is required between subgraphs?"}),(0,s.jsx)("li",{children:"How are changes to an entity propagated across subgraphs?"}),(0,s.jsx)("li",{children:"How are conflicts resolved when multiple subgraphs modify the same entity's state?"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:'# Event-driven consistency\ntype Subscription {\n    customerEvents: CustomerEvent!\n}\n\nunion CustomerEvent = CustomerUpdated | CustomerDeleted\n\ntype CustomerUpdated implements DomainEvent {\n    eventId: ID!\n    customerId: ID!\n    updatedFields: [String!]!\n    occurredAt: DateTime!\n}\n\n# Eventual consistency handling\ntype Customer @key(fields: "id") {\n    id: ID!\n    # Include version for consistency checks\n    version: Int!\n    lastSyncedAt: DateTime!\n}\n'})})})]})]})]})}),(0,s.jsx)(l.A,{value:"ddd-value-object",label:"Value Object",children:(0,s.jsxs)("table",{class:"text_vertical",children:[(0,s.jsx)("thead",{children:(0,s.jsxs)("tr",{children:[(0,s.jsx)("th",{children:"DDD Concept"}),(0,s.jsx)("th",{children:"Definition"}),(0,s.jsx)("th",{children:"Characteristics"}),(0,s.jsx)("th",{children:"Considerations"}),(0,s.jsx)("th",{children:"Example"})]})}),(0,s.jsxs)("tbody",{children:[(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Value Object Representation"})}),(0,s.jsx)("td",{children:"Immutable objects that describe characteristics or attributes but have no conceptual identity"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsxs)("li",{children:[(0,s.jsx)("b",{children:"Immutability"}),": Cannot be modified after creation; operations return new instance"]}),(0,s.jsxs)("li",{children:[(0,s.jsx)("b",{children:"Value Equality"}),": Equal if all their attributes are equal"]}),(0,s.jsxs)("li",{children:[(0,s.jsx)("b",{children:"Self-Validation"}),": Validate their own invariants"]})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"No mutation operations on value object fields"}),(0,s.jsx)("li",{children:"All fields are non-nullable where appropriate"}),(0,s.jsx)("li",{children:"Equality based on all attributes, with comparison operations available"}),(0,s.jsx)("li",{children:"Validation rules embedded in type design; invalid instances cannot be created"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:"# Immutable value object\ntype Money {\n    amount: Decimal! # Cannot be changed\n    currency: Currency! # Cannot be changed\n}\n\n# Value Equality - Two Money objects are equal if amount and currency match\ntype Money {\n    amount: Decimal!\n    currency: Currency!\n    isZero: Boolean!\n}\n\n# Self-Validation - Email value object with validation\ntype Email {\n    address: String! # Always valid email format\n    domain: String!\n    isValid: Boolean! # Always true for existing instances\n}\n"})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Money Pattern"})}),(0,s.jsx)("td",{children:"Represent monetary values with currency information"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsxs)("li",{children:["Includes ",(0,s.jsx)(n.code,{children:"amount"})," and ",(0,s.jsx)(n.code,{children:"currency"})]}),(0,s.jsxs)("li",{children:["Can have computed properties like ",(0,s.jsx)(n.code,{children:"formattedAmount"}),", ",(0,s.jsx)(n.code,{children:"displayValue"}),", ",(0,s.jsx)(n.code,{children:"minorUnits"})]}),(0,s.jsx)("li",{children:"Supports arithmetic operations (add, subtract, multiply)"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Currency always specified"}),(0,s.jsx)("li",{children:"Decimal precision appropriate for currency"}),(0,s.jsx)("li",{children:"Arithmetic operations handle currency compatibility"}),(0,s.jsx)("li",{children:"Display formatting included"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:"type Money {\n    amount: Decimal!\n    currency: Currency!\n    formattedAmount: String!\n    displayValue: String!\n}\n\nenum Currency {\n    USD\n    EUR\n}\n"})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Address Pattern"})}),(0,s.jsx)("td",{children:"Represent physical or mailing addresses"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsxs)("li",{children:["Includes ",(0,s.jsx)(n.code,{children:"street"}),", ",(0,s.jsx)(n.code,{children:"city"}),", ",(0,s.jsx)(n.code,{children:"state"}),", ",(0,s.jsx)(n.code,{children:"postalCode"}),", ",(0,s.jsx)(n.code,{children:"country"})]}),(0,s.jsxs)("li",{children:["Can have computed properties like ",(0,s.jsx)(n.code,{children:"formattedAddress"}),", ",(0,s.jsx)(n.code,{children:"isValid"}),", ",(0,s.jsx)(n.code,{children:"coordinates"})]}),(0,s.jsx)("li",{children:"Supports validation services"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Country-specific validation rules"}),(0,s.jsx)("li",{children:"Standardized formatting"}),(0,s.jsx)("li",{children:"Geocoding integration considered"}),(0,s.jsx)("li",{children:"International address support"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:"type Address {\n    street: String!\n    city: String!\n    state: String\n    postalCode: String!\n    country: Country!\n    formattedAddress: String!\n    isValid: Boolean!\n}\n"})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Date Range Pattern"})}),(0,s.jsx)("td",{children:"Represent periods or ranges of time"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsxs)("li",{children:["Includes ",(0,s.jsx)(n.code,{children:"startDate"})," and ",(0,s.jsx)(n.code,{children:"endDate"})]}),(0,s.jsxs)("li",{children:["Can have computed properties like ",(0,s.jsx)(n.code,{children:"duration"}),", ",(0,s.jsx)(n.code,{children:"isActive"}),", ",(0,s.jsx)(n.code,{children:"isEmpty"})]}),(0,s.jsxs)("li",{children:["Supports business logic like ",(0,s.jsx)(n.code,{children:"contains"})," and ",(0,s.jsx)(n.code,{children:"overlaps"})]})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Start date before or equal to end date"}),(0,s.jsx)("li",{children:"Timezone considerations handled"}),(0,s.jsx)("li",{children:"Overlap detection implemented"}),(0,s.jsx)("li",{children:"Duration calculations accurate"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:"type DateRange {\n    startDate: Date!\n    endDate: Date!\n    duration: Duration!\n    isActive: Boolean!\n}\n\ntype Duration {\n    days: Int!\n    hours: Int!\n}\n"})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Measurement Pattern"})}),(0,s.jsx)("td",{children:"Represent quantities with units"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsxs)("li",{children:["Includes ",(0,s.jsx)(n.code,{children:"value"})," and ",(0,s.jsx)(n.code,{children:"unit"})]}),(0,s.jsxs)("li",{children:["Supports unit conversions (e.g., ",(0,s.jsx)(n.code,{children:"inGrams"}),", ",(0,s.jsx)(n.code,{children:"inKilograms"}),")"]}),(0,s.jsxs)("li",{children:["Can be composed for complex measurements (e.g., ",(0,s.jsx)(n.code,{children:"Dimensions"}),")"]})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Unit conversions available"}),(0,s.jsx)("li",{children:"Precision appropriate for use case"}),(0,s.jsx)("li",{children:"Standard units supported"}),(0,s.jsx)("li",{children:"Arithmetic operations handle unit compatibility"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:"type Weight {\n    value: Decimal!\n    unit: WeightUnit!\n    inGrams: Decimal!\n    inKilograms: Decimal!\n}\n\nenum WeightUnit {\n    GRAM\n    KILOGRAM\n}\n"})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Composite Value Objects"})}),(0,s.jsx)("td",{children:"Value objects composed of other value objects"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsxs)("li",{children:["Combines multiple value objects (e.g., ",(0,s.jsx)(n.code,{children:"ContactInfo"})," combines ",(0,s.jsx)(n.code,{children:"Email"}),", ",(0,s.jsx)(n.code,{children:"PhoneNumber"}),", ",(0,s.jsx)(n.code,{children:"Address"}),")"]}),(0,s.jsx)("li",{children:"Computed properties can leverage components"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Component value objects properly modeled"}),(0,s.jsx)("li",{children:"Composition relationships clear"}),(0,s.jsx)("li",{children:"Validation cascades to components"}),(0,s.jsx)("li",{children:"Immutability maintained throughout composition"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:"type ContactInfo {\n    email: Email!\n    phone: PhoneNumber\n    address: Address!\n    isComplete: Boolean!\n}\n"})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Polymorphic Value Objects"})}),(0,s.jsx)("td",{children:"Different value object types for similar concepts"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsxs)("li",{children:["Uses interfaces to define common contracts (e.g., ",(0,s.jsx)(n.code,{children:"Identifier"}),")"]}),(0,s.jsxs)("li",{children:["Specific types implement the interface and add relevant behavior (e.g., ",(0,s.jsx)(n.code,{children:"CustomerNumber"}),", ",(0,s.jsx)(n.code,{children:"ProductSKU"}),")"]}),(0,s.jsx)("li",{children:"Unions can be used for polymorphic usage"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Interface defines common contract"}),(0,s.jsx)("li",{children:"Specific types add relevant behavior"}),(0,s.jsx)("li",{children:"Type discrimination clear"}),(0,s.jsx)("li",{children:"Validation rules type-specific"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:"interface Identifier {\n    value: String!\n    type: IdentifierType!\n    isValid: Boolean!\n}\n\ntype CustomerNumber implements Identifier {\n    value: String!\n    region: String!\n}\n"})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Enumeration Value Objects"})}),(0,s.jsx)("td",{children:"Rich enumerations with behavior and data"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsxs)("li",{children:["Enum provides type safety for a core concept (e.g., ",(0,s.jsx)(n.code,{children:"OrderStatusCode"}),")"]}),(0,s.jsxs)("li",{children:["Associated rich type adds behavior and metadata (e.g., ",(0,s.jsx)(n.code,{children:"OrderStatus"})," with ",(0,s.jsx)(n.code,{children:"canTransitionTo"}),", ",(0,s.jsx)(n.code,{children:"isTerminal"}),")"]})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Enum provides type safety"}),(0,s.jsx)("li",{children:"Rich type adds behavior and metadata"}),(0,s.jsx)("li",{children:"State transitions clearly defined"}),(0,s.jsx)("li",{children:"Business rules embedded"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:"type OrderStatus {\n    code: OrderStatusCode!\n    name: String!\n    canTransitionTo: [OrderStatusCode!]!\n    isTerminal: Boolean!\n}\n\nenum OrderStatusCode {\n    DRAFT\n    CONFIRMED\n}\n"})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Collection Value Objects"})}),(0,s.jsx)("td",{children:"Immutable collections with domain behavior"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsxs)("li",{children:["Encapsulates a collection of other objects (e.g., ",(0,s.jsx)(n.code,{children:"LineItems"})," containing ",(0,s.jsx)(n.code,{children:"LineItem"}),")"]}),(0,s.jsxs)("li",{children:["Provides collection-level behavior (e.g., ",(0,s.jsx)(n.code,{children:"totalQuantity"}),", ",(0,s.jsx)(n.code,{children:"totalAmount"}),", ",(0,s.jsx)(n.code,{children:"hasProduct"}),")"]})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Collection operations available"}),(0,s.jsx)("li",{children:"Aggregation functions provided"}),(0,s.jsx)("li",{children:"Business logic encapsulated"}),(0,s.jsx)("li",{children:"Immutability maintained"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:"type LineItems {\n    items: [LineItem!]!\n    totalQuantity: Int!\n    totalAmount: Money!\n    itemCount: Int!\n}\n"})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Format Validation"})}),(0,s.jsx)("td",{children:"Validate value object format and structure"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Embedded validation rules to ensure correct format (e.g., email address format)"}),(0,s.jsxs)("li",{children:["Can include validation metadata (e.g., ",(0,s.jsx)(n.code,{children:"validationRules"}),", ",(0,s.jsx)(n.code,{children:"isDisposable"}),")"]})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Format validation rules defined"}),(0,s.jsx)("li",{children:"Standard formats used where applicable"}),(0,s.jsx)("li",{children:"Validation metadata exposed"}),(0,s.jsx)("li",{children:"International standards followed"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:"type Email {\n    address: String! # Always valid format\n    localPart: String!\n    domain: String!\n    validationRules: [ValidationRule!]!\n}\n"})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Business Rule Validation"})}),(0,s.jsx)("td",{children:"Embed business rules in value object validation"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsxs)("li",{children:["Validation ensures adherence to domain constraints (e.g., ",(0,s.jsx)(n.code,{children:"ProductSKU"})," has ",(0,s.jsx)(n.code,{children:"isDiscontinued"}),", ",(0,s.jsx)(n.code,{children:"isRestricted"}),")"]}),(0,s.jsxs)("li",{children:["Includes business metadata (e.g., ",(0,s.jsx)(n.code,{children:"category"}),", ",(0,s.jsx)(n.code,{children:"manufacturer"}),", ",(0,s.jsx)(n.code,{children:"riskLevel"}),")"]})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Business rules embedded in validation"}),(0,s.jsx)("li",{children:"Domain constraints enforced"}),(0,s.jsx)("li",{children:"Business metadata included"}),(0,s.jsx)("li",{children:"Compliance requirements met"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:"type ProductSKU {\n    value: String!\n    isValid: Boolean!\n    category: ProductCategory!\n    isDiscontinued: Boolean!\n}\n"})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Scalar Serialization"})}),(0,s.jsx)("td",{children:"Serialize simple value objects as scalars"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsxs)("li",{children:["Defines custom GraphQL scalars for simple value objects (e.g., ",(0,s.jsx)(n.code,{children:"Money"}),", ",(0,s.jsx)(n.code,{children:"Email"}),", ",(0,s.jsx)(n.code,{children:"PhoneNumber"}),")"]}),(0,s.jsx)("li",{children:"Validation happens during deserialization"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Scalar serialization format documented"}),(0,s.jsx)("li",{children:"Validation happens during deserialization"}),(0,s.jsx)("li",{children:"Error handling for invalid formats"}),(0,s.jsx)("li",{children:"Client libraries support custom scalars"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:"scalar Money\nscalar Email\n\ntype Customer {\n    id: ID!\n    email: Email! # Serialized as string, validated as email\n    creditLimit: Money! # Serialized with currency info\n}\n"})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Object Serialization"})}),(0,s.jsx)("td",{children:"Serialize complex value objects as objects"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsxs)("li",{children:["Represents value objects as GraphQL types with their fields (e.g., ",(0,s.jsx)(n.code,{children:"Address"}),", ",(0,s.jsx)(n.code,{children:"Money"}),")"]}),(0,s.jsx)("li",{children:"Input types mirror output types for consistency"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Input types mirror output types"}),(0,s.jsx)("li",{children:"Nested objects properly structured"}),(0,s.jsx)("li",{children:"Optional fields clearly marked"}),(0,s.jsx)("li",{children:"Validation rules consistent"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:"type Address {\n    street: String!\n    city: String!\n    postalCode: String!\n    country: Country!\n}\n\ninput AddressInput {\n    street: String!\n    city: String!\n}\n"})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Shared Value Objects"})}),(0,s.jsx)("td",{children:"Share common value objects across subgraphs in a federated architecture"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsxs)("li",{children:["Common value objects like ",(0,s.jsx)(n.code,{children:"Money"}),", ",(0,s.jsx)(n.code,{children:"Email"}),", ",(0,s.jsx)(n.code,{children:"Address"})," are defined once"]}),(0,s.jsx)("li",{children:"Used consistently across different subgraphs (e.g., Customer subgraph and Order subgraph)"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Shared value objects consistently defined"}),(0,s.jsx)("li",{children:"No conflicting definitions across subgraphs"}),(0,s.jsx)("li",{children:"Shared types documented"}),(0,s.jsx)("li",{children:"Version compatibility maintained"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:'scalar Money\ntype Address {\n    street: String!\n    city: String!\n    postalCode: String!\n}\n\n# Customer subgraph\ntype Customer @key(fields: "id") {\n    id: ID!\n    address: Address!\n}\n'})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Context-Specific Value Objects"})}),(0,s.jsx)("td",{children:"Allow context-specific interpretations of value objects in a federated architecture"}),(0,s.jsx)("td",{children:(0,s.jsx)("ul",{children:(0,s.jsxs)("li",{children:["Value objects can have different fields or behaviors based on the specific domain context (e.g., ",(0,s.jsx)(n.code,{children:"Address"})," in customer context vs. ",(0,s.jsx)(n.code,{children:"ShippingAddress"})," in shipping context)"]})})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Context-specific needs addressed"}),(0,s.jsx)("li",{children:"No unnecessary coupling between contexts"}),(0,s.jsx)("li",{children:"Clear mapping between contexts"}),(0,s.jsx)("li",{children:"Context boundaries respected"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:"# Customer context - full address\ntype Address {\n    street: String!\n    city: String!\n    state: String!\n    isVerified: Boolean!\n}\n\n# Shipping context - shipping-focused address\ntype ShippingAddress {\n    street: String!\n    city: String!\n    deliveryInstructions: String\n    isResidential: Boolean!\n}\n"})})})]})]})]})}),(0,s.jsx)(l.A,{value:"ddd-domain-event",label:"Domain Event",children:(0,s.jsxs)("table",{children:[(0,s.jsx)("thead",{children:(0,s.jsxs)("tr",{children:[(0,s.jsx)("th",{children:"DDD Concept"}),(0,s.jsx)("th",{children:"Definition"}),(0,s.jsx)("th",{children:"Characteristics"}),(0,s.jsx)("th",{children:"Considerations"}),(0,s.jsx)("th",{children:"Example"})]})}),(0,s.jsxs)("tbody",{children:[(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Ubiquitous Language"})}),(0,s.jsx)("td",{children:"A common language shared between domain experts and developers, reflected in code and schema"}),(0,s.jsx)("td",{children:(0,s.jsx)("ul",{children:(0,s.jsx)("li",{children:"Type names must use domain terminology, not technical terms"})})}),(0,s.jsx)("td",{children:(0,s.jsx)("ul",{children:(0,s.jsx)("li",{children:"All type names use business terminology"})})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:"# \u2705 Good - Uses domain language\ntype Order {\n    orderNumber: String!\n    customer: Customer!\n    lineItems: [LineItem!]!\n    totalAmount: Money!\n    status: OrderStatus!\n}\n\n# \u274c Bad - Uses technical language\ntype OrderRecord {\n    id: ID!\n    customerId: ID!\n    items: [OrderItemRecord!]!\n    total: Float!\n    statusCode: Int!\n}\n"})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Business Significance (Domain Event Modeling)"})}),(0,s.jsx)("td",{children:"Events represent occurrences that domain experts care about"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Events use business language"}),(0,s.jsx)("li",{children:"Events represent business state changes"}),(0,s.jsx)("li",{children:"Events are meaningful to domain experts"}),(0,s.jsx)("li",{children:"Events capture business context"}),(0,s.jsx)("li",{children:"Events avoid technical implementation details"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Ensure events directly reflect business processes"}),(0,s.jsx)("li",{children:"Avoid creating events for mere technical operations"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:"# \u2705 Good - Business significant events\ntype CustomerRegistered implements DomainEvent {\n    eventId: ID!\n    aggregateId: ID!\n    occurredAt: DateTime!\n    version: Int!\n\n    # Business-relevant data\n    customerId: ID!\n    customerNumber: String!\n    email: String!\n    registrationChannel: RegistrationChannel!\n}\n\ntype OrderPlaced implements DomainEvent {\n    eventId: ID!\n    aggregateId: ID!\n    occurredAt: DateTime!\n    version: Int!\n\n    # Business context\n    orderNumber: String!\n    customerId: ID!\n    totalAmount: Money!\n    orderSource: OrderSource!\n}\n\n# \u274c Bad - Technical events\ntype DatabaseRecordUpdated implements DomainEvent {\n    eventId: ID!\n    tableName: String!\n    recordId: String!\n    changedFields: [String!]!\n}\n"})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Immutability (Domain Event Modeling)"})}),(0,s.jsx)("td",{children:"Events cannot be changed once created"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"No mutation operations on events"}),(0,s.jsx)("li",{children:"Event data is immutable"}),(0,s.jsx)("li",{children:"Event history preserved"}),(0,s.jsx)("li",{children:"Append-only event store"}),(0,s.jsx)("li",{children:"Compensation events for corrections"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Design systems to append events, not alter them"}),(0,s.jsx)("li",{children:"Use compensation events for error correction instead of modifying past events"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:"interface DomainEvent {\n    eventId: ID! # Immutable identifier\n    aggregateId: ID! # Source aggregate\n    occurredAt: DateTime! # When it happened\n    version: Int! # Event version for evolution\n    eventType: String! # Event type identifier\n}\n\n# Events are append-only\ntype Mutation {\n    # Events are published, not updated\n    publishEvent(event: DomainEventInput!): PublishEventResult!\n\n    # No update or delete operations for events\n    # updateEvent - NOT ALLOWED\n    # deleteEvent - NOT ALLOWED\n}\n"})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Past Tense Naming (Domain Event Modeling)"})}),(0,s.jsx)("td",{children:"Events describe what has already happened"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Event names use past tense"}),(0,s.jsx)("li",{children:"Event names describe completed actions"}),(0,s.jsx)("li",{children:"Event names are specific and clear"}),(0,s.jsx)("li",{children:"Event names follow domain language"}),(0,s.jsx)("li",{children:"Event names avoid ambiguity"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Use clear, unambiguous past tense verbs for event names"}),(0,s.jsx)("li",{children:"Ensure names reflect completed actions, not ongoing processes or commands"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:"# \u2705 Good - Past tense names\ntype CustomerRegistered implements DomainEvent\ntype OrderPlaced implements DomainEvent\ntype PaymentProcessed implements DomainEvent\ntype InventoryAdjusted implements DomainEvent\ntype ProductDiscontinued implements DomainEvent\n\n# \u274c Bad - Present/future tense\ntype CustomerRegistration implements DomainEvent\ntype PlaceOrder implements DomainEvent\ntype ProcessPayment implements DomainEvent\n"})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Base Event Interface (Event Structure Patterns)"})}),(0,s.jsx)("td",{children:"Define common structure for all domain events"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Common event metadata defined"}),(0,s.jsx)("li",{children:"Event identity fields included"}),(0,s.jsx)("li",{children:"Temporal information captured"}),(0,s.jsx)("li",{children:"Causation chain trackable"}),(0,s.jsx)("li",{children:"Source attribution clear"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Establish a consistent base interface for all events"}),(0,s.jsx)("li",{children:"Include essential metadata for traceability and debugging"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:"interface DomainEvent {\n    # Event identity\n    eventId: ID!\n    eventType: String!\n\n    # Source information\n    aggregateId: ID!\n    aggregateType: String!\n    aggregateVersion: Int!\n\n    # Temporal information\n    occurredAt: DateTime!\n\n    # Event evolution\n    eventVersion: Int!\n\n    # Causation tracking\n    causationId: ID # ID of command that caused this event\n    correlationId: ID # ID linking related events\n    # Metadata\n    userId: ID # Who triggered the event\n    source: EventSource! # Where the event originated\n}\n\nenum EventSource {\n    USER_ACTION\n    SYSTEM_PROCESS\n    EXTERNAL_INTEGRATION\n    SCHEDULED_TASK\n    COMPENSATION\n}\n"})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Event Payload Patterns (Event Structure Patterns)"})}),(0,s.jsx)("td",{children:"Structure event data for different use cases"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Event payload size appropriate"}),(0,s.jsx)("li",{children:"Critical data included in payload"}),(0,s.jsx)("li",{children:"Snapshots used for mutable data"}),(0,s.jsx)("li",{children:"References used for stable data"}),(0,s.jsx)("li",{children:"Payload evolution considered"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Decide whether to include full data or references based on consumer needs and data volatility"}),(0,s.jsx)("li",{children:"Use snapshots for mutable data at the time of the event"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:"# Minimal event - just the fact\ntype CustomerRegistered implements DomainEvent {\n    # Base event fields\n    eventId: ID!\n    aggregateId: ID!\n    occurredAt: DateTime!\n\n    # Minimal payload\n    customerId: ID!\n    email: String!\n}\n\n# Rich event - includes relevant context\ntype OrderPlaced implements DomainEvent {\n    # Base event fields\n    eventId: ID!\n    aggregateId: ID!\n    occurredAt: DateTime!\n\n    # Rich payload\n    orderNumber: String!\n    customerId: ID!\n    lineItems: [OrderLineItemSnapshot!]!\n    shippingAddress: AddressSnapshot!\n    totalAmount: Money!\n    paymentMethod: PaymentMethodSnapshot!\n    orderSource: OrderSource!\n}\n\n# Snapshot types for event data\ntype OrderLineItemSnapshot {\n    productSku: String!\n    productName: String!\n    quantity: Int!\n    unitPrice: Money!\n}\n"})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Event Versioning (Event Structure Patterns)"})}),(0,s.jsx)("td",{children:"Handle event schema evolution over time"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Event versioning strategy defined"}),(0,s.jsx)("li",{children:"Backward compatibility maintained"}),(0,s.jsx)("li",{children:"Version migration paths clear"}),(0,s.jsx)("li",{children:"Legacy version support planned"}),(0,s.jsx)("li",{children:"Schema evolution documented"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Plan for how event schemas will evolve without breaking existing consumers"}),(0,s.jsx)("li",{children:"Use version numbers and potentially unions for backward compatibility"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:"# Version 1 of event\ntype CustomerRegisteredV1 implements DomainEvent {\n    eventId: ID!\n    eventVersion: Int! # Always 1\n    customerId: ID!\n    email: String!\n}\n\n# Version 2 adds more fields\ntype CustomerRegisteredV2 implements DomainEvent {\n    eventId: ID!\n    eventVersion: Int! # Always 2\n    customerId: ID!\n    email: String!\n    # New fields in v2\n    customerNumber: String!\n    registrationChannel: RegistrationChannel!\n}\n\n# Union for handling multiple versions\nunion CustomerRegisteredEvent = CustomerRegisteredV1 | CustomerRegisteredV2\n\n# Current version alias\ntype CustomerRegistered implements DomainEvent {\n    eventId: ID!\n    eventVersion: Int!\n    customerId: ID!\n    email: String!\n    customerNumber: String!\n    registrationChannel: RegistrationChannel!\n}\n"})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Event Streams (Event Aggregation Patterns)"})}),(0,s.jsx)("td",{children:"Group related events into streams"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Event streams logically grouped"}),(0,s.jsx)("li",{children:"Stream filtering available"}),(0,s.jsx)("li",{children:"Stream ordering preserved"}),(0,s.jsx)("li",{children:"Stream pagination supported"}),(0,s.jsx)("li",{children:"Stream subscription management"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Define clear logical groupings for events (e.g., by aggregate)"}),(0,s.jsx)("li",{children:"Provide mechanisms for filtering, ordering, and subscribing to event streams"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:"type Subscription {\n    # Stream all events for an aggregate\n    customerEvents(customerId: ID!): CustomerEvent!\n\n    # Stream events by type\n    orderEvents(filter: OrderEventFilter): OrderEvent!\n\n    # Stream events by time range\n    domainEvents(\n        from: DateTime!\n        to: DateTime\n        eventTypes: [String!]\n    ): DomainEvent!\n}\n\nunion CustomerEvent = CustomerRegistered | CustomerUpdated | CustomerDeactivated\n\nunion OrderEvent =\n  OrderPlaced\n| OrderConfirmed\n| OrderShipped\n| OrderDelivered\n| OrderCancelled\n\ninput OrderEventFilter {\n    customerId: ID\n    orderStatus: [OrderStatus!]\n    dateRange: DateRangeInput\n}\n"})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Event Projections (Event Aggregation Patterns)"})}),(0,s.jsx)("td",{children:"Create read models from event streams"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Projections built from events"}),(0,s.jsx)("li",{children:"Projection state clearly defined"}),(0,s.jsx)("li",{children:"Projection versioning handled"}),(0,s.jsx)("li",{children:"Projection rebuilding supported"}),(0,s.jsx)("li",{children:"Projection consistency monitored"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Design projections to be eventually consistent, tailored for specific query needs"}),(0,s.jsx)("li",{children:"Ensure projections can be rebuilt from the event stream"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:"# Event-sourced aggregate state\ntype CustomerProjection {\n    customerId: ID!\n    currentState: CustomerState!\n    version: Int!\n    lastUpdated: DateTime!\n\n    # Projected from events\n    registrationDate: DateTime!\n    totalOrders: Int!\n    totalSpent: Money!\n    loyaltyLevel: LoyaltyLevel!\n\n    # Event history\n    eventHistory: [CustomerEvent!]!\n}\n\ntype CustomerState {\n    customerNumber: String!\n    profile: CustomerProfile!\n    isActive: Boolean!\n    preferences: CustomerPreferences!\n}\n\n# Query projections\ntype Query {\n    customerProjection(customerId: ID!): CustomerProjection\n    customerProjections(\n        filter: CustomerProjectionFilter\n        orderBy: CustomerProjectionSort\n    ): [CustomerProjection!]!\n}\n\ninput CustomerProjectionFilter {\n    isActive: Boolean\n    loyaltyLevel: [LoyaltyLevel!]\n    registeredAfter: DateTime\n    totalSpentRange: MoneyRangeInput\n}\n"})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Event Sagas (Event Aggregation Patterns)"})}),(0,s.jsx)("td",{children:"Coordinate long-running business processes"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Saga state explicitly modeled"}),(0,s.jsx)("li",{children:"Saga steps clearly defined"}),(0,s.jsx)("li",{children:"Compensation actions tracked"}),(0,s.jsx)("li",{children:"Saga timeout handling"}),(0,s.jsx)("li",{children:"Saga failure recovery"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Model the state of the saga explicitly to track progress and handle failures"}),(0,s.jsx)("li",{children:"Define clear compensation actions for when a saga fails"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:"# Saga state tracking\ntype OrderFulfillmentSaga {\n    sagaId: ID!\n    orderId: ID!\n    currentStep: SagaStep!\n    status: SagaStatus!\n    startedAt: DateTime!\n    completedAt: DateTime\n\n    # Saga state\n    inventoryReserved: Boolean!\n    paymentProcessed: Boolean!\n    shippingArranged: Boolean!\n\n    # Compensation tracking\n    compensationActions: [CompensationAction!]!\n}\n\nenum SagaStep {\n    RESERVE_INVENTORY\n    PROCESS_PAYMENT\n    ARRANGE_SHIPPING\n    COMPLETE_ORDER\n}\n\nenum SagaStatus {\n    RUNNING\n    COMPLETED\n    FAILED\n    COMPENSATING\n    COMPENSATED\n}\n\ntype CompensationAction {\n    actionType: String!\n    executedAt: DateTime!\n    reason: String!\n}\n\n# Saga coordination\ntype Mutation {\n    startOrderFulfillmentSaga(orderId: ID!): StartSagaResult!\n    compensateOrderFulfillment(sagaId: ID!, reason: String!): CompensationResult!\n}\n"})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Event Publishing (Cross-Context Event Patterns)"})}),(0,s.jsx)("td",{children:"Publish events for consumption by other contexts"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Event publishing mechanism defined"}),(0,s.jsx)("li",{children:"Event routing configured"}),(0,s.jsx)("li",{children:"Target contexts identified"}),(0,s.jsx)("li",{children:"Publishing reliability ensured"}),(0,s.jsx)("li",{children:"Event ordering preserved"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Define clear contracts for published events"}),(0,s.jsx)("li",{children:"Ensure reliable delivery and proper routing to interested consumers"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:"# Publishing context\ntype Mutation {\n    placeOrder(input: PlaceOrderInput!): PlaceOrderPayload!\n    # Publishes OrderPlaced event\n}\n\ntype Subscription {\n    # Publish events to subscribers\n    orderEvents: OrderEvent!\n    inventoryEvents: InventoryEvent!\n    paymentEvents: PaymentEvent!\n}\n\n# Event metadata for routing\ntype OrderPlaced implements DomainEvent {\n    eventId: ID!\n    aggregateId: ID!\n\n    # Routing information\n    publishedTo: [String!]! # Target contexts\n    routingKey: String! # Message routing\n    # Business data\n    orderNumber: String!\n    customerId: ID!\n    totalAmount: Money!\n}\n"})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Event Consumption (Cross-Context Event Patterns)"})}),(0,s.jsx)("td",{children:"Consume events from other contexts"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Event subscription configured"}),(0,s.jsx)("li",{children:"Event handlers implemented"}),(0,s.jsx)("li",{children:"Error handling defined"}),(0,s.jsx)("li",{children:"Retry logic implemented"}),(0,s.jsx)("li",{children:"Dead letter handling"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Implement robust error handling and retry mechanisms for event consumption"}),(0,s.jsx)("li",{children:"Consider dead-letter queues for events that cannot be processed"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:"# Consuming context\ntype Subscription {\n    # Subscribe to external events\n    externalOrderEvents: OrderEvent!\n    externalCustomerEvents: CustomerEvent!\n}\n\n# Event handlers\ntype Mutation {\n    handleOrderPlaced(event: OrderPlacedInput!): HandleEventResult!\n    handleCustomerRegistered(event: CustomerRegisteredInput!): HandleEventResult!\n}\n\ntype HandleEventResult {\n    success: Boolean!\n    eventId: ID!\n    processedAt: DateTime!\n    errors: [EventProcessingError!]!\n}\n\ntype EventProcessingError {\n    code: String!\n    message: String!\n    retryable: Boolean!\n}\n"})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Event Translation (Cross-Context Event Patterns)"})}),(0,s.jsx)("td",{children:"Translate events between context boundaries"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Event translation rules defined"}),(0,s.jsx)("li",{children:"Data mapping documented"}),(0,s.jsx)("li",{children:"Translation errors handled"}),(0,s.jsx)("li",{children:"Schema compatibility maintained"}),(0,s.jsx)("li",{children:"Translation testing comprehensive"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Define clear translation rules and handle potential data mismatches"}),(0,s.jsx)("li",{children:"Ensure robust error handling for translation failures"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:"# External event format\ntype ExternalOrderPlaced {\n    id: String!\n    customer_id: String!\n    order_total: Float!\n    currency: String!\n    timestamp: String!\n}\n\n# Internal event format\ntype OrderPlaced implements DomainEvent {\n    eventId: ID!\n    aggregateId: ID!\n    occurredAt: DateTime!\n\n    # Translated data\n    orderNumber: String!\n    customerId: ID!\n    totalAmount: Money!\n}\n\n# Translation service\ntype Mutation {\n    translateExternalEvent(externalEvent: ExternalEventInput!): TranslationResult!\n}\n\ntype TranslationResult {\n    internalEvent: DomainEvent\n    translationErrors: [TranslationError!]!\n}\n"})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Event Store Design (Event Sourcing Patterns)"})}),(0,s.jsx)("td",{children:"Store events as the source of truth"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Event storage mechanism defined"}),(0,s.jsx)("li",{children:"Event retrieval patterns supported"}),(0,s.jsx)("li",{children:"Concurrency conflicts handled"}),(0,s.jsx)("li",{children:"Event ordering guaranteed"}),(0,s.jsx)("li",{children:"Storage scalability considered"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Choose an event store that supports immutable appends and efficient retrieval"}),(0,s.jsx)("li",{children:"Address concurrency and ensure strict event ordering"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:"type EventStore {\n    # Event storage\n    appendEvent(event: DomainEventInput!): AppendResult!\n\n    # Event retrieval\n    getEvents(aggregateId: ID!, fromVersion: Int, toVersion: Int): [DomainEvent!]!\n\n    getEventsByType(\n        eventType: String!\n        from: DateTime\n        to: DateTime\n    ): [DomainEvent!]!\n}\n\ntype AppendResult {\n    success: Boolean!\n    eventId: ID!\n    version: Int!\n    errors: [EventStoreError!]!\n}\n\ntype EventStoreError {\n    code: EventStoreErrorCode!\n    message: String!\n}\n\nenum EventStoreErrorCode {\n    CONCURRENCY_CONFLICT\n    INVALID_EVENT\n    STORAGE_ERROR\n    SERIALIZATION_ERROR\n}\n"})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Snapshot Patterns (Event Sourcing Patterns)"})}),(0,s.jsx)("td",{children:"Optimize event replay with snapshots"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Snapshot strategy defined"}),(0,s.jsx)("li",{children:"Snapshot frequency optimized"}),(0,s.jsx)("li",{children:"Snapshot consistency ensured"}),(0,s.jsx)("li",{children:"Snapshot storage managed"}),(0,s.jsx)("li",{children:"Rebuild performance monitored"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Determine optimal snapshot frequency to balance storage vs. replay performance"}),(0,s.jsx)("li",{children:"Ensure snapshots are consistent with the event stream"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:"type AggregateSnapshot {\n    aggregateId: ID!\n    aggregateType: String!\n    version: Int!\n    snapshotData: JSON!\n    createdAt: DateTime!\n}\n\ntype Query {\n    # Get latest snapshot\n    getSnapshot(aggregateId: ID!): AggregateSnapshot\n\n    # Rebuild from events\n    rebuildAggregate(\n        aggregateId: ID!\n        fromSnapshot: Boolean = true\n    ): AggregateRebuildResult!\n}\n\ntype AggregateRebuildResult {\n    aggregateId: ID!\n    finalVersion: Int!\n    eventsProcessed: Int!\n    snapshotUsed: Boolean!\n    rebuildTime: Duration!\n}\n"})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Event Metrics (Event Monitoring and Observability)"})}),(0,s.jsx)("td",{children:"Monitor event processing and performance"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Event volume monitoring"}),(0,s.jsx)("li",{children:"Performance metrics tracked"}),(0,s.jsx)("li",{children:"Error rates monitored"}),(0,s.jsx)("li",{children:"Business metrics included"}),(0,s.jsx)("li",{children:"Alerting thresholds defined"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Define key metrics for event volume, performance, and errors"}),(0,s.jsx)("li",{children:"Set up alerting for critical thresholds"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:"type EventMetrics {\n    # Volume metrics\n    eventsPublished: Int!\n    eventsConsumed: Int!\n    eventsPerSecond: Float!\n\n    # Performance metrics\n    averageProcessingTime: Duration!\n    processingLatency: Duration!\n\n    # Error metrics\n    processingErrors: Int!\n    errorRate: Float!\n    deadLetterCount: Int!\n\n    # Business metrics\n    eventsByType: [EventTypeMetric!]!\n    eventsBySource: [EventSourceMetric!]!\n}\n\ntype EventTypeMetric {\n    eventType: String!\n    count: Int!\n    averageSize: Int!\n    errorRate: Float!\n}\n\ntype Query {\n    eventMetrics(\n        timeRange: DateRangeInput!\n        aggregateBy: MetricAggregation!\n    ): EventMetrics!\n}\n"})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Event Tracing (Event Monitoring and Observability)"})}),(0,s.jsx)("td",{children:"Trace event flows across contexts"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Event tracing implemented"}),(0,s.jsx)("li",{children:"Correlation IDs tracked"}),(0,s.jsx)("li",{children:"Cross-context flows visible"}),(0,s.jsx)("li",{children:"Performance bottlenecks identified"}),(0,s.jsx)("li",{children:"Trace data retention managed"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Implement correlation IDs to trace events across multiple services"}),(0,s.jsx)("li",{children:"Visualize event flows to identify bottlenecks and issues"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:"type EventTrace {\n    traceId: ID!\n    correlationId: ID!\n    events: [TracedEvent!]!\n    totalDuration: Duration!\n    contextTransitions: Int!\n}\n\ntype TracedEvent {\n    eventId: ID!\n    eventType: String!\n    context: String!\n    timestamp: DateTime!\n    processingDuration: Duration!\n    causedBy: ID # Previous event in chain\n    causedEvents: [ID!]! # Subsequent events\n}\n\ntype Query {\n    traceEvents(correlationId: ID!, traceId: ID): EventTrace!\n\n    findEventTraces(\n        aggregateId: ID\n        eventType: String\n        timeRange: DateRangeInput!\n    ): [EventTrace!]!\n}\n"})})})]})]})]})})]})}),(0,s.jsx)(l.A,{value:"schema",label:"Schema",children:(0,s.jsxs)(d.A,{queryString:"secondary",children:[(0,s.jsx)(l.A,{value:"schema-subgraph-relationships",label:"Subgraph Relationships",attributes:{className:"tabs__vertical"},children:(0,s.jsxs)("table",{class:"text_vertical",children:[(0,s.jsx)("thead",{children:(0,s.jsxs)("tr",{children:[(0,s.jsx)("th",{children:"DDD Concept"}),(0,s.jsx)("th",{children:"Definition"}),(0,s.jsx)("th",{children:"Characteristics"}),(0,s.jsx)("th",{children:"Considerations"}),(0,s.jsx)("th",{children:"Example"})]})}),(0,s.jsxs)("tbody",{children:[(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Cross-Subgraph Relationships"})}),(0,s.jsx)("td",{children:"Fundamental to GraphQL federation, enabling distributed domain models while maintaining bounded context integrity"}),(0,s.jsx)("td",{children:"Patterns for modeling relationships that span multiple subgraphs in DDD-compliant ways"}),(0,s.jsx)("td",{children:"Ensuring bounded context integrity, effective communication between subgraphs"}),(0,s.jsx)("td",{children:(0,s.jsx)(n.p,{children:"See individual relationship patterns for examples."})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Reference Relationships"})}),(0,s.jsx)("td",{children:"One entity references another entity by stable identifier"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"References use stable, immutable identifiers"}),(0,s.jsx)("li",{children:"Referenced entities are owned by appropriate contexts"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Is the referenced entity owned by another bounded context?"}),(0,s.jsx)("li",{children:"Is the relationship stable over time?"}),(0,s.jsx)("li",{children:"Do you need immediate access to referenced entity data?"}),(0,s.jsx)("li",{children:"Reference integrity is handled at application level"}),(0,s.jsx)("li",{children:"Broken references are handled gracefully"}),(0,s.jsx)("li",{children:"Reference relationships are documented"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:'# Order subgraph - owns Order entity\ntype Order @key(fields: "id") {\n    id: ID!\n    orderNumber: String!\n    customerId: ID! # Reference to Customer entity\n    productIds: [ID!]! # References to Product entities\n    status: OrderStatus!\n    totalAmount: Money!\n}\n\n# Customer subgraph - owns Customer entity\ntype Customer @key(fields: "id") {\n    id: ID!\n    customerNumber: String!\n    profile: CustomerProfile!\n}\n\n# Product subgraph - owns Product entity\ntype Product @key(fields: "sku") {\n    sku: String!\n    name: String!\n    price: Money!\n}\n'})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Federated Navigation Relationships"})}),(0,s.jsx)("td",{children:"Enable rich navigation across subgraph boundaries using federation"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Federation keys are properly defined"}),(0,s.jsx)("li",{children:"External fields are marked correctly"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Navigation relationships are bidirectional where needed"}),(0,s.jsx)("li",{children:"Performance implications are considered"}),(0,s.jsx)("li",{children:"Error handling for unavailable services"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:'# Order subgraph\ntype Order @key(fields: "id") {\n    id: ID!\n    orderNumber: String!\n    customerId: ID!\n\n    # Federated navigation to Customer\n    customer: Customer!\n\n    # Federated navigation to Products\n    lineItems: [LineItem!]!\n}\n\ntype LineItem {\n    productSku: String!\n    quantity: Int!\n    unitPrice: Money!\n\n    # Federated navigation to Product\n    product: Product!\n}\n\n# Customer subgraph\ntype Customer @key(fields: "id") {\n    id: ID!\n    customerNumber: String!\n    profile: CustomerProfile!\n}\n\n# Extend Customer with order-related data\nextend type Customer @key(fields: "id") {\n    id: ID! @external\n\n    # Back-navigation to orders\n    orders: [Order!]!\n    recentOrders: [Order!]!\n    orderHistory: OrderHistory!\n}\n\n# Product subgraph\ntype Product @key(fields: "sku") {\n    sku: String!\n    name: String!\n    description: String!\n    price: Money!\n}\n'})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Aggregated Relationships"})}),(0,s.jsx)("td",{children:"Provide aggregated views of cross-subgraph data"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Aggregations are computed in owning context"}),(0,s.jsx)("li",{children:"Aggregation data is kept up-to-date"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Performance of aggregation queries is acceptable"}),(0,s.jsx)("li",{children:"Aggregation consistency is managed"}),(0,s.jsx)("li",{children:"Aggregation evolution is planned"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:'# Customer subgraph\ntype Customer @key(fields: "id") {\n    id: ID!\n    profile: CustomerProfile!\n}\n\n# Order subgraph extends Customer with order aggregations\nextend type Customer @key(fields: "id") {\n    id: ID! @external\n\n    # Aggregated order data\n    orderStatistics: OrderStatistics!\n    loyaltyMetrics: LoyaltyMetrics!\n}\n\ntype OrderStatistics {\n    totalOrders: Int!\n    totalSpent: Money!\n    averageOrderValue: Money!\n    lastOrderDate: DateTime!\n\n    # Time-based aggregations\n    ordersThisYear: Int!\n    spentThisYear: Money!\n    ordersThisMonth: Int!\n    spentThisMonth: Money!\n}\n\ntype LoyaltyMetrics {\n    loyaltyPoints: Int!\n    loyaltyLevel: LoyaltyLevel!\n    nextLevelRequirement: Int!\n    lifetimeValue: Money!\n}\n\n# Product subgraph extends Customer with product preferences\nextend type Customer @key(fields: "id") {\n    id: ID! @external\n\n    # Product-related aggregations\n    favoriteCategories: [ProductCategory!]!\n    recommendedProducts: [Product!]!\n    purchaseHistory: ProductPurchaseHistory!\n}\n'})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Event-Driven Relationships"})}),(0,s.jsx)("td",{children:"Maintain relationship consistency through domain events"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Events represent meaningful business occurrences"}),(0,s.jsx)("li",{children:"Event schemas are stable and versioned"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Event processing is idempotent"}),(0,s.jsx)("li",{children:"Event ordering is handled correctly"}),(0,s.jsx)("li",{children:"Event failure recovery is implemented"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:'# Customer subgraph publishes events\ntype Subscription {\n    customerEvents: CustomerEvent!\n}\n\nunion CustomerEvent = CustomerRegistered | CustomerUpdated | CustomerDeactivated\n\ntype CustomerRegistered implements DomainEvent {\n    eventId: ID!\n    customerId: ID!\n    customerNumber: String!\n    email: String!\n    registrationDate: DateTime!\n}\n\n# Order subgraph consumes customer events\ntype Mutation {\n    # Event handlers (internal)\n    handleCustomerRegistered(event: CustomerRegisteredInput!): HandleEventResult!\n    handleCustomerUpdated(event: CustomerUpdatedInput!): HandleEventResult!\n}\n\n# Order subgraph maintains customer snapshot\ntype CustomerSnapshot {\n    customerId: ID!\n    customerNumber: String!\n    email: String!\n    isActive: Boolean!\n    lastSyncedAt: DateTime!\n}\n\ntype Order @key(fields: "id") {\n    id: ID!\n    customerId: ID!\n\n    # Reference to local customer snapshot\n    customerSnapshot: CustomerSnapshot!\n\n    # Federated reference to live customer data\n    customer: Customer!\n}\n'})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Conditional Relationships"})}),(0,s.jsx)("td",{children:"Relationships that exist only under certain conditions"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Conditions are clearly documented"}),(0,s.jsx)("li",{children:"Conditional logic is consistent"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Error handling for invalid conditions"}),(0,s.jsx)("li",{children:"Performance impact of conditions considered"}),(0,s.jsx)("li",{children:"Conditions are testable"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:'type Customer @key(fields: "id") {\n    id: ID!\n    profile: CustomerProfile!\n    status: CustomerStatus!\n}\n\n# Order subgraph\nextend type Customer @key(fields: "id") {\n    id: ID! @external\n    status: CustomerStatus! @external\n\n    # Conditional relationships based on status\n    activeOrders: [Order!]! # Only for active customers\n    orderHistory: OrderHistory # Only for customers with orders\n    loyaltyProgram: LoyaltyProgram # Only for eligible customers\n}\n\ntype Query {\n    # Conditional queries\n    customerOrders(customerId: ID!, includeInactive: Boolean = false): [Order!]!\n}\n\n# Resolver logic handles conditions\n'})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Temporal Relationships"})}),(0,s.jsx)("td",{children:"Relationships that change over time"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Temporal boundaries are clearly defined"}),(0,s.jsx)("li",{children:"Historical data is preserved"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Time-based queries are efficient"}),(0,s.jsx)("li",{children:"Temporal consistency is maintained"}),(0,s.jsx)("li",{children:"Timezone handling is correct"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:'type Customer @key(fields: "id") {\n    id: ID!\n    profile: CustomerProfile!\n}\n\n# Subscription subgraph\nextend type Customer @key(fields: "id") {\n    id: ID! @external\n\n    # Current subscription\n    currentSubscription: Subscription\n\n    # Historical subscriptions\n    subscriptionHistory: [Subscription!]!\n\n    # Time-based queries\n    subscriptionAt(date: DateTime!): Subscription\n    subscriptionsDuring(period: DateRange!): [Subscription!]!\n}\n\ntype Subscription @key(fields: "id") {\n    id: ID!\n    customerId: ID!\n    plan: SubscriptionPlan!\n\n    # Temporal information\n    startDate: DateTime!\n    endDate: DateTime\n    status: SubscriptionStatus!\n\n    # Temporal relationships\n    previousSubscription: Subscription\n    nextSubscription: Subscription\n}\n'})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Hierarchical Relationships"})}),(0,s.jsx)("td",{children:"Parent-child relationships across subgraphs"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Hierarchy levels are clearly defined"}),(0,s.jsx)("li",{children:"Parent-child relationships are consistent"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Circular references are prevented"}),(0,s.jsx)("li",{children:"Hierarchy navigation is efficient"}),(0,s.jsx)("li",{children:"Hierarchy changes are handled correctly"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:'# Organization subgraph\ntype Organization @key(fields: "id") {\n    id: ID!\n    name: String!\n    type: OrganizationType!\n}\n\n# Customer subgraph\ntype Customer @key(fields: "id") {\n    id: ID!\n    profile: CustomerProfile!\n    organizationId: ID # Reference to organization\n}\n\n# Extend Organization with customer relationships\nextend type Organization @key(fields: "id") {\n    id: ID! @external\n\n    # Hierarchical customer relationships\n    customers: [Customer!]!\n    primaryContact: Customer\n    billingContact: Customer\n\n    # Aggregated customer data\n    customerCount: Int!\n    totalCustomerValue: Money!\n}\n\n# Extend Customer with organization context\nextend type Customer @key(fields: "id") {\n    id: ID! @external\n\n    # Parent organization\n    organization: Organization\n\n    # Role within organization\n    organizationRole: OrganizationRole\n    permissions: [Permission!]!\n}\n'})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Data Locality Optimization"})}),(0,s.jsx)("td",{children:"Optimize data placement for common query patterns"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Frequently accessed data is co-located"}),(0,s.jsx)("li",{children:"Data duplication is minimized"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Data consistency is maintained"}),(0,s.jsx)("li",{children:"Update mechanisms are in place"}),(0,s.jsx)("li",{children:"Performance gains are measured"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:'# Order subgraph includes frequently accessed customer data\ntype Order @key(fields: "id") {\n    id: ID!\n    orderNumber: String!\n    customerId: ID!\n\n    # Local customer data for performance\n    customerSnapshot: CustomerSnapshot!\n\n    # Full customer data via federation\n    customer: Customer! @provides(fields: "customerNumber email")\n}\n\ntype CustomerSnapshot {\n    customerNumber: String!\n    email: String!\n    name: String!\n    loyaltyLevel: LoyaltyLevel!\n    # Snapshot of frequently needed customer data\n}\n'})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Batch Loading Patterns"})}),(0,s.jsx)("td",{children:"Optimize cross-subgraph data loading"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Batch loading is implemented for N+1 problems"}),(0,s.jsx)("li",{children:"Batch sizes are optimized"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Caching is implemented where appropriate"}),(0,s.jsx)("li",{children:"Error handling for batch failures"}),(0,s.jsx)("li",{children:"Performance monitoring is in place"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:'# Product subgraph\ntype Product @key(fields: "sku") {\n    sku: String!\n    name: String!\n    price: Money!\n}\n\n# Order subgraph with batch loading\ntype Order @key(fields: "id") {\n    id: ID!\n    lineItems: [LineItem!]!\n}\n\ntype LineItem {\n    productSku: String!\n    quantity: Int!\n\n    # Batch loaded product data\n    product: Product!\n}\n\n# Resolver implements DataLoader pattern for batch loading\n'})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Caching Strategies"})}),(0,s.jsx)("td",{children:"Cache cross-subgraph relationship data"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Cache invalidation strategy is defined"}),(0,s.jsx)("li",{children:"Cache TTL is appropriate"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Cache consistency is maintained"}),(0,s.jsx)("li",{children:"Cache performance is monitored"}),(0,s.jsx)("li",{children:"Cache failures are handled gracefully"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:'type Customer @key(fields: "id") {\n    id: ID!\n    profile: CustomerProfile!\n\n    # Cached relationship data\n    recentOrders: [Order!]! # Cached for performance\n    orderSummary: OrderSummary! # Pre-computed and cached\n}\n\ntype OrderSummary {\n    totalOrders: Int!\n    totalSpent: Money!\n    lastOrderDate: DateTime!\n\n    # Cache metadata\n    lastUpdated: DateTime!\n    cacheExpiry: DateTime!\n}\n'})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Graceful Degradation"})}),(0,s.jsx)("td",{children:"Handle subgraph unavailability gracefully"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Fallback data is available"}),(0,s.jsx)("li",{children:"Service unavailability is handled"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Error messages are informative"}),(0,s.jsx)("li",{children:"Partial data is clearly indicated"}),(0,s.jsx)("li",{children:"Recovery mechanisms are in place"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:'type Customer @key(fields: "id") {\n    id: ID!\n    profile: CustomerProfile!\n}\n\nextend type Customer @key(fields: "id") {\n    id: ID! @external\n\n    # May return null if order service unavailable\n    orders: [Order!]\n\n    # Cached/snapshot data always available\n    orderSummary: OrderSummary!\n}\n\ntype OrderSummary {\n    totalOrders: Int!\n    lastOrderDate: DateTime!\n    isLive: Boolean! # Indicates if data is current\n    lastUpdated: DateTime!\n}\n'})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Circuit Breaker Pattern"})}),(0,s.jsx)("td",{children:"Prevent cascade failures in cross-subgraph calls"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Circuit breaker thresholds are configured"}),(0,s.jsx)("li",{children:"Service health is monitored"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Fallback behavior is defined"}),(0,s.jsx)("li",{children:"Recovery testing is performed"}),(0,s.jsx)("li",{children:"Alerts are configured for service issues"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:'type Customer @key(fields: "id") {\n    id: ID!\n    profile: CustomerProfile!\n}\n\nextend type Customer @key(fields: "id") {\n    id: ID! @external\n\n    # Protected by circuit breaker\n    orders: [Order!]\n\n    # Service health indicator\n    orderServiceStatus: ServiceStatus!\n}\n\nenum ServiceStatus {\n    AVAILABLE\n    DEGRADED\n    UNAVAILABLE\n}\n'})})})]})]})]})}),(0,s.jsx)(l.A,{value:"schema-naming-conventions",label:"Naming Conventions",children:(0,s.jsxs)("table",{children:[(0,s.jsx)("thead",{children:(0,s.jsxs)("tr",{children:[(0,s.jsx)("th",{children:"DDD Concept"}),(0,s.jsx)("th",{children:"Definition"}),(0,s.jsx)("th",{children:"Characteristics"}),(0,s.jsx)("th",{children:"Considerations"}),(0,s.jsx)("th",{children:"Example"})]})}),(0,s.jsxs)("tbody",{children:[(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Ubiquitous Language"})}),(0,s.jsx)("td",{children:"A common language shared between domain experts and developers, reflected in code and schema"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Type names must use domain terminology, not technical terms"}),(0,s.jsx)("li",{children:"Names match domain expert vocabulary"}),(0,s.jsx)("li",{children:"No technical abbreviations in public schema"}),(0,s.jsx)("li",{children:"Consistent terminology across all types"}),(0,s.jsx)("li",{children:"Names are meaningful to business users"}),(0,s.jsx)("li",{children:"Domain concepts clearly expressed"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"All type names use business terminology"}),(0,s.jsx)("li",{children:"Ensures clarity and maintainability"}),(0,s.jsx)("li",{children:"Reduces miscommunication between teams"}),(0,s.jsx)("li",{children:"Supports long-term schema evolution"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:"# \u2705 Good - Uses business language\ntype Customer {\n    customerNumber: String!\n    loyaltyLevel: LoyaltyLevel!\n    creditLimit: Money!\n}\n\ntype Order {\n    orderNumber: String!\n    fulfillmentStatus: FulfillmentStatus!\n    shippingMethod: ShippingMethod!\n}\n\n# \u274c Bad - Uses technical language\ntype CustomerRecord {\n    custId: String!\n    lvl: Int!\n    creditAmt: Float!\n}\n"})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Clarity and Readability"})}),(0,s.jsx)("td",{children:"Names should be self-documenting and unambiguous"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Names are descriptive and specific"}),(0,s.jsx)("li",{children:"No ambiguous abbreviations"}),(0,s.jsxs)("li",{children:["Boolean fields clearly indicate true/false meaning (e.g., ",(0,s.jsx)(n.code,{children:"isAvailableForPurchase"}),")"]}),(0,s.jsxs)("li",{children:["Collection fields indicate plurality (e.g., ",(0,s.jsx)(n.code,{children:"lineItems"}),")"]}),(0,s.jsx)("li",{children:"Purpose is clear from name alone"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Improves understanding for all schema users"}),(0,s.jsx)("li",{children:"Reduces the need for external documentation"}),(0,s.jsx)("li",{children:"Facilitates easier debugging and maintenance"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:"# \u2705 Good - Clear and specific\ntype ProductCatalogEntry {\n    productSku: String!\n    displayName: String!\n    shortDescription: String!\n    detailedDescription: String!\n    isAvailableForPurchase: Boolean!\n}\n\n# \u274c Bad - Ambiguous and unclear\ntype Product {\n    id: String!\n    name: String!\n    desc: String!\n    info: String!\n    flag: Boolean!\n}\n"})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Consistency"})}),(0,s.jsx)("td",{children:"Apply naming patterns consistently across the entire schema"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsxs)("li",{children:["ID fields follow consistent pattern (e.g., ",(0,s.jsx)(n.code,{children:"customerId"}),", ",(0,s.jsx)(n.code,{children:"orderId"}),")"]}),(0,s.jsxs)("li",{children:["Date fields use consistent suffixes (e.g., ",(0,s.jsx)(n.code,{children:"registrationDate"}),", ",(0,s.jsx)(n.code,{children:"lastLoginDate"}),")"]}),(0,s.jsx)("li",{children:"Similar concepts use similar naming"}),(0,s.jsx)("li",{children:"Patterns applied across all types"}),(0,s.jsx)("li",{children:"Exceptions are documented"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Ensures predictability and reduces cognitive load"}),(0,s.jsx)("li",{children:"Streamlines development and integration"}),(0,s.jsx)("li",{children:"Supports automated tooling and code generation"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:"# \u2705 Good - Consistent patterns\ntype Customer {\n    customerId: ID!\n    customerNumber: String!\n    registrationDate: DateTime!\n    lastLoginDate: DateTime!\n}\n\ntype Order {\n    orderId: ID!\n    orderNumber: String!\n    placementDate: DateTime!\n    lastModifiedDate: DateTime!\n}\n\n# \u274c Bad - Inconsistent patterns\ntype Customer {\n    id: ID!\n    customerNum: String!\n    registered: DateTime!\n    lastLogin: DateTime!\n}\n"})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Entity Types Naming"})}),(0,s.jsx)("td",{children:"Use singular nouns in PascalCase for entity types"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Singular noun form"}),(0,s.jsxs)("li",{children:["PascalCase formatting (e.g., ",(0,s.jsx)(n.code,{children:"Customer"}),", ",(0,s.jsx)(n.code,{children:"Product"}),")"]}),(0,s.jsx)("li",{children:"No prefixes or suffixes unless necessary for compound names"}),(0,s.jsxs)("li",{children:["Compound names clearly joined (e.g., ",(0,s.jsx)(n.code,{children:"CustomerProfile"}),")"]}),(0,s.jsx)("li",{children:"Names reflect domain concepts"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Clearly identifies core domain entities"}),(0,s.jsx)("li",{children:"Aligns with common GraphQL type naming conventions"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:'# Entity types\ntype Customer @key(fields: "id") {\n    id: ID!\n    customerNumber: String!\n}\n\ntype Product @key(fields: "sku") {\n    sku: String!\n    name: String!\n}\n\n# Compound entity names\ntype CustomerProfile {\n    personalInfo: PersonalInfo!\n    contactInfo: ContactInfo!\n}\n'})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Value Object Types Naming"})}),(0,s.jsx)("td",{children:"Use descriptive nouns that indicate the value's purpose"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsxs)("li",{children:["Names indicate value purpose (e.g., ",(0,s.jsx)(n.code,{children:"Money"}),", ",(0,s.jsx)(n.code,{children:"Address"}),")"]}),(0,s.jsx)("li",{children:'No "Value" or "Object" suffixes'}),(0,s.jsx)("li",{children:"Descriptive and specific"}),(0,s.jsx)("li",{children:"Consistent with domain language"}),(0,s.jsx)("li",{children:"Clear semantic meaning"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Distinguishes value objects from entities"}),(0,s.jsx)("li",{children:"Promotes reusability of common data structures"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:"# Value objects\ntype Money {\n    amount: Decimal!\n    currency: Currency!\n}\n\ntype Address {\n    street: String!\n    city: String!\n    postalCode: String!\n    country: String!\n}\n\n# Measurement value objects\ntype Weight {\n    value: Decimal!\n    unit: WeightUnit!\n}\n"})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Enum Types Naming"})}),(0,s.jsx)("td",{children:"Use singular nouns with descriptive suffixes when needed"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsxs)("li",{children:["Enum type names are singular (e.g., ",(0,s.jsx)(n.code,{children:"Currency"}),", ",(0,s.jsx)(n.code,{children:"OrderStatus"}),")"]}),(0,s.jsxs)("li",{children:["Enum values are UPPER_SNAKE_CASE (e.g., ",(0,s.jsx)(n.code,{children:"USD"}),", ",(0,s.jsx)(n.code,{children:"PENDING_PAYMENT"}),")"]}),(0,s.jsx)("li",{children:"Values are descriptive and clear"}),(0,s.jsx)("li",{children:"No redundant prefixes in values"}),(0,s.jsx)("li",{children:"Logical grouping of related values"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Provides clear, self-documenting lists of discrete values"}),(0,s.jsx)("li",{children:"Ensures consistent representation of fixed choices"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:"# Simple enums\nenum Currency {\n    USD\n    EUR\n    GBP\n}\n\nenum OrderStatus {\n    DRAFT\n    PENDING_PAYMENT\n    CONFIRMED\n}\n\n# Enums with descriptive suffixes\nenum PaymentMethod {\n    CREDIT_CARD\n    DEBIT_CARD\n}\n"})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Interface Types Naming"})}),(0,s.jsx)("td",{children:"Use descriptive names that indicate the common contract"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsxs)("li",{children:["Names indicate common behavior or contract (e.g., ",(0,s.jsx)(n.code,{children:"Identifiable"}),", ",(0,s.jsx)(n.code,{children:"Purchasable"}),")"]}),(0,s.jsxs)("li",{children:["Use adjective forms when appropriate (e.g., ",(0,s.jsx)(n.code,{children:"Timestamped"}),")"]}),(0,s.jsx)("li",{children:"Clear semantic meaning"}),(0,s.jsx)("li",{children:'No "Interface" suffix'}),(0,s.jsx)("li",{children:"Focused on single responsibility"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Defines shared behaviors and structures across types"}),(0,s.jsx)("li",{children:"Promotes schema extensibility and polymorphism"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:"# Domain interfaces\ninterface DomainEvent {\n    eventId: ID!\n    aggregateId: ID!\n    occurredAt: DateTime!\n}\n\ninterface Identifiable {\n    id: ID!\n}\n\n# Business capability interfaces\ninterface Purchasable {\n    price: Money!\n    isAvailable: Boolean!\n}\n"})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Union Types Naming"})}),(0,s.jsx)("td",{children:"Use descriptive names that indicate the union purpose"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsxs)("li",{children:["Names indicate union purpose (e.g., ",(0,s.jsx)(n.code,{children:"OrderEvent"}),", ",(0,s.jsx)(n.code,{children:"SearchResult"}),")"]}),(0,s.jsx)("li",{children:"Clear semantic grouping"}),(0,s.jsx)("li",{children:'No "Union" suffix'}),(0,s.jsx)("li",{children:"Logical member types"}),(0,s.jsx)("li",{children:"Consistent with domain concepts"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Allows for returning multiple possible types for a single field"}),(0,s.jsx)("li",{children:"Enhances flexibility in representing diverse but related data"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:"# Event unions\nunion OrderEvent = OrderPlaced | OrderShipped | OrderDelivered\n\n# Search result unions\nunion SearchResult = Product | Category | Brand\n\n# Error unions\nunion ValidationError = FieldError | BusinessRuleError\n"})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Scalar Fields Naming"})}),(0,s.jsx)("td",{children:"Use camelCase with descriptive names"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsxs)("li",{children:["camelCase formatting (e.g., ",(0,s.jsx)(n.code,{children:"firstName"}),", ",(0,s.jsx)(n.code,{children:"totalOrderCount"}),")"]}),(0,s.jsx)("li",{children:"Descriptive and specific"}),(0,s.jsxs)("li",{children:['Boolean fields start with "is", "has", "can", etc. (e.g., ',(0,s.jsx)(n.code,{children:"isActive"}),")"]}),(0,s.jsxs)("li",{children:['Date fields end with "Date" (e.g., ',(0,s.jsx)(n.code,{children:"registrationDate"}),")"]}),(0,s.jsxs)("li",{children:['Count fields end with "Count" (e.g., ',(0,s.jsx)(n.code,{children:"totalOrderCount"}),")"]})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Provides clear and consistent field access"}),(0,s.jsx)("li",{children:"Aligns with common JavaScript/GraphQL field naming conventions"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:"type Customer {\n    firstName: String!\n    lastName: String!\n    emailAddress: String!\n    isActive: Boolean!\n    registrationDate: DateTime!\n    totalOrderCount: Int!\n}\n"})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Object Fields Naming"})}),(0,s.jsx)("td",{children:"Use camelCase names that indicate the relationship"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsxs)("li",{children:["Names indicate relationship type (e.g., ",(0,s.jsx)(n.code,{children:"profile"}),", ",(0,s.jsx)(n.code,{children:"billingAddress"}),")"]}),(0,s.jsxs)("li",{children:["Singular for single objects (e.g., ",(0,s.jsx)(n.code,{children:"customer"}),")"]}),(0,s.jsxs)("li",{children:["Plural for collections (e.g., ",(0,s.jsx)(n.code,{children:"lineItems"}),")"]}),(0,s.jsx)("li",{children:"Clear ownership vs. reference"}),(0,s.jsx)("li",{children:"Consistent relationship naming"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Defines relationships between different types in the schema"}),(0,s.jsx)("li",{children:"Enhances graph traversability and data retrieval"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:"type Customer {\n    profile: CustomerProfile!\n    billingAddress: Address!\n    primaryPaymentMethod: PaymentMethod\n}\n\ntype Order {\n    lineItems: [LineItem!]!\n    customer: Customer!\n    paymentMethod: PaymentMethod!\n}\n\n"})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Collection Fields Naming"})}),(0,s.jsx)("td",{children:"Use plural nouns that clearly indicate the collection contents"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsxs)("li",{children:["Plural noun forms (e.g., ",(0,s.jsx)(n.code,{children:"orders"}),", ",(0,s.jsx)(n.code,{children:"paymentMethods"}),")"]}),(0,s.jsx)("li",{children:"Clear collection contents"}),(0,s.jsxs)("li",{children:["Descriptive qualifiers when filtered (e.g., ",(0,s.jsx)(n.code,{children:"activeOrders"}),", ",(0,s.jsx)(n.code,{children:"recommendedProducts"}),")"]}),(0,s.jsx)("li",{children:"Consistent collection naming"}),(0,s.jsxs)("li",{children:["Appropriate nullability (e.g., ",(0,s.jsx)(n.code,{children:"[Order!]!"}),")"]})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Represents lists of related items"}),(0,s.jsx)("li",{children:"Facilitates querying multiple entities at once"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:"type Customer {\n    orders: [Order!]!\n    paymentMethods: [PaymentMethod!]!\n    activeOrders: [Order!]!\n}\n\ntype Product {\n    variants: [ProductVariant!]!\n    categories: [Category!]!\n    images: [ProductImage!]!\n}\n"})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Query Operations Naming"})}),(0,s.jsx)("td",{children:"Use descriptive verbs and nouns that indicate the query purpose"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsxs)("li",{children:["Descriptive query names (e.g., ",(0,s.jsx)(n.code,{children:"customer"}),", ",(0,s.jsx)(n.code,{children:"searchProducts"}),", ",(0,s.jsx)(n.code,{children:"calculateShipping"}),")"]}),(0,s.jsx)("li",{children:"Consistent parameter naming"}),(0,s.jsx)("li",{children:"Clear return type indication"}),(0,s.jsx)("li",{children:"Logical grouping of related queries"}),(0,s.jsx)("li",{children:"Appropriate nullability"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Defines entry points for data retrieval"}),(0,s.jsx)("li",{children:"Ensures clarity on what data can be fetched"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:"type Query {\n    customer(id: ID!): Customer\n    products(filter: ProductFilter): [Product!]!\n    searchProducts(query: String!): ProductSearchResult!\n    calculateShipping(input: ShippingCalculationInput!): ShippingQuote!\n}\n"})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Mutation Operations Naming"})}),(0,s.jsx)("td",{children:"Use imperative verbs that clearly describe the action"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsxs)("li",{children:["Imperative verb forms (e.g., ",(0,s.jsx)(n.code,{children:"createCustomer"}),", ",(0,s.jsx)(n.code,{children:"updateOrderStatus"}),", ",(0,s.jsx)(n.code,{children:"cancelOrder"}),")"]}),(0,s.jsx)("li",{children:"Clear action description"}),(0,s.jsxs)("li",{children:["Consistent input/payload pattern (e.g., ",(0,s.jsx)(n.code,{children:"CreateCustomerInput"}),", ",(0,s.jsx)(n.code,{children:"CreateCustomerPayload"}),")"]}),(0,s.jsx)("li",{children:"Business-focused operation names"}),(0,s.jsx)("li",{children:"Appropriate error handling"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Defines operations that modify data"}),(0,s.jsx)("li",{children:"Provides clear intent for state changes"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:"type Mutation {\n    createCustomer(input: CreateCustomerInput!): CreateCustomerPayload!\n    updateOrderStatus(input: UpdateOrderStatusInput!): UpdateOrderStatusPayload!\n    cancelOrder(orderId: ID!, reason: String!): CancelOrderPayload!\n}\n"})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Subscription Operations Naming"})}),(0,s.jsx)("td",{children:"Use descriptive names that indicate the event stream"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsxs)("li",{children:["Names indicate event streams (e.g., ",(0,s.jsx)(n.code,{children:"customerUpdates"}),", ",(0,s.jsx)(n.code,{children:"orderEvents"}),")"]}),(0,s.jsx)("li",{children:"Clear subscription purpose"}),(0,s.jsx)("li",{children:"Appropriate filtering options"}),(0,s.jsx)("li",{children:"Consistent event naming"}),(0,s.jsx)("li",{children:"Real-time semantics clear"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Enables real-time data updates"}),(0,s.jsx)("li",{children:"Supports event-driven architectures"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:"type Subscription {\n    customerUpdates(customerId: ID!): CustomerEvent!\n    orderEvents(filter: OrderEventFilter): OrderEvent!\n    priceUpdates(productSkus: [String!]!): PriceUpdate!\n}\n"})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Input Types Naming"})}),(0,s.jsx)("td",{children:'Use descriptive names with "Input" suffix'}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsxs)("li",{children:['"Input" suffix for all input types (e.g., ',(0,s.jsx)(n.code,{children:"CreateCustomerInput"}),", ",(0,s.jsx)(n.code,{children:"CustomerFilter"}),")"]}),(0,s.jsx)("li",{children:"Descriptive base names"}),(0,s.jsx)("li",{children:"Appropriate field nullability"}),(0,s.jsx)("li",{children:"Logical field grouping"}),(0,s.jsx)("li",{children:"Consistent with output types"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Clearly identifies types used for mutation arguments"}),(0,s.jsx)("li",{children:"Promotes reusability of complex input structures"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:"input CreateCustomerInput {\n    firstName: String!\n    lastName: String!\n    emailAddress: String!\n}\n\ninput CustomerFilter {\n    isActive: Boolean\n    registeredAfter: DateTime\n}\n"})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Payload Types Naming"})}),(0,s.jsx)("td",{children:'Use descriptive names with "Payload" suffix'}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsxs)("li",{children:['"Payload" suffix for all payload types (e.g., ',(0,s.jsx)(n.code,{children:"CreateCustomerPayload"}),", ",(0,s.jsx)(n.code,{children:"UpdateCustomerPayload"}),")"]}),(0,s.jsx)("li",{children:"Include primary result object"}),(0,s.jsx)("li",{children:"Include error and warning arrays"}),(0,s.jsxs)("li",{children:["Additional metadata when relevant (e.g., ",(0,s.jsx)(n.code,{children:"orderNumber"}),", ",(0,s.jsx)(n.code,{children:"estimatedDelivery"}),")"]}),(0,s.jsx)("li",{children:"Consistent error handling pattern"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Standardizes mutation responses"}),(0,s.jsx)("li",{children:"Provides a consistent way to return data, errors, and warnings"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:"type CreateCustomerPayload {\n    customer: Customer\n    errors: [Error!]!\n    warnings: [Warning!]!\n}\n\ntype PlaceOrderPayload {\n    order: Order\n    orderNumber: String!\n    confirmationNumber: String!\n    errors: [Error!]!\n}\n"})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Subgraph Naming"})}),(0,s.jsx)("td",{children:"Use domain-focused names that reflect bounded contexts"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsxs)("li",{children:["Domain-focused names (e.g., ",(0,s.jsx)(n.code,{children:"customer-management"}),", ",(0,s.jsx)(n.code,{children:"order-processing"}),")"]}),(0,s.jsx)("li",{children:"Kebab-case formatting"}),(0,s.jsx)("li",{children:"Clear business capability indication"}),(0,s.jsx)("li",{children:"No technical implementation details"}),(0,s.jsx)("li",{children:"Consistent with bounded context names"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Organizes a federated graph into logical, self-contained services"}),(0,s.jsx)("li",{children:"Promotes team autonomy and clear ownership"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-markdown",children:"customer-management\nproduct-catalog\norder-processing\ninventory-management\n"})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Deprecation Naming"})}),(0,s.jsx)("td",{children:"Use clear deprecation messages with migration guidance"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Clear deprecation reasons provided"}),(0,s.jsx)("li",{children:"Migration guidance provided"}),(0,s.jsx)("li",{children:"Version information when relevant"}),(0,s.jsx)("li",{children:"Alternative field/value indicated"}),(0,s.jsx)("li",{children:"Consistent deprecation messaging"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Communicates changes to consumers without breaking existing integrations"}),(0,s.jsx)("li",{children:"Facilitates a smooth evolution of the schema"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:'type Customer {\n    email: String @deprecated(reason: "Use profile.contactInfo.emailAddress instead")\n    phone: String @deprecated(reason: "Use profile.contactInfo.phoneNumber instead")\n}\n\nenum OrderStatus {\n    PENDING @deprecated(reason: "Use PENDING_PAYMENT instead")\n    PENDING_PAYMENT\n}\n'})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Versioning Conventions"})}),(0,s.jsx)("td",{children:"Use semantic versioning concepts in schema evolution"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Version information tracked"}),(0,s.jsx)("li",{children:"Breaking changes documented"}),(0,s.jsx)("li",{children:"Migration paths clear"}),(0,s.jsx)("li",{children:"Backward compatibility maintained where possible"}),(0,s.jsx)("li",{children:"Evolution strategy defined"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Manages schema changes over time"}),(0,s.jsx)("li",{children:"Ensures stability for consumers while allowing for new features"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:'type CustomerV2 {\n    id: ID!\n    customerNumber: String!\n    profile: CustomerProfileV2!\n}\n\ntype SchemaInfo {\n    version: String! # "2.1.0"\n    deprecatedFields: [DeprecatedField!]!\n}\n'})})})]})]})]})}),(0,s.jsx)(l.A,{value:"schema-strategies",label:"Strategies",children:(0,s.jsxs)("table",{class:"text_vertical",children:[(0,s.jsx)("thead",{children:(0,s.jsxs)("tr",{children:[(0,s.jsx)("th",{children:"DDD Concept"}),(0,s.jsx)("th",{children:"Definition"}),(0,s.jsx)("th",{children:"Characteristics"}),(0,s.jsx)("th",{children:"Considerations"}),(0,s.jsx)("th",{children:"Example"})]})}),(0,s.jsxs)("tbody",{children:[(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Domain-Centric Organization"})}),(0,s.jsx)("td",{children:"Organize schema files around domain concepts and aggregates"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Files grouped by domain concepts"}),(0,s.jsx)("li",{children:"Related types co-located"}),(0,s.jsx)("li",{children:"Clear separation of concerns"}),(0,s.jsx)("li",{children:"Shared types properly organized"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)("ul",{children:(0,s.jsx)("li",{children:"Schema composition is clear"})})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-markdown",children:"customer-subgraph/\n\u251c\u2500\u2500 schema/\n\u2502   \u251c\u2500\u2500 customer/\n\u2502   \u2502   \u251c\u2500\u2500 customer.graphql\n\u2502   \u2502   \u251c\u2500\u2500 customer-profile.graphql\n\u2502   \u2502   \u251c\u2500\u2500 customer-queries.graphql\n\u2502   \u2502   \u2514\u2500\u2500 customer-mutations.graphql\n\u2502   \u251c\u2500\u2500 address/\n\u2502   \u2502   \u251c\u2500\u2500 address.graphql\n\u2502   \u2502   \u2514\u2500\u2500 address-validation.graphql\n\u2502   \u251c\u2500\u2500 loyalty/\n\u2502   \u2502   \u251c\u2500\u2500 loyalty-program.graphql\n\u2502   \u2502   \u2514\u2500\u2500 loyalty-calculations.graphql\n\u2502   \u251c\u2500\u2500 shared/\n\u2502   \u2502   \u251c\u2500\u2500 scalars.graphql\n\u2502   \u2502   \u251c\u2500\u2500 enums.graphql\n\u2502   \u2502   \u2514\u2500\u2500 interfaces.graphql\n\u2502   \u2514\u2500\u2500 schema.graphql\n"})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Layer-Based Organization"})}),(0,s.jsx)("td",{children:"Organize schema files by architectural layers"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Clear architectural layers"}),(0,s.jsx)("li",{children:"Consistent layer organization"}),(0,s.jsx)("li",{children:"Dependencies flow correctly"}),(0,s.jsx)("li",{children:"Layer boundaries respected"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)("ul",{children:(0,s.jsx)("li",{children:"Easy to navigate structure"})})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-markdown",children:"order-subgraph/\n\u251c\u2500\u2500 schema/\n\u2502   \u251c\u2500\u2500 entities/\n\u2502   \u2502   \u251c\u2500\u2500 order.graphql\n\u2502   \u2502   \u251c\u2500\u2500 line-item.graphql\n\u2502   \u2502   \u2514\u2500\u2500 order-status.graphql\n\u2502   \u251c\u2500\u2500 value-objects/\n\u2502   \u2502   \u251c\u2500\u2500 money.graphql\n\u2502   \u2502   \u251c\u2500\u2500 address.graphql\n\u2502   \u2502   \u2514\u2500\u2500 date-range.graphql\n\u2502   \u251c\u2500\u2500 services/\n\u2502   \u2502   \u251c\u2500\u2500 pricing-service.graphql\n\u2502   \u2502   \u251c\u2500\u2500 shipping-service.graphql\n\u2502   \u2502   \u2514\u2500\u2500 tax-service.graphql\n\u2502   \u251c\u2500\u2500 events/\n\u2502   \u2502   \u251c\u2500\u2500 order-events.graphql\n\u2502   \u2502   \u2514\u2500\u2500 event-interfaces.graphql\n\u2502   \u251c\u2500\u2500 operations/\n\u2502   \u2502   \u251c\u2500\u2500 queries.graphql\n\u2502   \u2502   \u251c\u2500\u2500 mutations.graphql\n\u2502   \u2502   \u2514\u2500\u2500 subscriptions.graphql\n\u2502   \u2514\u2500\u2500 schema.graphql\n"})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Feature-Based Organization"})}),(0,s.jsx)("td",{children:"Organize schema files around business features"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Features clearly defined"}),(0,s.jsx)("li",{children:"Feature boundaries respected"}),(0,s.jsx)("li",{children:"Cross-feature dependencies minimized"}),(0,s.jsx)("li",{children:"Feature evolution supported"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)("ul",{children:(0,s.jsx)("li",{children:"Business alignment clear"})})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-markdown",children:"product-subgraph/\n\u251c\u2500\u2500 schema/\n\u2502   \u251c\u2500\u2500 catalog-management/\n\u2502   \u2502   \u251c\u2500\u2500 product.graphql\n\u2502   \u2502   \u251c\u2500\u2500 category.graphql\n\u2502   \u2502   \u251c\u2500\u2500 catalog-queries.graphql\n\u2502   \u2502   \u2514\u2500\u2500 catalog-mutations.graphql\n\u2502   \u251c\u2500\u2500 inventory-tracking/\n\u2502   \u2502   \u251c\u2500\u2500 inventory.graphql\n\u2502   \u2502   \u251c\u2500\u2500 stock-levels.graphql\n\u2502   \u2502   \u2514\u2500\u2500 inventory-operations.graphql\n\u2502   \u251c\u2500\u2500 pricing/\n\u2502   \u2502   \u251c\u2500\u2500 price.graphql\n\u2502   \u2502   \u251c\u2500\u2500 discounts.graphql\n\u2502   \u2502   \u2514\u2500\u2500 pricing-rules.graphql\n\u2502   \u251c\u2500\u2500 search/\n\u2502   \u2502   \u251c\u2500\u2500 search-types.graphql\n\u2502   \u2502   \u251c\u2500\u2500 filters.graphql\n\u2502   \u2502   \u2514\u2500\u2500 search-operations.graphql\n\u2502   \u2514\u2500\u2500 schema.graphql\n"})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Aggregate-Centric Type Grouping"})}),(0,s.jsx)("td",{children:"Group types around domain aggregates"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Aggregate boundaries clear"}),(0,s.jsx)("li",{children:"Related types grouped together"}),(0,s.jsx)("li",{children:"Aggregate operations co-located"}),(0,s.jsx)("li",{children:"Aggregate consistency maintained"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)("ul",{children:(0,s.jsx)("li",{children:"Clear ownership model"})})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:'# customer-aggregate.graphql\n# Customer Aggregate Root\ntype Customer @key(fields: "id") {\n    id: ID!\n    customerNumber: String!\n    profile: CustomerProfile!\n    status: CustomerStatus!\n    addresses: CustomerAddresses!\n}\n\n# Customer Profile (part of Customer aggregate)\ntype CustomerProfile {\n    personalInfo: PersonalInfo!\n    contactInfo: ContactInfo!\n    preferences: CustomerPreferences!\n}\n\n# Customer Addresses (part of Customer aggregate)\ntype CustomerAddresses {\n    billing: Address!\n    shipping: Address\n    additional: [Address!]!\n}\n\n# Customer-specific enums\nenum CustomerStatus {\n    ACTIVE\n    INACTIVE\n    SUSPENDED\n    PENDING_VERIFICATION\n}\n\n# Customer operations\nextend type Query {\n    customer(id: ID!): Customer\n    customerByNumber(customerNumber: String!): Customer\n}\n\nextend type Mutation {\n    createCustomer(input: CreateCustomerInput!): CreateCustomerPayload!\n    updateCustomer(input: UpdateCustomerInput!): UpdateCustomerPayload!\n}\n'})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Interface-Based Type Organization"})}),(0,s.jsx)("td",{children:"Organize types around common interfaces and contracts"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Interfaces define clear contracts"}),(0,s.jsx)("li",{children:"Common behavior abstracted"}),(0,s.jsx)("li",{children:"Interface implementations consistent"}),(0,s.jsx)("li",{children:"Interface evolution planned"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)("ul",{children:(0,s.jsx)("li",{children:"Polymorphic queries supported"})})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:'# identifiable-interface.graphql\ninterface Identifiable {\n    id: ID!\n}\n\ninterface Timestamped {\n    createdAt: DateTime!\n    updatedAt: DateTime!\n}\n\ninterface Versioned {\n    version: Int!\n    lastModifiedBy: String!\n}\n\n# auditable-types.graphql\ninterface Auditable implements Identifiable & Timestamped {\n    id: ID!\n    createdAt: DateTime!\n    updatedAt: DateTime!\n    auditTrail: [AuditEntry!]!\n}\n\ntype AuditEntry {\n    action: AuditAction!\n    performedBy: String!\n    performedAt: DateTime!\n    changes: [FieldChange!]!\n}\n\n# domain-entities.graphql\ntype Customer implements Identifiable & Timestamped & Auditable\n@key(fields: "id") {\n    id: ID!\n    createdAt: DateTime!\n    updatedAt: DateTime!\n    auditTrail: [AuditEntry!]!\n\n    # Customer-specific fields\n    customerNumber: String!\n    profile: CustomerProfile!\n}\n\ntype Order implements Identifiable & Timestamped & Versioned\n@key(fields: "id") {\n    id: ID!\n    createdAt: DateTime!\n    updatedAt: DateTime!\n    version: Int!\n    lastModifiedBy: String!\n\n    # Order-specific fields\n    orderNumber: String!\n    status: OrderStatus!\n}\n'})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Value Object Clustering"})}),(0,s.jsx)("td",{children:"Group related value objects together"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Related value objects grouped"}),(0,s.jsx)("li",{children:"Value object behavior included"}),(0,s.jsx)("li",{children:"Input types provided"}),(0,s.jsx)("li",{children:"Validation rules embedded"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)("ul",{children:(0,s.jsx)("li",{children:"Reusability maximized"})})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:"# money-types.graphql\ntype Money {\n    amount: Decimal!\n    currency: Currency!\n\n    # Money behavior\n    formattedAmount: String!\n    minorUnits: Int!\n}\n\nenum Currency {\n    USD\n    EUR\n    GBP\n    JPY\n    CAD\n}\n\ninput MoneyInput {\n    amount: Decimal!\n    currency: Currency!\n}\n\n# measurement-types.graphql\ntype Weight {\n    value: Decimal!\n    unit: WeightUnit!\n\n    # Conversions\n    inGrams: Decimal!\n    inKilograms: Decimal!\n    inPounds: Decimal!\n}\n\ntype Dimensions {\n    length: Length!\n    width: Length!\n    height: Length!\n\n    # Computed properties\n    volume: Volume!\n    surfaceArea: Area!\n}\n\nenum WeightUnit {\n    GRAM\n    KILOGRAM\n    POUND\n    OUNCE\n}\n\n# contact-types.graphql\ntype ContactInfo {\n    email: Email!\n    phone: PhoneNumber\n    address: Address!\n}\n\ntype Email {\n    address: String!\n    isVerified: Boolean!\n    verifiedAt: DateTime\n}\n\ntype PhoneNumber {\n    number: String!\n    countryCode: String!\n    type: PhoneType!\n    isVerified: Boolean!\n}\n"})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Modular Schema Composition"})}),(0,s.jsx)("td",{children:"Compose schemas from modular components"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Clear import structure"}),(0,s.jsx)("li",{children:"Dependency order correct"}),(0,s.jsx)("li",{children:"No circular dependencies"}),(0,s.jsx)("li",{children:"Modular boundaries respected"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)("ul",{children:(0,s.jsx)("li",{children:"Schema composition validates"})})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:'# schema.graphql - Main composition file\n# Import base types\n#import "shared/scalars.graphql"\n#import "shared/interfaces.graphql"\n#import "shared/enums.graphql"\n\n# Import domain modules\n#import "customer/customer-types.graphql"\n#import "customer/customer-operations.graphql"\n#import "order/order-types.graphql"\n#import "order/order-operations.graphql"\n#import "product/product-types.graphql"\n#import "product/product-operations.graphql"\n\n# Import value objects\n#import "value-objects/money.graphql"\n#import "value-objects/address.graphql"\n#import "value-objects/contact.graphql"\n\n# Import events\n#import "events/domain-events.graphql"\n#import "events/event-subscriptions.graphql"\n\n# Schema definition\nschema {\n    query: Query\n    mutation: Mutation\n    subscription: Subscription\n}\n'})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Namespace-Based Organization"})}),(0,s.jsx)("td",{children:"Use GraphQL namespaces to organize related functionality"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Namespaces logically organized"}),(0,s.jsx)("li",{children:"Related operations grouped"}),(0,s.jsx)("li",{children:"Namespace boundaries clear"}),(0,s.jsx)("li",{children:"Query paths intuitive"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)("ul",{children:(0,s.jsx)("li",{children:"Namespace evolution supported"})})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:'# Namespace for customer operations\ntype CustomerOperations {\n    # Customer queries\n    byId(id: ID!): Customer\n    byNumber(customerNumber: String!): Customer\n    search(query: String!, filter: CustomerFilter): CustomerSearchResult!\n\n    # Customer analytics\n    analytics(filter: AnalyticsFilter!): CustomerAnalytics!\n    segmentation(criteria: SegmentationCriteria!): [CustomerSegment!]!\n}\n\n# Namespace for order operations\ntype OrderOperations {\n    # Order queries\n    byId(id: ID!): Order\n    byNumber(orderNumber: String!): Order\n    byCustomer(customerId: ID!, filter: OrderFilter): [Order!]!\n\n    # Order analytics\n    analytics(filter: OrderAnalyticsFilter!): OrderAnalytics!\n    reports(type: ReportType!, period: DateRange!): OrderReport!\n}\n\n# Root query with namespaces\ntype Query {\n    customers: CustomerOperations!\n    orders: OrderOperations!\n    products: ProductOperations!\n    inventory: InventoryOperations!\n}\n\n# Usage: query { customers { byId(id: "123") { name } } }\n'})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Context-Aware Schema Organization"})}),(0,s.jsx)("td",{children:"Organize schema elements by bounded context concerns"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Context boundaries respected"}),(0,s.jsx)("li",{children:"Context-specific concerns separated"}),(0,s.jsx)("li",{children:"Cross-context relationships clear"}),(0,s.jsx)("li",{children:"Context evolution independent"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)("ul",{children:(0,s.jsx)("li",{children:"Domain alignment maintained"})})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:'# customer-context.graphql\n# Customer bounded context types and operations\ntype Customer @key(fields: "id") {\n    id: ID!\n    # Core customer context data\n    customerNumber: String!\n    profile: CustomerProfile!\n    registrationInfo: RegistrationInfo!\n}\n\ntype CustomerProfile {\n    personalInfo: PersonalInfo!\n    contactInfo: ContactInfo!\n    preferences: CustomerPreferences!\n}\n\nextend type Query {\n    # Customer context queries\n    customer(id: ID!): Customer\n    customerProfile(customerId: ID!): CustomerProfile\n}\n\nextend type Mutation {\n    # Customer context mutations\n    registerCustomer(input: RegisterCustomerInput!): RegisterCustomerPayload!\n    updateProfile(input: UpdateProfileInput!): UpdateProfilePayload!\n}\n\n# order-context.graphql\n# Order bounded context extensions\nextend type Customer @key(fields: "id") {\n    id: ID! @external\n\n    # Order context view of customer\n    orderHistory: OrderHistory!\n    loyaltyStatus: LoyaltyStatus!\n    shippingPreferences: ShippingPreferences!\n}\n\nextend type Query {\n    # Order context queries\n    customerOrders(customerId: ID!): [Order!]!\n    orderStatistics(customerId: ID!): OrderStatistics!\n}\n'})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Schema Documentation Strategy"})}),(0,s.jsx)("td",{children:"Organize comprehensive schema documentation"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"All types documented"}),(0,s.jsx)("li",{children:"Business rules explained"}),(0,s.jsx)("li",{children:"Examples provided"}),(0,s.jsx)("li",{children:"Relationships documented"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)("ul",{children:(0,s.jsx)("li",{children:"Evolution notes included"})})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:'"""\nCustomer aggregate root representing a business customer.\n\nThe Customer entity encapsulates all customer-related information\nand serves as the primary entry point for customer operations.\n\nBusiness Rules:\n- Customer numbers must be unique across the system\n- Email addresses must be verified before account activation\n- Customer status changes trigger domain events\n\nRelated Aggregates:\n- Order: Customers can place multiple orders\n- Payment: Customers can have multiple payment methods\n"""\ntype Customer @key(fields: "id") {\n"""\nUnique identifier for the customer.\n\nThis ID is stable across the customer lifecycle and is used\nfor federation across subgraphs.\n"""\nid: ID!\n\n"""\nBusiness identifier for the customer.\n\nFormat: CUS-YYYYMMDD-NNNN\nExample: CUS-20231201-0001\n\nGenerated automatically during customer registration.\n"""\ncustomerNumber: String!\n\n"""\nCustomer profile containing personal and contact information.\n\nThe profile is a value object that encapsulates all\ncustomer-specific data and preferences.\n"""\nprofile: CustomerProfile!\n}\n'})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Schema Metadata Organization"})}),(0,s.jsx)("td",{children:"Include rich metadata for schema governance"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Ownership information included"}),(0,s.jsx)("li",{children:"Version information tracked"}),(0,s.jsx)("li",{children:"Business rules documented"}),(0,s.jsx)("li",{children:"Performance hints provided"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)("ul",{children:(0,s.jsx)("li",{children:"Governance metadata complete"})})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:'# Schema metadata\ndirective @owner(team: String!, contact: String!) on OBJECT | FIELD_DEFINITION\ndirective @since(version: String!) on OBJECT | FIELD_DEFINITION | ENUM_VALUE\ndirective @businessRule(description: String!) on OBJECT | FIELD_DEFINITION\ndirective @performance(complexity: Int!, cacheHint: String) on FIELD_DEFINITION\n\ntype Customer\n@key(fields: "id")\n@owner(team: "Customer Experience", contact: "customer-team@company.com")\n@since(version: "1.0.0")\n@businessRule(\n    description: "Customer must have verified email before activation"\n) {\nid: ID! @since(version: "1.0.0")\n\ncustomerNumber: String!\n    @since(version: "1.0.0")\n    @businessRule(description: "Must follow format CUS-YYYYMMDD-NNNN")\n\nprofile: CustomerProfile!\n    @since(version: "1.1.0")\n    @performance(complexity: 5, cacheHint: "300s")\n\nloyaltyLevel: LoyaltyLevel!\n    @since(version: "2.0.0")\n    @performance(complexity: 3, cacheHint: "600s")\n}\n'})})})]})]})]})}),(0,s.jsx)(l.A,{value:"schema-modularization",label:"Modularization",children:(0,s.jsxs)("table",{class:"text_vertical",children:[(0,s.jsx)("thead",{children:(0,s.jsxs)("tr",{children:[(0,s.jsx)("th",{children:"DDD Concept"}),(0,s.jsx)("th",{children:"Definition"}),(0,s.jsx)("th",{children:"Characteristics"}),(0,s.jsx)("th",{children:"Considerations"}),(0,s.jsx)("th",{children:"Example"})]})}),(0,s.jsxs)("tbody",{children:[(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Ubiquitous Language"})}),(0,s.jsx)("td",{children:"A common language shared between domain experts and developers, reflected in code and schema"}),(0,s.jsx)("td",{children:(0,s.jsx)("ul",{children:(0,s.jsx)("li",{children:"Type names must use domain terminology, not technical terms"})})}),(0,s.jsx)("td",{children:(0,s.jsx)("ul",{children:(0,s.jsx)("li",{children:"All type names use business terminology"})})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:"# \u2705 Good - Uses domain language\ntype Order {\n    orderNumber: String!\n    customer: Customer!\n    lineItems: [LineItem!]!\n    totalAmount: Money!\n    status: OrderStatus!\n}\n\n# \u274c Bad - Uses technical language\ntype OrderRecord {\n    id: ID!\n    customerId: ID!\n    items: [OrderItemRecord!]!\n    total: Float!\n    statusCode: Int!\n}\n"})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Domain Module Pattern"})}),(0,s.jsx)("td",{children:"Create modules around domain aggregates and bounded contexts"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Module boundaries align with domain boundaries"}),(0,s.jsx)("li",{children:"Clear module dependencies"}),(0,s.jsx)("li",{children:"Well-defined module interface"}),(0,s.jsx)("li",{children:"Module versioning strategy"}),(0,s.jsx)("li",{children:"Module documentation complete"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Encapsulates all related types, operations, and business logic within a bounded context"}),(0,s.jsx)("li",{children:"Dependencies and exports are explicitly defined"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-markdown",children:"customer-domain-module/\n\u251c\u2500\u2500 types/\n\u2502   \u251c\u2500\u2500 customer.graphql\n\u2502   \u251c\u2500\u2500 customer-profile.graphql\n\u2502   \u251c\u2500\u2500 customer-address.graphql\n\u2502   \u2514\u2500\u2500 customer-enums.graphql\n\u251c\u2500\u2500 operations/\n\u2502   \u251c\u2500\u2500 customer-queries.graphql\n\u2502   \u251c\u2500\u2500 customer-mutations.graphql\n\u2502   \u2514\u2500\u2500 customer-subscriptions.graphql\n\u251c\u2500\u2500 interfaces/\n\u2502   \u251c\u2500\u2500 customer-interfaces.graphql\n\u2502   \u2514\u2500\u2500 customer-contracts.graphql\n\u251c\u2500\u2500 events/\n\u2502   \u251c\u2500\u2500 customer-events.graphql\n\u2502   \u2514\u2500\u2500 customer-handlers.graphql\n\u2514\u2500\u2500 module.graphql\n"})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Capability Module Pattern"})}),(0,s.jsx)("td",{children:"Organize modules around business capabilities"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Capability clearly defined"}),(0,s.jsx)("li",{children:"Service interfaces well-designed"}),(0,s.jsx)("li",{children:"Capability versioning managed"}),(0,s.jsx)("li",{children:"Integration points documented"}),(0,s.jsx)("li",{children:"Capability testing comprehensive"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Provides comprehensive capabilities, such as price calculation or discount application"}),(0,s.jsx)("li",{children:"Defines metadata and services for the capability"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-markdown",children:"pricing-capability-module/\n\u251c\u2500\u2500 services/\n\u2502   \u251c\u2500\u2500 price-calculation.graphql\n\u2502   \u251c\u2500\u2500 discount-engine.graphql\n\u2502   \u2514\u2500\u2500 tax-calculation.graphql\n\u251c\u2500\u2500 types/\n\u2502   \u251c\u2500\u2500 price-quote.graphql\n\u2502   \u251c\u2500\u2500 discount-types.graphql\n\u2502   \u2514\u2500\u2500 tax-types.graphql\n\u251c\u2500\u2500 rules/\n\u2502   \u251c\u2500\u2500 pricing-rules.graphql\n\u2502   \u251c\u2500\u2500 discount-rules.graphql\n\u2502   \u2514\u2500\u2500 tax-rules.graphql\n\u2514\u2500\u2500 capability.graphql\n"})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Shared Module Pattern"})}),(0,s.jsx)("td",{children:"Create reusable modules for common types and functionality"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Shared types are truly reusable"}),(0,s.jsx)("li",{children:"Module stability is appropriate"}),(0,s.jsx)("li",{children:"Versioning strategy is clear"}),(0,s.jsx)("li",{children:"Usage guidelines provided"}),(0,s.jsx)("li",{children:"Governance model defined"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Provides common value objects and types used across multiple bounded contexts"}),(0,s.jsx)("li",{children:"Emphasizes immutability, self-validating types, and backward compatibility"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-markdown",children:"shared-value-objects-module/\n\u251c\u2500\u2500 money/\n\u2502   \u251c\u2500\u2500 money-types.graphql\n\u2502   \u251c\u2500\u2500 currency-types.graphql\n\u2502   \u2514\u2500\u2500 money-operations.graphql\n\u251c\u2500\u2500 temporal/\n\u2502   \u251c\u2500\u2500 date-types.graphql\n\u2502   \u251c\u2500\u2500 duration-types.graphql\n\u2502   \u2514\u2500\u2500 date-range-types.graphql\n\u251c\u2500\u2500 contact/\n\u2502   \u251c\u2500\u2500 address-types.graphql\n\u2502   \u251c\u2500\u2500 email-types.graphql\n\u2502   \u2514\u2500\u2500 phone-types.graphql\n\u251c\u2500\u2500 measurement/\n\u2502   \u251c\u2500\u2500 weight-types.graphql\n\u2502   \u251c\u2500\u2500 dimension-types.graphql\n\u2502   \u2514\u2500\u2500 volume-types.graphql\n\u2514\u2500\u2500 shared-module.graphql\n"})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Hierarchical Module Composition"})}),(0,s.jsx)("td",{children:"Compose modules in hierarchical layers"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Layer dependencies are clear"}),(0,s.jsx)("li",{children:"No circular dependencies"}),(0,s.jsx)("li",{children:"Layer boundaries respected"}),(0,s.jsx)("li",{children:"Composition order correct"}),(0,s.jsx)("li",{children:"Dependency validation automated"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Organizes schemas into distinct layers (e.g., Foundation, Value Objects, Domain, Capability, Integration)"}),(0,s.jsx)("li",{children:"Defines strict dependency rules to prevent circular dependencies"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:"subgraph-schema/\n\u251c\u2500\u2500 foundation/\n\u2502   \u251c\u2500\u2500 shared-scalars/\n\u2502   \u251c\u2500\u2500 shared-interfaces/\n\u2502   \u2514\u2500\u2500 shared-enums/\n\u251c\u2500\u2500 value-objects/\n\u2502   \u251c\u2500\u2500 money-module/\n\u2502   \u251c\u2500\u2500 contact-module/\n\u2502   \u2514\u2500\u2500 temporal-module/\n\u251c\u2500\u2500 domain-modules/\n\u2502   \u251c\u2500\u2500 customer-module/\n\u2502   \u251c\u2500\u2500 product-module/\n\u2502   \u2514\u2500\u2500 order-module/\n\u251c\u2500\u2500 capability-modules/\n\u2502   \u251c\u2500\u2500 pricing-module/\n\u2502   \u251c\u2500\u2500 inventory-module/\n\u2502   \u2514\u2500\u2500 shipping-module/\n\u251c\u2500\u2500 integration-modules/\n\u2502   \u251c\u2500\u2500 federation-module/\n\u2502   \u251c\u2500\u2500 event-module/\n\u2502   \u2514\u2500\u2500 api-module/\n\u2514\u2500\u2500 schema.graphql\n"})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Plugin-Based Module System"})}),(0,s.jsx)("td",{children:"Design modules as pluggable components"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Plugin interface well-defined"}),(0,s.jsx)("li",{children:"Module lifecycle managed"}),(0,s.jsx)("li",{children:"Configuration externalized"}),(0,s.jsx)("li",{children:"Dependencies resolved automatically"}),(0,s.jsx)("li",{children:"Plugin registry maintained"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsxs)("li",{children:["Modules implement a common ",(0,s.jsx)(n.code,{children:"ModulePlugin"})," interface"]}),(0,s.jsx)("li",{children:"Supports dynamic activation/deactivation and dependency resolution"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:"interface ModulePlugin {\n    name: String!\n    version: String!\n    isEnabled: Boolean!\n    dependencies: [ModuleDependency!]!\n    initialize: InitializationResult!\n    validate: ValidationResult!\n    activate: ActivationResult!\n    deactivate: DeactivationResult!\n}\n\ntype CustomerModulePlugin implements ModulePlugin {\n    # ... (details omitted for brevity)\n}\n\ntype ModuleRegistry {\n    registeredModules: [ModulePlugin!]!\n    activeModules: [ModulePlugin!]!\n    moduleGraph: ModuleDependencyGraph!\n    # ... (operations omitted for brevity)\n}\n"})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Event-Driven Module Integration"})}),(0,s.jsx)("td",{children:"Integrate modules through domain events"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Event contracts well-defined"}),(0,s.jsx)("li",{children:"Event routing configured"}),(0,s.jsx)("li",{children:"Error handling robust"}),(0,s.jsx)("li",{children:"Event ordering preserved"}),(0,s.jsx)("li",{children:"Module coupling minimized"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Modules communicate by publishing and subscribing to domain events"}),(0,s.jsx)("li",{children:"Events are well-defined, and handlers manage event processing"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:"interface ModuleEvent {\n    eventId: ID!\n    moduleSource: String!\n    eventType: String!\n    occurredAt: DateTime!\n    payload: JSON!\n}\n\ntype CustomerModuleEvent implements ModuleEvent {\n    # ... (details omitted for brevity)\n}\n\ntype ModuleEventHandler {\n    handlerName: String!\n    moduleSource: String!\n    eventTypes: [String!]!\n    isActive: Boolean!\n    # ... (configuration omitted for brevity)\n}\n\ntype ModuleEventBus {\n    publishEvent(event: ModuleEventInput!): PublishResult!\n    subscribeToEvents(filter: EventFilter!): Subscription!\n    getEventHistory(filter: EventHistoryFilter!): [ModuleEvent!]!\n    # ... (metrics omitted for brevity)\n}\n"})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Module Lifecycle Management"})}),(0,s.jsx)("td",{children:"Define clear lifecycle stages for modules"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Lifecycle stages clearly defined"}),(0,s.jsx)("li",{children:"Transition criteria specified"}),(0,s.jsx)("li",{children:"Ownership model clear"}),(0,s.jsx)("li",{children:"Quality gates enforced"}),(0,s.jsx)("li",{children:"Compliance requirements met"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Defines stages like DEVELOPMENT, PRODUCTION, DEPRECATED, and transition criteria"}),(0,s.jsx)("li",{children:"Includes governance policies for ownership, changes, and quality"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:"type ModuleLifecycle {\n    currentStage: LifecycleStage!\n    stageHistory: [LifecycleStageEntry!]!\n    nextStage: LifecycleStage\n    stageTransitionCriteria: [String!]!\n}\n\nenum LifecycleStage {\n    DEVELOPMENT\n    TESTING\n    STAGING\n    PRODUCTION\n    MAINTENANCE\n    DEPRECATED\n    RETIRED\n}\n\ntype ModuleGovernance {\n    owner: ModuleOwner!\n    maintainers: [ModuleMaintainer!]!\n    reviewers: [ModuleReviewer!]!\n    # ... (policies and gates omitted for brevity)\n}\n"})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Module Versioning Strategy"})}),(0,s.jsx)("td",{children:"Implement semantic versioning for modules"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Semantic versioning followed"}),(0,s.jsx)("li",{children:"Breaking changes documented"}),(0,s.jsx)("li",{children:"Migration guides provided"}),(0,s.jsx)("li",{children:"Dependency constraints clear"}),(0,s.jsx)("li",{children:"Compatibility matrix maintained"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Adheres to semantic versioning (major, minor, patch)"}),(0,s.jsx)("li",{children:"Documents release notes, breaking changes, and deprecations with migration guides"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:'type ModuleVersion {\n    version: String! # "2.1.0"\n    majorVersion: Int! # 2\n    minorVersion: Int! # 1\n    patchVersion: Int! # 0\n    # ... (metadata and compatibility omitted for brevity)\n    dependencies: [ModuleDependency!]!\n    dependents: [ModuleDependent!]!\n}\n\ntype BreakingChange {\n    type: BreakingChangeType!\n    description: String!\n    migrationGuide: String!\n    affectedTypes: [String!]!\n    introducedInVersion: String!\n}\n\nenum BreakingChangeType {\n    TYPE_REMOVED\n    FIELD_REMOVED\n    FIELD_TYPE_CHANGED\n    OPERATION_REMOVED\n    OPERATION_SIGNATURE_CHANGED\n    ENUM_VALUE_REMOVED\n}\n'})})})]})]})]})}),(0,s.jsx)(l.A,{value:"schema-versioning",label:"Versioning",children:(0,s.jsxs)("table",{class:"text_vertical",children:[(0,s.jsx)("thead",{children:(0,s.jsxs)("tr",{children:[(0,s.jsx)("th",{children:"DDD Concept"}),(0,s.jsx)("th",{children:"Definition"}),(0,s.jsx)("th",{children:"Characteristics"}),(0,s.jsx)("th",{children:"Considerations"}),(0,s.jsx)("th",{children:"Example"})]})}),(0,s.jsxs)("tbody",{children:[(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Schema Evolution and Versioning"})}),(0,s.jsx)("td",{children:"Strategies for evolving DDD-compliant schemas in GraphQL federated architectures while maintaining backward compatibility"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Requires careful planning"}),(0,s.jsx)("li",{children:"Enables domain model growth"}),(0,s.jsx)("li",{children:"Avoids breaking existing clients"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Maintaining backward compatibility is crucial"}),(0,s.jsx)("li",{children:"Schema evolution should reflect domain model evolution"}),(0,s.jsx)("li",{children:"Federation impact must be considered during subgraph evolution"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:'# Version 1.0 - Initial schema\ntype Customer @key(fields: "id") {\n    id: ID!\n    name: String!\n    email: String!\n}\n\n# Version 1.1 - Additive changes (safe)\ntype Customer @key(fields: "id") {\n    id: ID!\n    name: String!\n    email: String!\n    phone: String\n    registrationDate: DateTime\n    displayName: String!\n    isActive: Boolean!\n}\n'})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Backward Compatibility"})}),(0,s.jsx)("td",{children:"New schema versions must not break existing clients"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Safe evolution patterns: adding optional fields, types, enum values (at end), operations, or deprecating fields with alternatives"}),(0,s.jsx)("li",{children:"Unsafe evolution patterns: removing fields without deprecation, changing field types, making optional fields required, removing enum values, changing operation signatures"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"All changes should maintain backward compatibility"}),(0,s.jsx)("li",{children:"Deprecated fields need clear migration paths"}),(0,s.jsx)("li",{children:"New fields should be optional or have defaults"}),(0,s.jsx)("li",{children:"Breaking changes must be avoided"}),(0,s.jsx)("li",{children:"Migration timeline should be communicated"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:'# Version 1.2 - Field deprecation (safe with migration period)\ntype Customer @key(fields: "id") {\n    id: ID!\n    name: String! @deprecated(reason: "Use profile.fullName instead")\n    email: String! @deprecated(reason: "Use profile.contactInfo.email instead")\n    phone: String @deprecated(reason: "Use profile.contactInfo.phone instead")\n    profile: CustomerProfile!\n    displayName: String!\n    isActive: Boolean!\n}\n'})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Domain-Driven Evolution"})}),(0,s.jsx)("td",{children:"Schema evolution should reflect domain model evolution"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Evolution is driven by a deeper understanding of the business domain"}),(0,s.jsx)("li",{children:"Business concepts are properly modeled"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Evolution should reflect deeper domain understanding"}),(0,s.jsx)("li",{children:"Business concepts should be properly modeled"}),(0,s.jsx)("li",{children:"Domain expert feedback must be incorporated"}),(0,s.jsx)("li",{children:"Ubiquitous language must be maintained"}),(0,s.jsx)("li",{children:"Business rules should be embedded in the schema"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:'# V2: Richer domain model as understanding grows\ntype Customer @key(fields: "id") {\n    id: ID!\n    customerNumber: String!\n    profile: CustomerProfile!\n    status: CustomerStatus!\n    name: String! @deprecated(reason: "Use profile.fullName")\n    email: String! @deprecated(reason: "Use profile.contactInfo.email")\n}\n\ntype CustomerProfile {\n    personalInfo: PersonalInfo!\n    contactInfo: ContactInfo!\n    preferences: CustomerPreferences!\n}\n'})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Federated Evolution"})}),(0,s.jsx)("td",{children:"Subgraph evolution must consider federation impact"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Changes within a subgraph can affect the overall federated graph"}),(0,s.jsx)("li",{children:"Requires coordination across subgraphs"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Federation keys should remain stable"}),(0,s.jsx)("li",{children:"External field changes require coordination"}),(0,s.jsx)("li",{children:"Cross-subgraph impacts must be assessed"}),(0,s.jsx)("li",{children:"Schema composition should continue to work"}),(0,s.jsx)("li",{children:"Query planning should not be negatively affected"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:'# V2: Enhanced customer with multiple keys\ntype Customer @key(fields: "id") @key(fields: "customerNumber") {\n    id: ID!\n    customerNumber: String!\n    profile: CustomerProfile!\n    name: String! @deprecated(reason: "Use profile.fullName")\n    email: String! @deprecated(reason: "Use profile.contactInfo.email")\n}\n\nextend type Customer @key(fields: "customerNumber") {\n    customerNumber: String! @external\n    orders: [Order!]!\n}\n'})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Semantic Versioning for Schemas"})}),(0,s.jsx)("td",{children:"Applying semantic versioning principles to GraphQL schemas"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Uses Major, Minor, and Patch version increments"}),(0,s.jsx)("li",{children:"Major for breaking changes, Minor for backward-compatible features, Patch for bug fixes"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Version numbers should follow semantic versioning"}),(0,s.jsx)("li",{children:"Breaking changes should increment the major version"}),(0,s.jsx)("li",{children:"New features should increment the minor version"}),(0,s.jsx)("li",{children:"Bug fixes should increment the patch version"}),(0,s.jsx)("li",{children:"Version metadata should be maintained"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:'type SchemaInfo {\n    version: String! # "2.1.0"\n    majorVersion: Int! # 2\n    minorVersion: Int! # 1\n    patchVersion: Int! # 0\n    deprecatedFields: [DeprecatedField!]!\n    addedInVersion: String!\n    compatibilityLevel: CompatibilityLevel!\n}\n'})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Field-Level Versioning"})}),(0,s.jsx)("td",{children:"Versioning individual fields for granular evolution"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Allows for independent evolution of fields"}),(0,s.jsx)("li",{children:"Provides clear deprecation timelines for specific fields"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Field versions should be tracked"}),(0,s.jsx)("li",{children:"Deprecation timelines should be clear"}),(0,s.jsx)("li",{children:"Migration guidance should be provided"}),(0,s.jsx)("li",{children:"Field evolution should be documented"}),(0,s.jsx)("li",{children:"Client impact should be assessed"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:'type Customer @key(fields: "id") {\n    id: ID!\n    name: String! @deprecated(reason: "Use profile.fullName. Removed in v3.0")\n    email: String! @deprecated(reason: "Use profile.contactInfo.email. Removed in v3.0")\n    customerNumber: String! # Added in v2.0\n    profile: CustomerProfile! # Added in v2.0\n    loyaltyLevel: LoyaltyLevel! # Added in v2.1\n    fieldVersions: [FieldVersion!]!\n}\n'})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Type Versioning"})}),(0,s.jsx)("td",{children:"Versioning entire types when significant changes occur"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Allows new type versions to coexist with old ones during migration"}),(0,s.jsx)("li",{children:"Useful for major structural changes to a type"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Type versions should coexist during migration"}),(0,s.jsx)("li",{children:"Migration paths should be clearly defined"}),(0,s.jsx)("li",{children:"Data consistency must be maintained"}),(0,s.jsx)("li",{children:"Client migration should be supported"}),(0,s.jsx)("li",{children:"A rollback strategy should exist"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:'# V1 Customer type\ntype Customer @key(fields: "id") {\n    id: ID!\n    name: String!\n    email: String!\n}\n\n# V2 Customer type (coexisting during migration)\ntype CustomerV2 @key(fields: "id") @key(fields: "customerNumber") {\n    id: ID!\n    customerNumber: String!\n    profile: CustomerProfile!\n    status: CustomerStatus!\n}\n'})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Gradual Migration"})}),(0,s.jsx)("td",{children:"Migrating clients gradually over time"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Supports both old and new patterns concurrently"}),(0,s.jsx)("li",{children:"Provides migration helpers and guidance to clients"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Migration timelines should be communicated"}),(0,s.jsx)("li",{children:"Legacy and new patterns should coexist"}),(0,s.jsx)("li",{children:"Migration assistance should be provided"}),(0,s.jsx)("li",{children:"Progress should be tracked"}),(0,s.jsx)("li",{children:"Support should be available during migration"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:'type Customer @key(fields: "id") {\n    id: ID!\n    name: String! @deprecated(reason: "Use profile.fullName")\n    email: String! @deprecated(reason: "Use profile.contactInfo.email")\n    profile: CustomerProfile!\n    migrationInfo: MigrationInfo!\n}\n\ntype Query {\n    customer(id: ID!): Customer @deprecated(reason: "Use customerByNumber")\n    customerByNumber(customerNumber: String!): Customer\n}\n'})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Feature Flags for Schema Evolution"})}),(0,s.jsx)("td",{children:"Using feature flags to control schema evolution"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"New schema elements can be toggled on or off using flags"}),(0,s.jsx)("li",{children:"Allows for gradual rollout and testing of new features"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Feature flags should control new functionality"}),(0,s.jsx)("li",{children:"Flag states should be clearly documented"}),(0,s.jsx)("li",{children:"Flag rollout should be gradual"}),(0,s.jsx)("li",{children:"Flag removal should be planned"}),(0,s.jsx)("li",{children:"Flag dependencies should be managed"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:'type Customer @key(fields: "id") {\n    id: ID!\n    name: String!\n    email: String!\n    profile: CustomerProfile # Available when "enhanced_customer_profile" flag is enabled\n    loyaltyProgram: LoyaltyProgram # Available when "loyalty_program" flag is enabled\n}\n\ntype Query {\n    customer(id: ID!): Customer\n    customerAnalytics(customerId: ID!): CustomerAnalytics # Requires "analytics" flag\n}\n'})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Blue-Green Schema Deployment"})}),(0,s.jsx)("td",{children:"Deploying new schema versions alongside existing ones"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:'New versions are deployed to a separate "green" environment'}),(0,s.jsx)("li",{children:'Traffic can be gradually shifted from "blue" to "green."'})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Both environments should be fully functional"}),(0,s.jsx)("li",{children:"Traffic can be gradually shifted"}),(0,s.jsx)("li",{children:"Rollback should be immediate if needed"}),(0,s.jsx)("li",{children:"Data consistency must be maintained"}),(0,s.jsx)("li",{children:"Monitoring should cover both environments"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:'# Blue environment (current production)\ntype Customer @key(fields: "id") {\n    id: ID!\n    name: String!\n    email: String!\n}\n\n# Green environment (new version)\ntype Customer @key(fields: "id") @key(fields: "customerNumber") {\n    id: ID!\n    customerNumber: String!\n    profile: CustomerProfile!\n    name: String! @deprecated(reason: "Use profile.fullName")\n    email: String! @deprecated(reason: "Use profile.contactInfo.email")\n}\n'})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Schema Change Events"})}),(0,s.jsx)("td",{children:"Publishing events when schema changes occur"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Clients can subscribe to these events to react to schema updates"}),(0,s.jsx)("li",{children:"Provides a real-time notification mechanism for schema evolution"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Schema changes should be published as events"}),(0,s.jsx)("li",{children:"Clients should be able to subscribe to schema changes"}),(0,s.jsx)("li",{children:"Change notifications should include migration guidance"}),(0,s.jsx)("li",{children:"Event history should be maintained"}),(0,s.jsx)("li",{children:"Change impact should be communicated"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:"type Subscription {\n    schemaChanges: SchemaChangeEvent!\n}\n\nunion SchemaChangeEvent =\nFieldAdded\n| FieldDeprecated\n| FieldRemoved\n| TypeAdded\n| TypeModified\n\ntype FieldAdded implements SchemaChangeEvent {\n    eventId: ID!\n    timestamp: DateTime!\n    typeName: String!\n    fieldName: String!\n    fieldType: String!\n    version: String!\n    description: String!\n}\n"})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Automated Migration Detection"})}),(0,s.jsx)("td",{children:"Automatically detecting and suggesting migrations"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Tools can analyze client schemas and suggest necessary updates"}),(0,s.jsx)("li",{children:"Estimates migration effort and identifies automation opportunities"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Migration opportunities should be identified automatically"}),(0,s.jsx)("li",{children:"Migration effort should be estimated"}),(0,s.jsx)("li",{children:"Automation should be provided where possible"}),(0,s.jsx)("li",{children:"Migration tracking should be available"}),(0,s.jsx)("li",{children:"Success metrics should be defined"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:"type Query {\n    migrationOpportunities(clientId: String!): [MigrationOpportunity!]!\n    schemaCompatibility(clientSchema: String!): CompatibilityReport!\n}\n\ntype MigrationOpportunity {\n    type: MigrationType!\n    description: String!\n    currentUsage: String!\n    recommendedChange: String!\n    effort: MigrationEffort!\n    deadline: DateTime!\n    automationAvailable: Boolean!\n}\n"})})})]})]})]})})]})}),(0,s.jsx)(l.A,{value:"patterns",label:"Patterns",children:(0,s.jsxs)(d.A,{queryString:"secondary",children:[(0,s.jsx)(l.A,{value:"schema-decision-tree",label:"Decision Tree",attributes:{className:"tabs__vertical"},children:(0,s.jsxs)("table",{class:"text_vertical",children:[(0,s.jsx)("thead",{children:(0,s.jsxs)("tr",{children:[(0,s.jsx)("th",{children:"Category"}),(0,s.jsx)("th",{children:"Decision Tree"}),(0,s.jsx)("th",{children:"Checklist"})]})}),(0,s.jsxs)("tbody",{children:[(0,s.jsx)("tr",{children:(0,s.jsx)("td",{colspan:"3",children:(0,s.jsx)("h2",{children:"Bounded Context Decisions"})})}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("h3",{children:"Context Boundary Identification"})}),(0,s.jsxs)("td",{children:[(0,s.jsx)("b",{children:"Should this be a separate bounded context?"}),(0,s.jsxs)("ul",{children:[(0,s.jsxs)("li",{children:["Does this concept have different meanings in different parts of the business? ",(0,s.jsx)("b",{children:"\u2192 Yes: Separate bounded contexts / No: Continue evaluation"})]}),(0,s.jsxs)("li",{children:["Do different teams have expertise in different aspects of this concept? ",(0,s.jsx)("b",{children:"\u2192 Yes: Consider separate bounded contexts / No: Continue evaluation"})]}),(0,s.jsxs)("li",{children:["Would changes to this concept affect different business capabilities? ",(0,s.jsx)("b",{children:"\u2192 Yes: Separate bounded contexts / No: Continue evaluation"})]}),(0,s.jsxs)("li",{children:["Can this concept be owned and evolved independently? ",(0,s.jsx)("b",{children:"\u2192 Yes: Good candidate for separate context / No: Consider shared context or different boundaries"})]}),(0,s.jsxs)("li",{children:["Does this concept have its own data and business rules? ",(0,s.jsx)("b",{children:"\u2192 Yes: Strong candidate for separate context / No: Likely part of larger context"})]})]})]}),(0,s.jsxs)("td",{children:[(0,s.jsx)("b",{children:"Context Boundary Validation"}),(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Context has clear business purpose"}),(0,s.jsx)("li",{children:"Context can be owned by single team"}),(0,s.jsx)("li",{children:"Context has minimal dependencies on other contexts"}),(0,s.jsx)("li",{children:"Context boundaries align with data ownership"}),(0,s.jsx)("li",{children:"Context size is manageable for team"}),(0,s.jsx)("li",{children:"Context has cohesive set of capabilities"}),(0,s.jsx)("li",{children:"Context interfaces are well-defined"}),(0,s.jsx)("li",{children:"Context can evolve independently"})]})]})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("h3",{children:"Subgraph Mapping Decision"})}),(0,s.jsxs)("td",{children:[(0,s.jsx)("b",{children:"Should this bounded context be a single subgraph?"}),(0,s.jsxs)("ul",{children:[(0,s.jsxs)("li",{children:["Does the context represent a single business capability? ",(0,s.jsx)("b",{children:"\u2192 No: Consider splitting into multiple subgraphs / Yes: Continue evaluation"})]}),(0,s.jsxs)("li",{children:["Can the context be owned by a single team? ",(0,s.jsx)("b",{children:"\u2192 No: Split into team-owned subgraphs / Yes: Continue evaluation"})]}),(0,s.jsxs)("li",{children:["Are all entities in the context highly cohesive? ",(0,s.jsx)("b",{children:"\u2192 No: Consider entity-based subgraph split / Yes: Continue evaluation"})]}),(0,s.jsxs)("li",{children:["Does the context have consistent change frequency? ",(0,s.jsx)("b",{children:"\u2192 No: Consider splitting by change patterns / Yes: Good candidate for single subgraph"})]}),(0,s.jsxs)("li",{children:["Is the context size manageable for development and deployment? ",(0,s.jsx)("b",{children:"\u2192 No: Consider splitting for manageability / Yes: Proceed with single subgraph"})]})]})]}),(0,s.jsxs)("td",{children:[(0,s.jsx)("b",{children:"Subgraph Design Validation"}),(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Subgraph represents single bounded context"}),(0,s.jsx)("li",{children:"Subgraph has clear ownership"}),(0,s.jsx)("li",{children:"Subgraph entities are cohesive"}),(0,s.jsx)("li",{children:"Subgraph has minimal external dependencies"}),(0,s.jsx)("li",{children:"Subgraph can be deployed independently"}),(0,s.jsx)("li",{children:"Subgraph has appropriate size and complexity"}),(0,s.jsx)("li",{children:"Subgraph interfaces are well-defined"}),(0,s.jsx)("li",{children:"Subgraph evolution strategy is clear"})]})]})]}),(0,s.jsx)("tr",{children:(0,s.jsx)("td",{colspan:"3",children:(0,s.jsx)("h2",{children:"Entity and Aggregate Decisions"})})}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("h3",{children:"Entity vs Value Object Decision"})}),(0,s.jsxs)("td",{children:[(0,s.jsx)("b",{children:"Should this be an entity or value object?"}),(0,s.jsxs)("ul",{children:[(0,s.jsxs)("li",{children:["Does this concept have a distinct identity that matters to the business? ",(0,s.jsx)("b",{children:"\u2192 Yes: Entity / No: Continue evaluation"})]}),(0,s.jsxs)("li",{children:["Does this concept need to be tracked over time? ",(0,s.jsx)("b",{children:"\u2192 Yes: Entity / No: Continue evaluation"})]}),(0,s.jsxs)("li",{children:["Can two instances with the same attributes be considered identical? ",(0,s.jsx)("b",{children:"\u2192 Yes: Value Object / No: Entity"})]}),(0,s.jsxs)("li",{children:["Does this concept have a lifecycle independent of other concepts? ",(0,s.jsx)("b",{children:"\u2192 Yes: Entity / No: Value Object"})]})]})]}),(0,s.jsxs)("td",{children:[(0,s.jsx)("b",{children:"Entity Design Validation"}),(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Entity has stable, unique identity"}),(0,s.jsx)("li",{children:"Entity identity is meaningful to business"}),(0,s.jsx)("li",{children:"Entity has independent lifecycle"}),(0,s.jsx)("li",{children:"Entity can be referenced from other contexts"}),(0,s.jsx)("li",{children:"Entity supports required operations"}),(0,s.jsx)("li",{children:"Entity boundaries are clear"}),(0,s.jsx)("li",{children:"Entity state changes are tracked"}),(0,s.jsx)("li",{children:"Entity relationships are well-defined"})]}),(0,s.jsx)("br",{}),(0,s.jsx)("b",{children:"Value Object Design Validation"}),(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Value object has no identity"}),(0,s.jsx)("li",{children:"Value object is immutable"}),(0,s.jsx)("li",{children:"Value object validates its own invariants"}),(0,s.jsx)("li",{children:"Value object can be compared by value"}),(0,s.jsx)("li",{children:"Value object encapsulates related attributes"}),(0,s.jsx)("li",{children:"Value object has clear semantic meaning"}),(0,s.jsx)("li",{children:"Value object is reusable across contexts"}),(0,s.jsx)("li",{children:"Value object serialization is well-defined"})]})]})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("h3",{children:"Aggregate Boundary Decision"})}),(0,s.jsxs)("td",{children:[(0,s.jsx)("b",{children:"Should these entities be in the same aggregate?"}),(0,s.jsxs)("ul",{children:[(0,s.jsxs)("li",{children:["Do these entities need to be consistent together? ",(0,s.jsx)("b",{children:"\u2192 Yes: Same aggregate / No: Continue evaluation"})]}),(0,s.jsxs)("li",{children:["Do these entities change together as part of business operations? ",(0,s.jsx)("b",{children:"\u2192 Yes: Same aggregate / No: Continue evaluation"})]}),(0,s.jsxs)("li",{children:["Can these entities exist independently? ",(0,s.jsx)("b",{children:"\u2192 No: Same aggregate / Yes: Continue evaluation"})]}),(0,s.jsxs)("li",{children:["Is the relationship ownership or reference? ",(0,s.jsx)("b",{children:"\u2192 Ownership: Same aggregate / Reference: Different aggregates"})]}),(0,s.jsxs)("li",{children:["Would separating these entities create consistency issues? ",(0,s.jsx)("b",{children:"\u2192 Yes: Same aggregate / No: Different aggregates"})]})]})]}),(0,s.jsxs)("td",{children:[(0,s.jsx)("b",{children:"Aggregate Design Validation"}),(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Aggregate has single root entity"}),(0,s.jsx)("li",{children:"Aggregate maintains business invariants"}),(0,s.jsx)("li",{children:"Aggregate size is manageable"}),(0,s.jsx)("li",{children:"Aggregate boundaries respect consistency requirements"}),(0,s.jsx)("li",{children:"Aggregate operations are atomic"}),(0,s.jsx)("li",{children:"Aggregate can be loaded and saved as unit"}),(0,s.jsx)("li",{children:"Aggregate has clear ownership"}),(0,s.jsx)("li",{children:"Aggregate minimizes external dependencies"})]})]})]}),(0,s.jsx)("tr",{children:(0,s.jsx)("td",{colspan:"3",children:(0,s.jsx)("h2",{children:"Federation Design Decisions"})})}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("h3",{children:"Entity Federation Strategy"})}),(0,s.jsxs)("td",{children:[(0,s.jsx)("b",{children:"How should this entity be federated?"}),(0,s.jsxs)("ul",{children:[(0,s.jsxs)("li",{children:["Is this entity owned by this subgraph? ",(0,s.jsx)("b",{children:"\u2192 Yes: Define as primary entity with @key / No: Continue evaluation"})]}),(0,s.jsxs)("li",{children:["Does this subgraph need to add context-specific data to the entity? ",(0,s.jsx)("b",{children:"\u2192 Yes: Extend entity with relevant fields / No: Continue evaluation"})]}),(0,s.jsxs)("li",{children:["Does this subgraph only need to reference the entity? ",(0,s.jsx)("b",{children:"\u2192 Yes: Reference by ID only / No: Extend with needed fields"})]}),(0,s.jsxs)("li",{children:["Does this subgraph need to provide data for other subgraphs? ",(0,s.jsx)("b",{children:"\u2192 Yes: Use @provides directive / No: Standard extension"})]})]})]}),(0,s.jsxs)("td",{children:[(0,s.jsx)("b",{children:"Entity Federation Validation"}),(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Entity ownership is clear"}),(0,s.jsx)("li",{children:"Key fields are stable and unique"}),(0,s.jsx)("li",{children:"External fields are properly marked"}),(0,s.jsx)("li",{children:"Required fields are available"}),(0,s.jsx)("li",{children:"Provided fields are accurate"}),(0,s.jsx)("li",{children:"Federation directives are correct"}),(0,s.jsx)("li",{children:"Cross-subgraph references are minimal"}),(0,s.jsx)("li",{children:"Performance implications are considered"})]})]})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("h3",{children:"Field Resolution Strategy"})}),(0,s.jsxs)("td",{children:[(0,s.jsx)("b",{children:"How should this field be resolved?"}),(0,s.jsxs)("ul",{children:[(0,s.jsxs)("li",{children:["Is the data owned by this subgraph? ",(0,s.jsx)("b",{children:"\u2192 Yes: Resolve locally / No: Continue evaluation"})]}),(0,s.jsxs)("li",{children:["Is the data available from another subgraph? ",(0,s.jsx)("b",{children:"\u2192 Yes: Use federation to resolve / No: Continue evaluation"})]}),(0,s.jsxs)("li",{children:["Can the data be computed from available data? ",(0,s.jsx)("b",{children:"\u2192 Yes: Compute in resolver / No: Continue evaluation"})]}),(0,s.jsxs)("li",{children:["Is the data critical for this context? ",(0,s.jsx)("b",{children:"\u2192 Yes: Consider data replication / No: Use reference or omit"})]})]})]}),(0,s.jsxs)("td",{children:[(0,s.jsx)("b",{children:"Field Resolution Validation"}),(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Data ownership is clear"}),(0,s.jsx)("li",{children:"Resolution strategy is efficient"}),(0,s.jsx)("li",{children:"Dependencies are minimal"}),(0,s.jsx)("li",{children:"Error handling is robust"}),(0,s.jsx)("li",{children:"Performance is acceptable"}),(0,s.jsx)("li",{children:"Caching strategy is defined"}),(0,s.jsx)("li",{children:"Fallback behavior is specified"}),(0,s.jsx)("li",{children:"Monitoring is in place"})]})]})]}),(0,s.jsx)("tr",{children:(0,s.jsx)("td",{colspan:"3",children:(0,s.jsx)("h2",{children:"Schema Design Decisions"})})}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("h3",{children:"Type Design Strategy"})}),(0,s.jsxs)("td",{children:[(0,s.jsx)("b",{children:"What GraphQL type should this concept be?"}),(0,s.jsxs)("ul",{children:[(0,s.jsxs)("li",{children:["Does this concept represent a distinct business entity? ",(0,s.jsx)("b",{children:"\u2192 Yes: Object Type / No: Continue evaluation"})]}),(0,s.jsxs)("li",{children:["Does this concept represent a set of related values? ",(0,s.jsx)("b",{children:"\u2192 Yes: Object Type (Value Object) / No: Continue evaluation"})]}),(0,s.jsxs)("li",{children:["Does this concept represent a choice from fixed options? ",(0,s.jsx)("b",{children:"\u2192 Yes: Enum Type / No: Continue evaluation"})]}),(0,s.jsxs)("li",{children:["Does this concept define a contract for multiple implementations? ",(0,s.jsx)("b",{children:"\u2192 Yes: Interface Type / No: Continue evaluation"})]}),(0,s.jsxs)("li",{children:["Does this concept represent one of several possible types? ",(0,s.jsx)("b",{children:"\u2192 Yes: Union Type / No: Scalar Type"})]})]})]}),(0,s.jsxs)("td",{children:[(0,s.jsx)("b",{children:"Type Design Validation"}),(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Type purpose is clear"}),(0,s.jsx)("li",{children:"Type name follows conventions"}),(0,s.jsx)("li",{children:"Type fields are appropriate"}),(0,s.jsx)("li",{children:"Type relationships are well-defined"}),(0,s.jsx)("li",{children:"Type supports required operations"}),(0,s.jsx)("li",{children:"Type evolution is considered"}),(0,s.jsx)("li",{children:"Type documentation is complete"}),(0,s.jsx)("li",{children:"Type validation is comprehensive"})]})]})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("h3",{children:"Field Design Strategy"})}),(0,s.jsxs)("td",{children:[(0,s.jsx)("b",{children:"How should this field be designed?"}),(0,s.jsxs)("ul",{children:[(0,s.jsxs)("li",{children:["Is this field always present? ",(0,s.jsx)("b",{children:"\u2192 Yes: Non-nullable field / No: Continue evaluation"})]}),(0,s.jsxs)("li",{children:["Can this field be null in valid business scenarios? ",(0,s.jsx)("b",{children:"\u2192 Yes: Nullable field / No: Non-nullable field"})]}),(0,s.jsxs)("li",{children:["Does this field represent a collection? ",(0,s.jsx)("b",{children:"\u2192 Yes: List type / No: Continue evaluation"})]}),(0,s.jsxs)("li",{children:["Can the collection be empty? ",(0,s.jsx)("b",{children:"\u2192 Yes: Nullable list or non-null list of nullable items / No: Non-null list of non-null items"})]}),(0,s.jsxs)("li",{children:["Is this field computed from other data? ",(0,s.jsx)("b",{children:"\u2192 Yes: Resolver-computed field / No: Direct field mapping"})]})]})]}),(0,s.jsxs)("td",{children:[(0,s.jsx)("b",{children:"Field Design Validation"}),(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Field nullability is correct"}),(0,s.jsx)("li",{children:"Field type is appropriate"}),(0,s.jsx)("li",{children:"Field name follows conventions"}),(0,s.jsx)("li",{children:"Field documentation is clear"}),(0,s.jsx)("li",{children:"Field validation is defined"}),(0,s.jsx)("li",{children:"Field performance is acceptable"}),(0,s.jsx)("li",{children:"Field evolution is considered"}),(0,s.jsx)("li",{children:"Field relationships are correct"})]})]})]}),(0,s.jsx)("tr",{children:(0,s.jsx)("td",{colspan:"3",children:(0,s.jsx)("h2",{children:"Operation Design Decisions"})})}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("h3",{children:"Query vs Mutation Decision"})}),(0,s.jsxs)("td",{children:[(0,s.jsx)("b",{children:"Should this be a query or mutation?"}),(0,s.jsxs)("ul",{children:[(0,s.jsxs)("li",{children:["Does this operation change system state? ",(0,s.jsx)("b",{children:"\u2192 Yes: Mutation / No: Query"})]}),(0,s.jsxs)("li",{children:["Does this operation have side effects? ",(0,s.jsx)("b",{children:"\u2192 Yes: Mutation / No: Query"})]}),(0,s.jsxs)("li",{children:["Is this operation idempotent? ",(0,s.jsx)("b",{children:"\u2192 No: Mutation / Yes: Could be Query"})]}),(0,s.jsxs)("li",{children:["Does this operation need to be cached? ",(0,s.jsx)("b",{children:"\u2192 Yes: Prefer Query / No: Either Query or Mutation"})]})]})]}),(0,s.jsxs)("td",{children:[(0,s.jsx)("b",{children:"Operation Design Validation"}),(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Operation type is appropriate (Query/Mutation/Subscription)"}),(0,s.jsx)("li",{children:"Operation name is descriptive"}),(0,s.jsx)("li",{children:"Operation parameters are well-defined"}),(0,s.jsx)("li",{children:"Operation return type is appropriate"}),(0,s.jsx)("li",{children:"Operation error handling is comprehensive"}),(0,s.jsx)("li",{children:"Operation performance is acceptable"}),(0,s.jsx)("li",{children:"Operation security is considered"}),(0,s.jsx)("li",{children:"Operation documentation is complete"})]})]})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("h3",{children:"Input Design Strategy"})}),(0,s.jsxs)("td",{children:[(0,s.jsx)("b",{children:"How should operation inputs be structured?"}),(0,s.jsxs)("ul",{children:[(0,s.jsxs)("li",{children:["Does the operation have multiple parameters? ",(0,s.jsx)("b",{children:"\u2192 Yes: Use input object / No: Continue evaluation"})]}),(0,s.jsxs)("li",{children:["Are the parameters logically related? ",(0,s.jsx)("b",{children:"\u2192 Yes: Group in input object / No: Consider separate parameters"})]}),(0,s.jsxs)("li",{children:["Will the operation parameters evolve over time? ",(0,s.jsx)("b",{children:"\u2192 Yes: Use input object for flexibility / No: Either approach acceptable"})]}),(0,s.jsxs)("li",{children:["Do multiple operations share similar parameters? ",(0,s.jsx)("b",{children:"\u2192 Yes: Create reusable input types / No: Operation-specific input"})]})]})]}),(0,s.jsxs)("td",{children:[(0,s.jsx)("b",{children:"Input Design Validation"}),(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Input structure is logical"}),(0,s.jsx)("li",{children:"Input fields are appropriately nullable"}),(0,s.jsx)("li",{children:"Input validation is comprehensive"}),(0,s.jsx)("li",{children:"Input evolution is considered"}),(0,s.jsx)("li",{children:"Input reusability is maximized"}),(0,s.jsx)("li",{children:"Input documentation is clear"}),(0,s.jsx)("li",{children:"Input naming follows conventions"}),(0,s.jsx)("li",{children:"Input complexity is manageable"})]})]})]}),(0,s.jsx)("tr",{children:(0,s.jsx)("td",{colspan:"3",children:(0,s.jsx)("h2",{children:"Event Design Decisions"})})}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("h3",{children:"Event Granularity Decision"})}),(0,s.jsxs)("td",{children:[(0,s.jsx)("b",{children:"What should be the scope of this event?"}),(0,s.jsxs)("ul",{children:[(0,s.jsxs)("li",{children:["Does this represent a single business occurrence? ",(0,s.jsx)("b",{children:"\u2192 Yes: Single event / No: Continue evaluation"})]}),(0,s.jsxs)("li",{children:["Do multiple things happen atomically? ",(0,s.jsx)("b",{children:"\u2192 Yes: Single event with rich payload / No: Multiple events"})]}),(0,s.jsxs)("li",{children:["Do different consumers need different parts of the information? ",(0,s.jsx)("b",{children:"\u2192 Yes: Consider multiple events or rich event with optional data / No: Single event"})]}),(0,s.jsxs)("li",{children:["Is the event payload becoming too large? ",(0,s.jsx)("b",{children:"\u2192 Yes: Split into multiple events / No: Single event acceptable"})]})]})]}),(0,s.jsxs)("td",{children:[(0,s.jsx)("b",{children:"Event Design Validation"}),(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Event represents business occurrence"}),(0,s.jsx)("li",{children:"Event name uses past tense"}),(0,s.jsx)("li",{children:"Event payload is appropriate size"}),(0,s.jsx)("li",{children:"Event is immutable"}),(0,s.jsx)("li",{children:"Event includes necessary context"}),(0,s.jsx)("li",{children:"Event versioning is considered"}),(0,s.jsx)("li",{children:"Event ordering is defined"}),(0,s.jsx)("li",{children:"Event error handling is specified"})]})]})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("h3",{children:"Event Publishing Strategy"})}),(0,s.jsxs)("td",{children:[(0,s.jsx)("b",{children:"How should this event be published?"}),(0,s.jsxs)("ul",{children:[(0,s.jsxs)("li",{children:["Do consumers need immediate notification? ",(0,s.jsx)("b",{children:"\u2192 Yes: Real-time publishing / No: Continue evaluation"})]}),(0,s.jsxs)("li",{children:["Can consumers tolerate eventual consistency? ",(0,s.jsx)("b",{children:"\u2192 Yes: Asynchronous publishing / No: Synchronous publishing"})]}),(0,s.jsxs)("li",{children:["Do all consumers need all events? ",(0,s.jsx)("b",{children:"\u2192 No: Filtered publishing / Yes: Broadcast publishing"})]}),(0,s.jsxs)("li",{children:["Is event ordering important? ",(0,s.jsx)("b",{children:"\u2192 Yes: Ordered publishing / No: Unordered publishing acceptable"})]})]})]}),(0,s.jsxs)("td",{children:[(0,s.jsx)("b",{children:"Event Publishing Validation"}),(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Publishing mechanism is appropriate"}),(0,s.jsx)("li",{children:"Event routing is configured"}),(0,s.jsx)("li",{children:"Event filtering is available"}),(0,s.jsx)("li",{children:"Event ordering is preserved when needed"}),(0,s.jsx)("li",{children:"Event delivery guarantees are defined"}),(0,s.jsx)("li",{children:"Event error handling is robust"}),(0,s.jsx)("li",{children:"Event monitoring is in place"}),(0,s.jsx)("li",{children:"Event retention is managed"})]})]})]}),(0,s.jsx)("tr",{children:(0,s.jsx)("td",{colspan:"3",children:(0,s.jsx)("h2",{children:"Performance and Scalability Decisions"})})}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("h3",{children:"Caching Strategy Decision"})}),(0,s.jsxs)("td",{children:[(0,s.jsx)("b",{children:"What caching strategy should be used?"}),(0,s.jsxs)("ul",{children:[(0,s.jsxs)("li",{children:["Does this data change frequently? ",(0,s.jsx)("b",{children:"\u2192 Yes: Short TTL or no caching / No: Continue evaluation"})]}),(0,s.jsxs)("li",{children:["Is this data expensive to compute? ",(0,s.jsx)("b",{children:"\u2192 Yes: Cache with appropriate TTL / No: Continue evaluation"})]}),(0,s.jsxs)("li",{children:["Do multiple clients request the same data? ",(0,s.jsx)("b",{children:"\u2192 Yes: Shared caching / No: Client-side caching"})]}),(0,s.jsxs)("li",{children:["Is data consistency critical? ",(0,s.jsx)("b",{children:"\u2192 Yes: Cache invalidation strategy needed / No: TTL-based caching acceptable"})]})]})]}),(0,s.jsxs)("td",{children:[(0,s.jsx)("b",{children:"Caching Strategy Validation"}),(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Caching strategy matches data characteristics"}),(0,s.jsx)("li",{children:"Cache TTL is appropriate"}),(0,s.jsx)("li",{children:"Cache invalidation is handled"}),(0,s.jsx)("li",{children:"Cache performance is monitored"}),(0,s.jsx)("li",{children:"Cache consistency is maintained"}),(0,s.jsx)("li",{children:"Cache storage is appropriate"}),(0,s.jsx)("li",{children:"Cache security is considered"}),(0,s.jsx)("li",{children:"Cache evolution is planned"})]})]})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("h3",{children:"Pagination Strategy Decision"})}),(0,s.jsxs)("td",{children:[(0,s.jsx)("b",{children:"What pagination approach should be used?"}),(0,s.jsxs)("ul",{children:[(0,s.jsxs)("li",{children:["Is the dataset size bounded and small? ",(0,s.jsx)("b",{children:"\u2192 Yes: No pagination needed / No: Continue evaluation"})]}),(0,s.jsxs)("li",{children:["Do clients need to navigate arbitrarily through the dataset? ",(0,s.jsx)("b",{children:"\u2192 Yes: Cursor-based pagination / No: Continue evaluation"})]}),(0,s.jsxs)("li",{children:["Is the dataset frequently updated? ",(0,s.jsx)("b",{children:"\u2192 Yes: Cursor-based pagination / No: Offset-based pagination acceptable"})]}),(0,s.jsxs)("li",{children:["Do clients need to know total count? ",(0,s.jsx)("b",{children:"\u2192 Yes: Include total count / No: Omit total count for performance"})]})]})]}),(0,s.jsxs)("td",{children:[(0,s.jsx)("b",{children:"Pagination Strategy Validation"}),(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Pagination approach matches use case"}),(0,s.jsx)("li",{children:"Page size limits are enforced"}),(0,s.jsx)("li",{children:"Pagination performance is acceptable"}),(0,s.jsx)("li",{children:"Pagination consistency is maintained"}),(0,s.jsx)("li",{children:"Pagination metadata is appropriate"}),(0,s.jsx)("li",{children:"Pagination error handling is robust"}),(0,s.jsx)("li",{children:"Pagination documentation is clear"}),(0,s.jsx)("li",{children:"Pagination evolution is considered"})]})]})]})]})]})}),(0,s.jsx)(l.A,{value:"schema-patterns",label:"Patterns",children:(0,s.jsxs)("table",{class:"text_vertical",children:[(0,s.jsx)("thead",{children:(0,s.jsxs)("tr",{children:[(0,s.jsx)("th",{children:"DDD Concept"}),(0,s.jsx)("th",{children:"Definition"}),(0,s.jsx)("th",{children:"Characteristics"}),(0,s.jsx)("th",{children:"Considerations"}),(0,s.jsx)("th",{children:"Example"})]})}),(0,s.jsxs)("tbody",{children:[(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Ubiquitous Language"})}),(0,s.jsx)("td",{children:"A common language shared between domain experts and developers, reflected in code and schema"}),(0,s.jsx)("td",{children:(0,s.jsx)("ul",{children:(0,s.jsx)("li",{children:"Type names must use domain terminology, not technical terms"})})}),(0,s.jsx)("td",{children:(0,s.jsx)("ul",{children:(0,s.jsx)("li",{children:"All type names use business terminology"})})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:"# \u2705 Good - Uses domain language\ntype Order {\n    orderNumber: String!\n    customer: Customer!\n    lineItems: [LineItem!]!\n    totalAmount: Money!\n    status: OrderStatus!\n}\n\n# \u274c Bad - Uses technical language\ntype OrderRecord {\n    id: ID!\n    customerId: ID!\n    items: [OrderItemRecord!]!\n    total: Float!\n    statusCode: Int!\n}\n"})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Aggregate Root Pattern"})}),(0,s.jsx)("td",{children:"Designate a single entity as the aggregate root and route all operations through it"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Complex business entities with multiple components"}),(0,s.jsx)("li",{children:"Strong consistency requirements"}),(0,s.jsx)("li",{children:"Clear business boundaries"}),(0,s.jsx)("li",{children:"Transactional operations needed"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Maintains business invariants"}),(0,s.jsx)("li",{children:"Encapsulates business logic"}),(0,s.jsx)("li",{children:"Clear ownership boundaries"}),(0,s.jsx)("li",{children:"Simplified consistency model"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:'# Aggregate Root\ntype Order @key(fields: "id") {\n    id: ID!\n    orderNumber: String!\n    customerId: ID!\n\n    # Aggregate components (owned entities)\n    lineItems: [LineItem!]!\n    shippingAddress: Address!\n    billingAddress: Address!\n\n    # Aggregate state\n    status: OrderStatus!\n    totalAmount: Money!\n\n    # Aggregate behavior\n    canBeCancelled: Boolean!\n    canBeModified: Boolean!\n    estimatedDelivery: DateTime!\n}\n\n# Internal entities (not directly accessible)\ntype LineItem {\n    productSku: String!\n    quantity: Int!\n    unitPrice: Money!\n    lineTotal: Money!\n}\n\n# Mutations operate on aggregate root\ntype Mutation {\n    createOrder(input: CreateOrderInput!): CreateOrderPayload!\n    addLineItem(orderId: ID!, input: LineItemInput!): AddLineItemPayload!\n    updateOrderStatus(orderId: ID! status: OrderStatus!): UpdateOrderStatusPayload!\n    cancelOrder(orderId: ID!, reason: String!): CancelOrderPayload!\n}\n'})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Domain Service Pattern"})}),(0,s.jsx)("td",{children:"Create domain services that encapsulate complex business logic"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Complex calculations or algorithms"}),(0,s.jsx)("li",{children:"Operations spanning multiple aggregates"}),(0,s.jsx)("li",{children:"Stateless business logic"}),(0,s.jsx)("li",{children:"Cross-cutting concerns"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Encapsulates complex logic"}),(0,s.jsx)("li",{children:"Promotes reusability"}),(0,s.jsx)("li",{children:"Clear separation of concerns"}),(0,s.jsx)("li",{children:"Testable business logic"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:"type Query {\n# Pricing domain service\n    calculatePrice(input: PriceCalculationInput!): PriceQuote!\n\n    # Shipping domain service\n    calculateShipping(input: ShippingCalculationInput!): ShippingQuote!\n\n    # Inventory domain service\n    checkAvailability(input: AvailabilityCheckInput!): AvailabilityResult!\n\n    # Recommendation domain service\n    getRecommendations(input: RecommendationInput!): RecommendationResult!\n}\n\ntype PriceQuote {\n    basePrice: Money!\n    discounts: [Discount!]!\n    taxes: [Tax!]!\n    finalPrice: Money!\n    validUntil: DateTime!\n\n    # Service metadata\n    calculationId: ID!\n    calculatedAt: DateTime!\n    pricingRules: [PricingRule!]!\n}\n\ntype Mutation {\n    # Order processing domain service\n    processOrder(input: ProcessOrderInput!): ProcessOrderResult!\n\n    # Payment processing domain service\n    processPayment(input: ProcessPaymentInput!): ProcessPaymentResult!\n\n    # Fulfillment domain service\n    fulfillOrder(input: FulfillOrderInput!): FulfillOrderResult!\n}\n"})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Repository Pattern"})}),(0,s.jsx)("td",{children:"Create repository-style query interfaces that hide persistence details"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Complex query requirements"}),(0,s.jsx)("li",{children:"Multiple access patterns for same data"}),(0,s.jsx)("li",{children:"Need for pagination and filtering"}),(0,s.jsx)("li",{children:"Abstraction over data storage"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Domain-focused query interface"}),(0,s.jsx)("li",{children:"Hides persistence complexity"}),(0,s.jsx)("li",{children:"Supports multiple access patterns"}),(0,s.jsx)("li",{children:"Enables query optimization"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:"type Query {\n    # Customer repository\n    customer(id: ID!): Customer\n    customerByNumber(customerNumber: String!): Customer\n    customerByEmail(email: String!): Customer\n    customers(filter: CustomerFilter, sort: CustomerSort): CustomerConnection!\n\n    # Product repository\n    product(sku: String!): Product\n    productsByCategory(category: String!): [Product!]!\n    searchProducts(query: String!, filter: ProductFilter): ProductSearchResult!\n\n    # Order repository\n    order(id: ID!): Order\n    orderByNumber(orderNumber: String!): Order\n    customerOrders(customerId: ID!, filter: OrderFilter): [Order!]!\n    ordersInDateRange(from: DateTime!, to: DateTime!): [Order!]!\n}\n\n# Rich filter types\ninput CustomerFilter {\n    isActive: Boolean\n    loyaltyLevel: [LoyaltyLevel!]\n    registeredAfter: DateTime\n    registeredBefore: DateTime\n    hasOrders: Boolean\n    totalSpentRange: MoneyRange\n}\n\n# Connection types for pagination\ntype CustomerConnection {\n    edges: [CustomerEdge!]!\n    pageInfo: PageInfo!\n    totalCount: Int!\n}\n"})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Entity Extension Pattern"})}),(0,s.jsx)("td",{children:"Use GraphQL federation to extend entities with relevant context data"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Entity spans multiple bounded contexts"}),(0,s.jsx)("li",{children:"Context-specific data needs"}),(0,s.jsx)("li",{children:"Avoiding god objects"}),(0,s.jsx)("li",{children:"Maintaining separation of concerns"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Maintains bounded context integrity"}),(0,s.jsx)("li",{children:"Avoids data duplication"}),(0,s.jsx)("li",{children:"Enables rich cross-context queries"}),(0,s.jsx)("li",{children:"Supports independent evolution"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:'# Customer subgraph (entity owner)\ntype Customer @key(fields: "id") {\n    id: ID!\n    customerNumber: String!\n    profile: CustomerProfile!\n    registrationDate: DateTime!\n}\n\n# Order subgraph (extends with order context)\nextend type Customer @key(fields: "id") {\n    id: ID! @external\n\n    # Order-specific customer data\n    orders: [Order!]!\n    orderHistory: OrderHistory!\n    loyaltyPoints: Int!\n    preferredShippingAddress: Address\n}\n\n# Marketing subgraph (extends with marketing context)\nextend type Customer @key(fields: "id") {\n    id: ID! @external\n\n    # Marketing-specific customer data\n    marketingPreferences: MarketingPreferences!\n    campaignHistory: [Campaign!]!\n    segmentMemberships: [Segment!]!\n    recommendedProducts: [Product!]!\n}\n'})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Federated Aggregate Pattern"})}),(0,s.jsx)("td",{children:"Keep aggregate root in one subgraph and use events for cross-aggregate coordination"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Aggregates span multiple contexts"}),(0,s.jsx)("li",{children:"Eventual consistency is acceptable"}),(0,s.jsx)("li",{children:"Need for loose coupling"}),(0,s.jsx)("li",{children:"Complex business processes"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Maintains aggregate boundaries"}),(0,s.jsx)("li",{children:"Enables loose coupling"}),(0,s.jsx)("li",{children:"Supports complex workflows"}),(0,s.jsx)("li",{children:"Provides audit trail"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:'# Order subgraph (aggregate owner)\ntype Order @key(fields: "id") {\n    id: ID!\n    customerId: ID!\n    status: OrderStatus!\n    lineItems: [LineItem!]!\n    totalAmount: Money!\n}\n\ntype Mutation {\nplaceOrder(input: PlaceOrderInput!): PlaceOrderPayload!\n    # Publishes OrderPlaced event\n}\n\n# Inventory subgraph (separate aggregate)\ntype InventoryItem @key(fields: "productSku") {\n    productSku: String!\n    quantityAvailable: Int!\n    quantityReserved: Int!\n}\n\ntype Subscription {\n    # Listens for order events\n    orderEvents: OrderEvent!\n}\n\ntype Mutation {\n    # Handles order events\n    reserveInventory(input: ReserveInventoryInput!): ReserveInventoryPayload!\n}\n\n# Event coordination\nunion OrderEvent = OrderPlaced | OrderCancelled | OrderShipped\n'})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Gateway Aggregation Pattern"})}),(0,s.jsx)("td",{children:"Create aggregation types that combine data from multiple sources"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Complex UI requirements"}),(0,s.jsx)("li",{children:"Multiple data sources needed"}),(0,s.jsx)("li",{children:"Performance optimization required"}),(0,s.jsx)("li",{children:"Simplified client queries"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Reduces client complexity"}),(0,s.jsx)("li",{children:"Optimizes data fetching"}),(0,s.jsx)("li",{children:"Provides unified views"}),(0,s.jsx)("li",{children:"Enables caching strategies"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:"# Gateway aggregation types\ntype CustomerDashboard {\n    customer: Customer!\n    orderSummary: OrderSummary!\n    paymentMethods: [PaymentMethod!]!\n    recommendations: [Product!]!\n    notifications: [Notification!]!\n\n    # Aggregation metadata\n    lastUpdated: DateTime!\n    dataFreshness: DataFreshness!\n}\n\ntype OrderSummary {\n    totalOrders: Int!\n    totalSpent: Money!\n    averageOrderValue: Money!\n    lastOrderDate: DateTime!\n\n    # Recent activity\n    recentOrders: [Order!]!\n    pendingOrders: [Order!]!\n}\n\ntype Query {\n    # Aggregated views\n    customerDashboard(customerId: ID!): CustomerDashboard!\n    orderAnalytics(filter: AnalyticsFilter!): OrderAnalytics!\n    inventoryReport(filter: InventoryFilter!): InventoryReport!\n}\n"})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Event Sourcing Pattern"})}),(0,s.jsx)("td",{children:"Store all changes as immutable events and build current state from events"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Complete audit trail required"}),(0,s.jsx)("li",{children:"Temporal queries needed"}),(0,s.jsx)("li",{children:"Complex business processes"}),(0,s.jsx)("li",{children:"Regulatory compliance"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Complete audit trail"}),(0,s.jsx)("li",{children:"Temporal query capabilities"}),(0,s.jsx)("li",{children:"Natural event publishing"}),(0,s.jsx)("li",{children:"Debugging and analysis support"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:'# Event store interface\ntype EventStore {\n    events(aggregateId: ID!, fromVersion: Int): [DomainEvent!]!\n    eventsByType(eventType: String!, from: DateTime): [DomainEvent!]!\n    appendEvent(event: DomainEventInput!): AppendEventResult!\n}\n\n# Domain events\ninterface DomainEvent {\n    eventId: ID!\n    aggregateId: ID!\n    eventType: String!\n    occurredAt: DateTime!\n    version: Int!\n}\n\ntype CustomerRegistered implements DomainEvent {\n    eventId: ID!\n    aggregateId: ID!\n    eventType: String!\n    occurredAt: DateTime!\n    version: Int!\n\n    # Event data\n    customerNumber: String!\n    email: String!\n    registrationChannel: String!\n}\n\n# Event-sourced aggregate\ntype Customer @key(fields: "id") {\n    id: ID!\n    version: Int!\n\n    # Current state (projected from events)\n    customerNumber: String!\n    profile: CustomerProfile!\n    status: CustomerStatus!\n\n    # Event history\n    events: [DomainEvent!]!\n\n    # Temporal queries\n    stateAt(timestamp: DateTime!): CustomerSnapshot!\n}\n'})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Saga Pattern"})}),(0,s.jsx)("td",{children:"Use saga orchestration to manage distributed transactions"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Long-running business processes"}),(0,s.jsx)("li",{children:"Multiple service coordination"}),(0,s.jsx)("li",{children:"Compensation required"}),(0,s.jsx)("li",{children:"Complex workflows"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Manages distributed transactions"}),(0,s.jsx)("li",{children:"Provides compensation mechanisms"}),(0,s.jsx)("li",{children:"Enables complex workflows"}),(0,s.jsx)("li",{children:"Maintains process visibility"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:"# Saga orchestrator\ntype OrderFulfillmentSaga {\n    sagaId: ID!\n    orderId: ID!\n    currentStep: SagaStep!\n    status: SagaStatus!\n\n    # Saga state\n    inventoryReserved: Boolean!\n    paymentProcessed: Boolean!\n    shippingArranged: Boolean!\n\n    # Compensation tracking\n    compensationActions: [CompensationAction!]!\n\n    # Saga timeline\n    startedAt: DateTime!\n    completedAt: DateTime\n    steps: [SagaStepExecution!]!\n}\n\nenum SagaStep {\n    RESERVE_INVENTORY\n    PROCESS_PAYMENT\n    ARRANGE_SHIPPING\n    COMPLETE_ORDER\n}\n\ntype Mutation {\n    # Saga management\n    startOrderFulfillment(orderId: ID!): StartSagaResult!\n    compensateOrderFulfillment(sagaId: ID!): CompensationResult!\n\n    # Step execution\n    executeReserveInventory(sagaId: ID!): StepResult!\n    executeProcessPayment(sagaId: ID!): StepResult!\n    executeArrangeShipping(sagaId: ID!): StepResult!\n}\n\ntype Subscription {\n    sagaEvents(sagaId: ID!): SagaEvent!\n}\n"})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"DataLoader Pattern"})}),(0,s.jsx)("td",{children:"Implement batching and caching for entity resolution"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"N+1 query problems"}),(0,s.jsx)("li",{children:"High-frequency entity access"}),(0,s.jsx)("li",{children:"Performance optimization needed"}),(0,s.jsx)("li",{children:"Large result sets"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Eliminates N+1 queries"}),(0,s.jsx)("li",{children:"Improves performance"}),(0,s.jsx)("li",{children:"Reduces service load"}),(0,s.jsx)("li",{children:"Enables caching"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:'# Efficient entity resolution\ntype Order @key(fields: "id") {\n    id: ID!\n    customerId: ID!\n    lineItems: [LineItem!]!\n\n    # Efficiently resolved via DataLoader\n    customer: Customer!\n}\n\ntype LineItem {\n    productSku: String!\n    quantity: Int!\n\n    # Batch loaded products\n    product: Product!\n}\n\n# Batch loading interface (implementation detail)\ntype BatchLoader {\n    loadCustomers(ids: [ID!]!): [Customer!]!\n    loadProducts(skus: [String!]!): [Product!]!\n    loadOrders(ids: [ID!]!): [Order!]!\n}\n'})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Caching Strategy Pattern"})}),(0,s.jsx)("td",{children:"Implement multi-level caching with appropriate invalidation strategies"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Performance optimization required"}),(0,s.jsx)("li",{children:"Expensive computations"}),(0,s.jsx)("li",{children:"High-frequency access patterns"}),(0,s.jsx)("li",{children:"Static or semi-static data"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Improves response times"}),(0,s.jsx)("li",{children:"Reduces computational load"}),(0,s.jsx)("li",{children:"Scales better under load"}),(0,s.jsx)("li",{children:"Provides better user experience"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:'# Cache-aware types\ntype Product @key(fields: "sku") {\n    sku: String!\n    name: String!\n    price: Money!\n\n    # Cache metadata\n    cacheInfo: CacheInfo!\n}\n\ntype CacheInfo {\n    cacheKey: String!\n    ttl: Int!\n    lastUpdated: DateTime!\n    cacheHit: Boolean!\n}\n\n# Cache control directives\ntype Query {\n    # Short-lived cache for dynamic data\n    inventory(productSku: String!): InventoryLevel! @cacheControl(maxAge: 60)\n\n    # Long-lived cache for static data\n    productCatalog: [Product!]! @cacheControl(maxAge: 3600)\n\n    # No cache for personalized data\n    customerRecommendations(customerId: ID!): [Product!]! @cacheControl(maxAge: 0)\n}\n'})})})]})]})]})}),(0,s.jsx)(l.A,{value:"schema-anti-patterns",label:"Anti-Patterns",children:(0,s.jsxs)("table",{class:"text_vertical",children:[(0,s.jsx)("thead",{children:(0,s.jsxs)("tr",{children:[(0,s.jsx)("th",{children:"DDD Concept"}),(0,s.jsx)("th",{children:"Definition"}),(0,s.jsx)("th",{children:"Characteristics"}),(0,s.jsx)("th",{children:"Considerations"}),(0,s.jsx)("th",{children:"Example"})]})}),(0,s.jsxs)("tbody",{children:[(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Ubiquitous Language"})}),(0,s.jsx)("td",{children:"A common language shared between domain experts and developers, reflected in code and schema"}),(0,s.jsx)("td",{children:(0,s.jsx)("ul",{children:(0,s.jsx)("li",{children:"Type names must use domain terminology, not technical terms"})})}),(0,s.jsx)("td",{children:(0,s.jsx)("ul",{children:(0,s.jsx)("li",{children:"All type names use business terminology"})})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:"# \u2705 Good - Uses domain language\ntype Order {\n    orderNumber: String!\n    customer: Customer!\n    lineItems: [LineItem!]!\n    totalAmount: Money!\n    status: OrderStatus!\n}\n\n# \u274c Bad - Uses technical language\ntype OrderRecord {\n    id: ID!\n    customerId: ID!\n    items: [OrderItemRecord!]!\n    total: Float!\n    statusCode: Int!\n}\n"})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Anemic Domain Model"})}),(0,s.jsx)("td",{children:"Creating types that only contain data without behavior or business logic"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Separates data from behavior"}),(0,s.jsx)("li",{children:"Makes business logic hard to find and maintain"}),(0,s.jsx)("li",{children:"Violates DDD principles"}),(0,s.jsx)("li",{children:"Leads to procedural programming in GraphQL"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Embed business logic in domain types"}),(0,s.jsx)("li",{children:"Use computed fields for business rules"}),(0,s.jsx)("li",{children:"Create rich value objects"}),(0,s.jsx)("li",{children:"Encapsulate behavior with data"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:"# \u274c Bad - Anemic domain model\ntype Customer {\n    id: ID!\n    firstName: String!\n    lastName: String!\n    email: String!\n    totalSpent: Float!\n    orderCount: Int!\n}\n\ntype Query {\n    # Business logic in separate operations\n    calculateCustomerDiscount(customerId: ID!, orderAmount: Float!): Float!\n    validateCustomerCredit(customerId: ID!, amount: Float!): Boolean!\n    determineShippingEligibility(customerId: ID!): Boolean!\n}\n\n# \u2705 Good - Rich domain model\ntype Customer {\n    id: ID!\n    firstName: String!\n    lastName: String!\n    email: String!\n\n    # Business behavior embedded in the model\n    loyaltyLevel: LoyaltyLevel!\n    availableCredit: Money!\n    isEligibleForFreeShipping: Boolean!\n\n    # Computed business properties\n    lifetimeValue: Money!\n    riskScore: RiskScore!\n}\n\ntype LoyaltyLevel {\n    tier: LoyaltyTier!\n    discountPercentage: Float!\n    benefits: [LoyaltyBenefit!]!\n    nextTierRequirement: Money\n}\n"})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Database-Driven Schema Design"})}),(0,s.jsx)("td",{children:"Designing GraphQL schema to match database structure instead of domain model"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Exposes implementation details"}),(0,s.jsx)("li",{children:"Uses technical naming"}),(0,s.jsx)("li",{children:"Doesn't reflect business concepts"}),(0,s.jsx)("li",{children:"Makes schema hard to understand"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Design schema based on domain model"}),(0,s.jsx)("li",{children:"Use business terminology"}),(0,s.jsx)("li",{children:"Hide database implementation details"}),(0,s.jsx)("li",{children:"Focus on business capabilities"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:'# \u274c Bad - Database-driven design\ntype CustomerRecord {\n    cust_id: ID!\n    first_name: String!\n    last_name: String!\n    email_addr: String!\n    created_dt: String!\n    updated_dt: String!\n    status_cd: Int!\n}\n\ntype OrderRecord {\n    order_id: ID!\n    cust_id: ID!\n    order_dt: String!\n    total_amt: Float!\n    currency_cd: String!\n    status_cd: Int!\n}\n\ntype OrderLineRecord {\n    line_id: ID!\n    order_id: ID!\n    prod_id: ID!\n    qty: Int!\n    unit_price: Float!\n}\n\n# \u2705 Good - Domain-driven design\ntype Customer @key(fields: "id") {\n    id: ID!\n    customerNumber: String!\n    profile: CustomerProfile!\n    registrationDate: DateTime!\n    status: CustomerStatus!\n}\n\ntype Order @key(fields: "id") {\n    id: ID!\n    orderNumber: String!\n    customer: Customer!\n    placementDate: DateTime!\n    totalAmount: Money!\n    status: OrderStatus!\n    lineItems: [LineItem!]!\n}\n\ntype LineItem {\n    product: Product!\n    quantity: Int!\n    unitPrice: Money!\n    lineTotal: Money!\n}\n'})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"God Object Anti-Pattern"})}),(0,s.jsx)("td",{children:"Creating overly large types that contain too many responsibilities"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Violates single responsibility principle"}),(0,s.jsx)("li",{children:"Makes types hard to understand and maintain"}),(0,s.jsx)("li",{children:"Creates tight coupling"}),(0,s.jsx)("li",{children:"Complicates evolution"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Decompose large types into smaller, focused types"}),(0,s.jsx)("li",{children:"Use composition over large flat structures"}),(0,s.jsx)("li",{children:"Group related fields into value objects"}),(0,s.jsx)("li",{children:"Respect aggregate boundaries"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:'# \u274c Bad - God object\ntype Customer {\n    # Identity\n    id: ID!\n    customerNumber: String!\n\n    # Personal info\n    firstName: String!\n    lastName: String!\n    birthDate: Date!\n\n    # Contact info\n    email: String!\n    phone: String!\n\n    # Address info\n    billingStreet: String!\n    billingCity: String!\n    billingState: String!\n    billingZip: String!\n    shippingStreet: String!\n    shippingCity: String!\n    shippingState: String!\n    shippingZip: String!\n\n    # Order info\n    orders: [Order!]!\n    totalOrders: Int!\n    totalSpent: Money!\n    averageOrderValue: Money!\n\n    # Payment info\n    paymentMethods: [PaymentMethod!]!\n    defaultPaymentMethod: PaymentMethod!\n\n    # Marketing info\n    marketingOptIn: Boolean!\n    preferredChannel: String!\n    segments: [String!]!\n\n    # Support info\n    supportTickets: [SupportTicket!]!\n    supportLevel: String!\n}\n\n# \u2705 Good - Properly decomposed\ntype Customer @key(fields: "id") {\n    id: ID!\n    customerNumber: String!\n    profile: CustomerProfile!\n    status: CustomerStatus!\n}\n\ntype CustomerProfile {\n    personalInfo: PersonalInfo!\n    contactInfo: ContactInfo!\n    addresses: CustomerAddresses!\n    preferences: CustomerPreferences!\n}\n\ntype PersonalInfo {\n    firstName: String!\n    lastName: String!\n    birthDate: Date!\n}\n\ntype ContactInfo {\n    email: String!\n    phone: String!\n    preferredContactMethod: ContactMethod!\n}\n\ntype CustomerAddresses {\n    billing: Address!\n    shipping: Address\n    additional: [Address!]!\n}\n'})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Chatty Federation"})}),(0,s.jsx)("td",{children:"Creating excessive cross-subgraph calls for simple operations"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Poor query performance"}),(0,s.jsx)("li",{children:"High latency"}),(0,s.jsx)("li",{children:"Service coupling"}),(0,s.jsx)("li",{children:"Reliability issues"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Use @provides directive to optimize data fetching"}),(0,s.jsx)("li",{children:"Include necessary data in owning subgraph"}),(0,s.jsx)("li",{children:"Pre-compute aggregations"}),(0,s.jsx)("li",{children:"Design for query patterns"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:'# \u274c Bad - Chatty federation\n# Customer subgraph\ntype Customer @key(fields: "id") {\n    id: ID!\n    name: String!\n}\n\n# Order subgraph\nextend type Customer @key(fields: "id") {\n    id: ID! @external\n    orders: [Order!]!\n}\n\n# Product subgraph\nextend type Order @key(fields: "id") {\n    id: ID! @external\n    products: [Product!]! @requires(fields: "lineItems { productId }")\n}\n\n# Inventory subgraph\nextend type Product @key(fields: "id") {\n    id: ID! @external\n    availability: Availability! # Requires call to inventory service\n}\n# Results in: Customer \u2192 Orders \u2192 Products \u2192 Availability (4 service calls)\n\n# \u2705 Good - Optimized federation\n# Order subgraph includes necessary data\ntype Order @key(fields: "id") {\n    id: ID!\n    customer: Customer! @provides(fields: "name")\n    lineItems: [LineItem!]!\n    orderSummary: OrderSummary! # Pre-computed summary\n}\n\ntype LineItem {\n    product: Product! @provides(fields: "name price")\n    quantity: Int!\n    availability: AvailabilitySnapshot! # Snapshot at order time\n}\n\ntype OrderSummary {\n    totalItems: Int!\n    totalAmount: Money!\n    estimatedDelivery: DateTime!\n}\n'})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Shared Database Anti-Pattern"})}),(0,s.jsx)("td",{children:"Multiple subgraphs accessing the same database tables"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Violates bounded context principles"}),(0,s.jsx)("li",{children:"Creates tight coupling"}),(0,s.jsx)("li",{children:"Makes evolution difficult"}),(0,s.jsx)("li",{children:"Causes data consistency issues"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Each subgraph owns its data"}),(0,s.jsx)("li",{children:"Use events for data synchronization"}),(0,s.jsx)("li",{children:"Maintain separate data stores"}),(0,s.jsx)("li",{children:"Respect bounded context boundaries"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:'# \u274c Bad - Shared database access\n# Customer subgraph accesses customers table\ntype Customer @key(fields: "id") {\n    id: ID!\n    name: String!\n    email: String!\n}\n\n# Order subgraph also accesses customers table\nextend type Customer @key(fields: "id") {\n    id: ID! @external\n    # Directly queries customer table for this data\n    totalOrders: Int!\n    lastOrderDate: DateTime!\n}\n\n# Marketing subgraph also accesses customers table\nextend type Customer @key(fields: "id") {\n    id: ID! @external\n    # Directly queries customer table\n    marketingSegments: [String!]!\n    optInStatus: Boolean!\n}\n\n# \u2705 Good - Clear data ownership\n# Customer subgraph owns customer data\ntype Customer @key(fields: "id") {\n    id: ID!\n    name: String!\n    email: String!\n    profile: CustomerProfile!\n}\n\n# Order subgraph maintains its own order statistics\nextend type Customer @key(fields: "id") {\n    id: ID! @external\n    orderStatistics: OrderStatistics! # From order service\'s own data\n}\n\n# Marketing subgraph maintains its own customer data\nextend type Customer @key(fields: "id") {\n    id: ID! @external\n    marketingProfile: MarketingProfile! # From marketing service\'s own data\n}\n'})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Leaky Abstraction Anti-Pattern"})}),(0,s.jsx)("td",{children:"Exposing internal implementation details through the GraphQL schema"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Couples clients to implementation"}),(0,s.jsx)("li",{children:"Makes refactoring difficult"}),(0,s.jsx)("li",{children:"Exposes unnecessary complexity"}),(0,s.jsx)("li",{children:"Violates encapsulation"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Hide implementation details"}),(0,s.jsx)("li",{children:"Use domain language in schema"}),(0,s.jsx)("li",{children:"Focus on business capabilities"}),(0,s.jsx)("li",{children:"Maintain clean abstractions"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:'# \u274c Bad - Leaky abstraction\ntype Customer {\n    id: ID!\n    name: String!\n\n    # Exposing internal database structure\n    customerRecord: CustomerRecord!\n    auditLog: [AuditLogEntry!]!\n\n    # Exposing internal service calls\n    externalSystemId: String!\n    lastSyncTimestamp: DateTime!\n    syncStatus: String!\n\n    # Exposing caching details\n    cacheKey: String!\n    cacheExpiry: DateTime!\n}\n\ntype CustomerRecord {\n    # Raw database fields\n    created_at: DateTime!\n    updated_at: DateTime!\n    version: Int!\n    deleted_flag: Boolean!\n}\n\n# \u2705 Good - Clean abstraction\ntype Customer @key(fields: "id") {\n    id: ID!\n    customerNumber: String!\n    profile: CustomerProfile!\n\n    # Business-focused metadata\n    registrationDate: DateTime!\n    lastActivityDate: DateTime!\n    status: CustomerStatus!\n\n    # Domain-relevant relationships\n    orders: [Order!]!\n    preferences: CustomerPreferences!\n}\n\nenum CustomerStatus {\n    ACTIVE\n    INACTIVE\n    SUSPENDED\n    PENDING_VERIFICATION\n}\n'})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Primitive Obsession"})}),(0,s.jsx)("td",{children:"Using primitive types instead of domain-specific value objects"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Loses domain meaning"}),(0,s.jsx)("li",{children:"No validation or business rules"}),(0,s.jsx)("li",{children:"Difficult to evolve"}),(0,s.jsx)("li",{children:"Error-prone for clients"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Create value objects for domain concepts"}),(0,s.jsx)("li",{children:"Use enums for fixed choices"}),(0,s.jsx)("li",{children:"Embed validation in types"}),(0,s.jsx)("li",{children:"Make invalid states unrepresentable"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:"# \u274c Bad - Primitive obsession\ntype Product {\n    id: ID!\n    name: String!\n    price: Float! # Should be Money\n    weight: Float! # Should be Weight with unit\n    dimensions: String! # Should be structured Dimensions\n    currency: String! # Should be enum\n    availability: String! # Should be enum or rich type\n    tags: String! # Should be array\n}\n\ntype Order {\n    id: ID!\n    total: Float! # Should be Money\n    tax: Float! # Should be Money\n    shipping: Float! # Should be Money\n    status: String! # Should be enum\n    date: String! # Should be DateTime\n}\n\n# \u2705 Good - Rich value objects\ntype Product {\n    id: ID!\n    name: String!\n    price: Money!\n    weight: Weight!\n    dimensions: Dimensions!\n    availability: ProductAvailability!\n    tags: [ProductTag!]!\n}\n\ntype Money {\n    amount: Decimal!\n    currency: Currency!\n}\n\ntype Weight {\n    value: Decimal!\n    unit: WeightUnit!\n}\n\ntype Dimensions {\n    length: Length!\n    width: Length!\n    height: Length!\n}\n\nenum Currency {\n    USD\n    EUR\n    GBP\n}\n\ntype ProductAvailability {\n    status: AvailabilityStatus!\n    quantity: Int!\n    restockDate: DateTime\n}\n"})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Inconsistent Nullability"})}),(0,s.jsx)("td",{children:"Inconsistent or incorrect use of nullable vs non-nullable fields"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Confuses client developers"}),(0,s.jsx)("li",{children:"Leads to runtime errors"}),(0,s.jsx)("li",{children:"Makes schema hard to understand"}),(0,s.jsx)("li",{children:"Inconsistent error handling"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Use non-null for required business data"}),(0,s.jsx)("li",{children:"Use nullable only when business allows null"}),(0,s.jsx)("li",{children:"Be consistent across similar fields"}),(0,s.jsx)("li",{children:"Document nullability decisions"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:"# \u274c Bad - Inconsistent nullability\ntype Customer {\n    id: ID # Should be non-null\n    name: String! # Good\n    email: String # Should probably be non-null\n    phone: String! # Might be null in some cases\n    orders: [Order!] # List itself should be non-null\n    addresses: [Address!]! # Good\n}\n\ntype Order {\n    id: ID! # Good\n    customer: Customer # Should be non-null\n    total: Money! # Good\n    items: [LineItem] # Should be non-null list\n}\n\n# \u2705 Good - Consistent nullability\ntype Customer {\n    id: ID! # Always present\n    name: String! # Always required\n    email: String! # Required for customers\n    phone: String # Optional\n    orders: [Order!]! # Non-null list, might be empty\n    addresses: [Address!]! # Non-null list, might be empty\n}\n\ntype Order {\n    id: ID! # Always present\n    customer: Customer! # Always has a customer\n    total: Money! # Always calculated\n    items: [LineItem!]! # Non-null list, never empty for valid orders\n}\n"})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Over-Normalization"})}),(0,s.jsx)("td",{children:"Excessive normalization that makes queries complex and inefficient"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Requires multiple queries for simple data"}),(0,s.jsx)("li",{children:"Poor performance"}),(0,s.jsx)("li",{children:"Complex client code"}),(0,s.jsx)("li",{children:"Doesn't match usage patterns"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Design for query patterns"}),(0,s.jsx)("li",{children:"Group related data together"}),(0,s.jsx)("li",{children:"Use composition over excessive normalization"}),(0,s.jsx)("li",{children:"Consider client needs"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:"# \u274c Bad - Over-normalized\ntype Customer {\n    id: ID!\n    personalInfoId: ID!\n    contactInfoId: ID!\n    addressIds: [ID!]!\n}\n\ntype PersonalInfo {\n    id: ID!\n    firstName: String!\n    lastName: String!\n    birthDate: Date!\n}\n\ntype ContactInfo {\n    id: ID!\n    emailId: ID!\n    phoneId: ID!\n}\n\ntype Email {\n    id: ID!\n    address: String!\n    type: EmailType!\n}\n\ntype Phone {\n    id: ID!\n    number: String!\n    type: PhoneType!\n}\n# Requires multiple queries to get basic customer info\n\n# \u2705 Good - Appropriate denormalization\ntype Customer {\n    id: ID!\n    profile: CustomerProfile!\n    addresses: [Address!]!\n}\n\ntype CustomerProfile {\n    personalInfo: PersonalInfo!\n    contactInfo: ContactInfo!\n}\n\ntype PersonalInfo {\n    firstName: String!\n    lastName: String!\n    birthDate: Date!\n}\n\ntype ContactInfo {\n    primaryEmail: Email!\n    secondaryEmail: Email\n    primaryPhone: Phone!\n    secondaryPhone: Phone\n}\n\ntype Email {\n    address: String!\n    type: EmailType!\n    isVerified: Boolean!\n}\n\ntype Phone {\n    number: String!\n    type: PhoneType!\n    isVerified: Boolean!\n}\n"})})})]})]})]})})]})})]})]})}function x(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}}}]);