"use strict";(self.webpackChunkclassic=self.webpackChunkclassic||[]).push([[9693],{4416:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>a,contentTitle:()=>c,default:()=>j,frontMatter:()=>d,metadata:()=>o,toc:()=>h});var s=n(86070),l=n(27468),r=n(78826),t=n(28437);const d={title:"Clean Code",description:"Clean Code",hide_table_of_contents:!0},c=void 0,o={id:"education/system-design/clean-code",title:"Clean Code",description:"Clean Code",source:"@site/docs/education/04-system-design/02-clean-code.mdx",sourceDirName:"education/04-system-design",slug:"/education/system-design/clean-code",permalink:"/tech-labs/docs/education/system-design/clean-code",draft:!1,unlisted:!1,editUrl:"https://github.com/EliFuzz/tech-labs/docs/education/04-system-design/02-clean-code.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"Clean Code",description:"Clean Code",hide_table_of_contents:!0},sidebar:"education",previous:{title:"Diagram Visualization",permalink:"/tech-labs/docs/education/system-design/visualization"},next:{title:"Gangs of Four (GoF)",permalink:"/tech-labs/docs/education/system-design/gof"}},a={},h=[];function x(e){const i={img:"img",li:"li",p:"p",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,s.jsxs)(r.A,{queryString:"primary",children:[(0,s.jsx)(t.A,{value:"overview",label:"Overview",children:(0,s.jsx)(i.p,{children:(0,s.jsx)(i.img,{src:n(28739).A+"",width:"1238",height:"400"})})}),(0,s.jsxs)(t.A,{value:"principles",label:"Principles",children:[(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.strong,{children:"Elegant"}),": Pleasing to read with clear structure and logic"]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.strong,{children:"Efficient"}),": Doesn't waste resources, performs well, and avoids complexity"]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.strong,{children:"Error-free"}),": Minimizes bugs, handles errors gracefully"]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.strong,{children:"Expressive"}),": Clearly communicates intent using meaningful names and comments"]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.strong,{children:"Extensible"}),": Easily adaptable to changing requirements"]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.strong,{children:"Modular"}),": Composed of small, reusable units following the single responsibility principle"]}),"\n"]}),(0,s.jsxs)("table",{children:[(0,s.jsx)("thead",{children:(0,s.jsxs)("tr",{children:[(0,s.jsx)("th",{children:"Principle"}),(0,s.jsx)("th",{children:"Definition"}),(0,s.jsx)("th",{children:"Application"}),(0,s.jsx)("th",{children:"Benefits"}),(0,s.jsx)("th",{children:"Use Cases"})]})}),(0,s.jsxs)("tbody",{children:[(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"APO"})}),(0,s.jsx)("td",{children:"Always Plan for Obsolescence"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"System Architecture"}),(0,s.jsx)("li",{children:"Technology Selection"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Encourages anticipating and planning for the eventual obsolescence of technology components, frameworks, or platforms"}),(0,s.jsx)("li",{children:"Mitigates the risk of technology becoming outdated and reduces the effort required for future migrations or upgrades"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Selecting technologies for long-term projects"}),(0,s.jsx)("li",{children:"Designing architectures that can easily accommodate future changes"}),(0,s.jsx)("li",{children:"Incorporating backward compatibility into system designs"})]})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"BDUF"})}),(0,s.jsx)("td",{children:"Big Design Up Front"}),(0,s.jsx)("td",{children:(0,s.jsx)("ul",{children:(0,s.jsx)("li",{children:"Software Development Process"})})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Advocates for creating a detailed design before starting implementation"}),(0,s.jsx)("li",{children:"While it may provide a clear plan initially, it can lead to rigid architectures and hinder adaptability to changing requirements"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Projects with well-defined requirements and stable specifications"}),(0,s.jsx)("li",{children:"Where changes are unlikely or costly to implement"})]})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Boy Scout Rule"})}),(0,s.jsx)("td",{children:"Leave the code cleaner than you found it"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Codebase Maintenance"}),(0,s.jsx)("li",{children:"Continuous Improvement"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Encourages developers to continuously improve the quality of code by making small, incremental changes whenever they work with it"}),(0,s.jsx)("li",{children:"Over time, this leads to a cleaner, more maintainable codebase"}),(0,s.jsx)("li",{children:"Fosters a culture of continuous improvement within the development team"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Refactoring code during bug fixes or feature development"}),(0,s.jsx)("li",{children:"Performing code reviews"}),(0,s.jsx)("li",{children:"Addressing technical debt"}),(0,s.jsx)("li",{children:"Enhancing code readability"})]})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"DRY"})}),(0,s.jsx)("td",{children:"Don't Repeat Yourself"}),(0,s.jsx)("td",{children:(0,s.jsx)("ul",{children:(0,s.jsx)("li",{children:"Codebase"})})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Reduces code duplication"}),(0,s.jsx)("li",{children:"Encourages maintainability"}),(0,s.jsx)("li",{children:"Improves readability"}),(0,s.jsx)("li",{children:"Minimizes errors by ensuring that a single piece of knowledge has a single, unambiguous representation in the system"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Refactoring code to eliminate duplicate logic"}),(0,s.jsx)("li",{children:"Creating reusable functions or modules"}),(0,s.jsx)("li",{children:"Enforcing consistency across the codebase"})]})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"GRASP"})}),(0,s.jsx)("td",{children:"General Responsibility Assignment Software Patterns"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Object-Oriented Design"}),(0,s.jsx)("li",{children:"Class Responsibilities"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Provides guidelines for assigning responsibilities to classes and objects"}),(0,s.jsx)("li",{children:"Helping to create systems that are easier to understand, maintain, and evolve"}),(0,s.jsx)("li",{children:"Focuses on assigning responsibilities based on information expert"}),(0,s.jsx)("li",{children:"High Cohesion"}),(0,s.jsx)("li",{children:"Low Coupling"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Identifying class responsibilities"}),(0,s.jsx)("li",{children:"Determining collaboration between objects"}),(0,s.jsx)("li",{children:"Defining the overall structure of an object-oriented system"})]})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"KISS"})}),(0,s.jsx)("td",{children:"Keep It Simple, Stupid"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Design"}),(0,s.jsx)("li",{children:"Implementation"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Encourages simplicity in design and implementation"}),(0,s.jsx)("li",{children:"Makes it easier to understand, maintain, and extend"}),(0,s.jsx)("li",{children:"Overly complex solutions are more prone to errors and difficult to modify or scale"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Designing user interfaces"}),(0,s.jsx)("li",{children:"Writing code"}),(0,s.jsx)("li",{children:"Designing system architectures"}),(0,s.jsx)("li",{children:"Choosing between different approaches to solve a problem"})]})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Law of Demeter"})}),(0,s.jsx)("td",{children:"Principle of Least Knowledge"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Object-Oriented Design"}),(0,s.jsx)("li",{children:"Dependency Management"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Encourages designing classes with limited knowledge of other classes"}),(0,s.jsx)("li",{children:"Reducing coupling and promoting encapsulation"}),(0,s.jsx)("li",{children:"Helps in creating more maintainable and flexible code by minimizing the impact of changes in one class on others"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Accessing object properties or methods through a limited number of intermediary objects"}),(0,s.jsx)("li",{children:"Avoiding long chains of method calls between objects"})]})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Occam\u2019s Razor"})}),(0,s.jsx)("td",{children:"The simplest explanation is usually the correct one"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Problem Solving"}),(0,s.jsx)("li",{children:"Decision Making"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Prefers simpler explanations or solutions over more complex ones when multiple options are available"}),(0,s.jsx)("li",{children:"Helps in avoiding unnecessary assumptions or complexity, leading to more straightforward and efficient solutions"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Analyzing data"}),(0,s.jsx)("li",{children:"Troubleshooting issues"}),(0,s.jsx)("li",{children:"Making design decisions"}),(0,s.jsx)("li",{children:"Evaluating competing hypotheses"})]})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"PIT"})}),(0,s.jsx)("td",{children:"Prefer Isolated Tests"}),(0,s.jsx)("td",{children:(0,s.jsx)("ul",{children:(0,s.jsx)("li",{children:"Software Testing"})})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Encourages writing tests that focus on testing one unit of functionality in isolation from other parts of the system"}),(0,s.jsx)("li",{children:"Helps in identifying and diagnosing issues more effectively"}),(0,s.jsx)("li",{children:"Promotes test independence, making it easier to refactor code without breaking tests"}),(0,s.jsx)("li",{children:"Supports parallel test execution for improved performance"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Writing unit tests"}),(0,s.jsx)("li",{children:"Mocking external dependencies"}),(0,s.jsx)("li",{children:"Testing individual components or modules"}),(0,s.jsx)("li",{children:"Ensuring test suites are self-contained and repeatable"})]})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Principle of Least Surprise"})}),(0,s.jsx)("td",{children:"Design should minimize astonishment"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"User Interface Design"}),(0,s.jsx)("li",{children:"API Design"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Behavior of a system or interface should be predictable and intuitive to users or developers"}),(0,s.jsx)("li",{children:"Reduces confusion, errors, and the need for extensive documentation"}),(0,s.jsx)("li",{children:"Leads to a better user experience and increased productivity"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Designing user interfaces"}),(0,s.jsx)("li",{children:"Defining API contracts"}),(0,s.jsx)("li",{children:"Naming conventions for variables and functions"}),(0,s.jsx)("li",{children:"Designing error messages and prompts"})]})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"SLAP"})}),(0,s.jsx)("td",{children:"Single Level of Abstraction Principle"}),(0,s.jsx)("td",{children:(0,s.jsx)("ul",{children:(0,s.jsx)("li",{children:"Code Design"})})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Advocates for maintaining a consistent level of abstraction within functions or methods"}),(0,s.jsx)("li",{children:"Improves code readability and comprehension by ensuring that each function does one thing at a single level of abstraction"}),(0,s.jsx)("li",{children:"Reduces cognitive overload by preventing mixing of high-level and low-level operations within the same function"}),(0,s.jsx)("li",{children:"Facilitates easier debugging, testing, and maintenance"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Breaking down complex functions into smaller, more focused functions"}),(0,s.jsx)("li",{children:"Ensuring that each function performs a single task at a consistent level of abstraction"})]})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"SOLID"})}),(0,s.jsx)("td",{children:"Single Responsibility, Open/Closed, Liskov Substitution, Interface Segregation, Dependency Inversion"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Object-Oriented Design"}),(0,s.jsx)("li",{children:"Code Modularity"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Promotes maintainability, extensibility, and testability by emphasizing principles for designing well-structured, modular code"}),(0,s.jsx)("li",{children:"Each principle addresses a specific aspect of software design, contributing to overall code quality and flexibility"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Designing classes and interfaces"}),(0,s.jsx)("li",{children:"Defining software architecture"}),(0,s.jsx)("li",{children:"Refactoring existing code to improve its design"})]})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"YAGNI"})}),(0,s.jsx)("td",{children:"You Ain't Gonna Need It"}),(0,s.jsx)("td",{children:"Feature Development, Architecture"}),(0,s.jsx)("td",{children:"Prevents over-engineering by discouraging developers from adding functionality or architecture that is not immediately necessary. This avoids wasted effort and keeps the focus on delivering value to the customer"}),(0,s.jsx)("td",{children:"Avoiding premature optimization, deferring implementation of features until they are requested by users or required by business needs"})]})]})]})]}),(0,s.jsx)(t.A,{value:"benefits",label:"Benefits",children:(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.strong,{children:"Productivity"}),": Simplifies writing, reading, debugging, testing, and maintenance, reducing time and effort for new features, bug fixes, and refactoring"]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.strong,{children:"Quality"}),": Enhances user experience and satisfaction by meeting both functional and non-functional software requirements such as performance, security, reliability, and usability"]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.strong,{children:"Collaboration"}),": Facilitates teamwork and knowledge sharing, enabling quick understanding of code and effective collaboration on complex projects"]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.strong,{children:"Learning"}),": Aids developers in skill improvement and technology acquisition through exposure to best practices, design patterns, and coding standards, enhancing coding abilities"]}),"\n"]})}),(0,s.jsxs)(t.A,{value:"guidelines",label:"Guidelines",children:[(0,s.jsx)(i.p,{children:(0,s.jsx)(i.strong,{children:"General"})}),(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"Follow standard conventions"}),"\n",(0,s.jsx)(i.li,{children:"Keep it simple stupid"}),"\n",(0,s.jsx)(i.li,{children:"Follow the Boy Scout Rule"}),"\n",(0,s.jsx)(i.li,{children:"Always identify the root cause"}),"\n"]}),(0,s.jsx)(i.p,{children:(0,s.jsx)(i.strong,{children:"Design"})}),(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"Keep configurable data at high levels"}),"\n",(0,s.jsx)(i.li,{children:"Favor polymorphism over if/else or switch/case statements"}),"\n",(0,s.jsx)(i.li,{children:"Separate multi-threading code"}),"\n",(0,s.jsx)(i.li,{children:"Avoid over-configurability"}),"\n",(0,s.jsx)(i.li,{children:"Use dependency injection"}),"\n",(0,s.jsx)(i.li,{children:"Adhere to the Law of Demeter"}),"\n"]}),(0,s.jsx)(i.p,{children:(0,s.jsx)(i.strong,{children:"Understandability"})}),(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"Be consistent"}),"\n",(0,s.jsx)(i.li,{children:"Use explanatory variables"}),"\n",(0,s.jsx)(i.li,{children:"Encapsulate boundary conditions"}),"\n",(0,s.jsx)(i.li,{children:"Favor dedicated value objects over primitive types"}),"\n",(0,s.jsx)(i.li,{children:"Avoid logical dependencies"}),"\n",(0,s.jsx)(i.li,{children:"Avoid negative conditionals"}),"\n"]}),(0,s.jsx)(i.p,{children:(0,s.jsx)(i.strong,{children:"Naming Conventions"})}),(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"Opt for descriptive and unambiguous names"}),"\n",(0,s.jsx)(i.li,{children:"Make meaningful distinctions"}),"\n",(0,s.jsx)(i.li,{children:"Use pronounceable names"}),"\n",(0,s.jsx)(i.li,{children:"Use searchable names"}),"\n",(0,s.jsx)(i.li,{children:"Replace magic numbers with named constants"}),"\n",(0,s.jsx)(i.li,{children:"Don\u2019t append prefixes or type information"}),"\n"]}),(0,s.jsx)(i.p,{children:(0,s.jsx)(i.strong,{children:"Function"})}),(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"Keep functions small"}),"\n",(0,s.jsx)(i.li,{children:"Ensure functions do one thing only"}),"\n",(0,s.jsx)(i.li,{children:"Use descriptive names"}),"\n",(0,s.jsx)(i.li,{children:"Favor fewer arguments"}),"\n",(0,s.jsx)(i.li,{children:"Functions should not have side effects"}),"\n",(0,s.jsx)(i.li,{children:"Avoid flag arguments"}),"\n"]}),(0,s.jsx)(i.p,{children:(0,s.jsx)(i.strong,{children:"Comments"})}),(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"Strive to explain yourself in code, not comments"}),"\n",(0,s.jsx)(i.li,{children:"Avoid redundancy in comments"}),"\n",(0,s.jsx)(i.li,{children:"Don\u2019t add unnecessary noise through comments"}),"\n",(0,s.jsx)(i.li,{children:"Don\u2019t use closing brace comments"}),"\n",(0,s.jsx)(i.li,{children:"Don\u2019t comment out code, just remove it"}),"\n",(0,s.jsx)(i.li,{children:"Use comments to explain intent, clarify code, and warn of consequences"}),"\n"]}),(0,s.jsx)(i.p,{children:(0,s.jsx)(i.strong,{children:"Source Code Structure"})}),(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"Separate concepts vertically"}),"\n",(0,s.jsx)(i.li,{children:"Related code should appear vertically dense"}),"\n",(0,s.jsx)(i.li,{children:"Declare variables close to where they are used"}),"\n",(0,s.jsx)(i.li,{children:"Dependent functions should be close together in your code structure"}),"\n",(0,s.jsx)(i.li,{children:"Similar functions should be grouped together in your code structure"}),"\n",(0,s.jsx)(i.li,{children:"Place functions in a downward direction in your code structure"}),"\n",(0,s.jsx)(i.li,{children:"Keep lines of code short for readability purposes"}),"\n",(0,s.jsx)(i.li,{children:"Avoid horizontal alignment in your code structure"}),"\n",(0,s.jsx)(i.li,{children:"Use white space to associate related things and disassociate weakly related things in your code structure"}),"\n",(0,s.jsx)(i.li,{children:"Maintain consistent indentation throughout your code structure"}),"\n"]}),(0,s.jsx)(i.p,{children:(0,s.jsx)(i.strong,{children:"Objects and Data Structures"})}),(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"Internal structure should be hidden within objects and data structures"}),"\n",(0,s.jsx)(i.li,{children:"Favor data structures over objects when possible"}),"\n",(0,s.jsx)(i.li,{children:"Avoid hybrid structures (half object and half data)"}),"\n",(0,s.jsx)(i.li,{children:"Objects and data structures should be small and do one thing only"}),"\n",(0,s.jsx)(i.li,{children:"They should have a small number of instance variables"}),"\n",(0,s.jsx)(i.li,{children:"Base classes should not know anything about their derivatives"}),"\n",(0,s.jsx)(i.li,{children:"It\u2019s better to have many functions than to pass some code into a function to select a behavior"}),"\n",(0,s.jsx)(i.li,{children:"Non-static methods are generally preferable to static methods"}),"\n"]}),(0,s.jsx)(i.p,{children:(0,s.jsx)(i.strong,{children:"Testing"})}),(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"One assert per test"}),"\n",(0,s.jsx)(i.li,{children:"Readable"}),"\n",(0,s.jsx)(i.li,{children:"Fast"}),"\n",(0,s.jsx)(i.li,{children:"Independent"}),"\n",(0,s.jsx)(i.li,{children:"Repeatable"}),"\n"]}),(0,s.jsx)(i.p,{children:(0,s.jsx)(i.strong,{children:"Code Smells"})}),(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"Rigidity"}),"\n",(0,s.jsx)(i.li,{children:"Fragility"}),"\n",(0,s.jsx)(i.li,{children:"Immobility"}),"\n",(0,s.jsx)(i.li,{children:"Needless Complexity"}),"\n",(0,s.jsx)(i.li,{children:"Needless Repetition"}),"\n",(0,s.jsx)(i.li,{children:"Clearness"}),"\n"]})]})]})}function j(e={}){const{wrapper:i}={...(0,l.R)(),...e.components};return i?(0,s.jsx)(i,{...e,children:(0,s.jsx)(x,{...e})}):x(e)}},28739:(e,i,n)=>{n.d(i,{A:()=>s});const s=n.p+"assets/images/clean-code-overview-b779d2c3f8e7ec2d85ea330810649d95.svg"}}]);