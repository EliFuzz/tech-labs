"use strict";(self.webpackChunkclassic=self.webpackChunkclassic||[]).push([[363],{68382:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>g,contentTitle:()=>p,default:()=>y,frontMatter:()=>v,metadata:()=>t,toc:()=>j});const t=JSON.parse('{"id":"education/computer-science/algorithms/algo/primality-test","title":"Primality Test","description":"Primality Test","source":"@site/docs/education/01-computer-science/10-algorithms/04-algo/primality-test.mdx","sourceDirName":"education/01-computer-science/10-algorithms/04-algo","slug":"/education/computer-science/algorithms/algo/primality-test","permalink":"/tech-labs/docs/education/computer-science/algorithms/algo/primality-test","draft":false,"unlisted":false,"editUrl":"https://github.com/EliFuzz/tech-labs/docs/education/01-computer-science/10-algorithms/04-algo/primality-test.mdx","tags":[],"version":"current","frontMatter":{"title":"Primality Test","description":"Primality Test","hide_table_of_contents":true},"sidebar":"education","previous":{"title":"Power Set","permalink":"/tech-labs/docs/education/computer-science/algorithms/algo/power-set"},"next":{"title":"Prime Factors","permalink":"/tech-labs/docs/education/computer-science/algorithms/algo/prime-factors"}}');var r=n(86070),s=n(15658),l=n(33407),a=n(33903),o=n(68171);const d='package main\n\nimport (\n    "math"\n)\n\nfunc trialDivision(number int) bool {\n    if number <= 1 || (number%2 == 0 && number != 2) {\n        return false\n    }\n\n    dividerLimit := int(math.Sqrt(float64(number)))\n    for divider := 3; divider <= dividerLimit; divider += 2 {\n        if number%divider == 0 {\n            return false\n        }\n    }\n\n    return true\n}\n',u="public class Main {\n\n  public static boolean trialDivision(int number) {\n    if (number <= 1 || (number % 2 == 0 && number != 2)) {\n      return false;\n    }\n\n    int dividerLimit = (int) Math.sqrt(number);\n    for (int divider = 3; divider <= dividerLimit; divider += 2) {\n      if (number % divider == 0) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n}\n",c="function trialDivision(number) {\n  if (number <= 1 || (number % 2 === 0 && number !== 2)) {\n    return false;\n  }\n\n  const dividerLimit = Math.sqrt(number);\n  for (let divider = 3; divider <= dividerLimit; divider += 2) {\n    if (number % divider === 0) {\n      return false;\n    }\n  }\n\n  return true;\n}\n",m="fun trialDivision(number: Int): Boolean {\n    if (number <= 1 || (number % 2 == 0 && number != 2)) {\n        return false\n    }\n\n    val dividerLimit = Math.sqrt(number.toDouble()).toInt()\n    for (divider in 3..dividerLimit step 2) {\n        if (number % divider == 0) {\n            return false\n        }\n    }\n\n    return true\n}\n",h="import math\n\ndef trialDivision(number):\n    if number <= 1 or (number % 2 == 0 and number != 2):\n        return False\n\n    dividerLimit = int(math.sqrt(number))\n    for divider in range(3, dividerLimit + 1, 2):\n        if number % divider == 0:\n            return False\n\n    return True\n",b="fn trial_division(number: u32) -> bool {\n    if number <= 1 || (number % 2 == 0 && number != 2) {\n        return false;\n    }\n\n    let divider_limit = (number as f64).sqrt() as u32;\n    for divider in (3..=divider_limit).step_by(2) {\n        if number % divider == 0 {\n            return false;\n        }\n    }\n\n    true\n}\n",f="function trialDivision(number: number): boolean {\n  if (number <= 1 || (number % 2 === 0 && number !== 2)) {\n    return false;\n  }\n\n  const dividerLimit = Math.sqrt(number);\n  for (let divider = 3; divider <= dividerLimit; divider += 2) {\n    if (number % divider === 0) {\n      return false;\n    }\n  }\n\n  return true;\n}\n",v={title:"Primality Test",description:"Primality Test",hide_table_of_contents:!0},p=void 0,g={},j=[{value:"Definition",id:"definition",level:2},{value:"Practice",id:"practice",level:2}];function x(e){const i={code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(i.h2,{id:"definition",children:"Definition"}),"\n",(0,r.jsxs)(l.A,{queryString:"primary",children:[(0,r.jsx)(a.A,{value:"definition",label:"Definition",children:(0,r.jsx)(i.p,{children:"The Primality Test Algorithm is a method used to determine whether a given integer is prime or not. It involves evaluating the divisibility of the number by smaller integers to ascertain if it has any factors other than 1 and itself. The algorithm leverages efficient techniques to minimize computational complexity"})}),(0,r.jsx)(a.A,{value:"how",label:"Explanation",children:(0,r.jsxs)(i.p,{children:["Checking whether the given number ",(0,r.jsx)(i.code,{children:"n"})," is divisible by any integer other than 1 and itself. It begins by testing divisibility with 2, then proceeds to check odd integers up to the square root of ",(0,r.jsx)(i.code,{children:"n"}),". If ",(0,r.jsx)(i.code,{children:"n"})," is divisible by any of these integers, it is deemed composite; otherwise, it is considered prime."]})}),(0,r.jsx)(a.A,{value:"guidance",label:"Guidance",children:(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsx)(i.li,{children:"Start by checking if the given number is less than 2. If so, it cannot be prime"}),"\n",(0,r.jsx)(i.li,{children:"If the number is 2, it is prime"}),"\n",(0,r.jsx)(i.li,{children:"Check if the number is divisible by 2. If yes, it is not prime"}),"\n",(0,r.jsx)(i.li,{children:"Iterate through odd numbers starting from 3 up to the square root of the given number"}),"\n",(0,r.jsx)(i.li,{children:"For each odd number, check if the given number is divisible by it. If yes, it is not prime"}),"\n",(0,r.jsx)(i.li,{children:"If none of the above conditions are met, the number is prime"}),"\n"]})}),(0,r.jsx)(a.A,{value:"tips",label:"Tips",children:(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsx)(i.li,{children:"utilize efficient techniques such as checking divisibility only up to the square root of the given number to minimize computational complexity"}),"\n",(0,r.jsx)(i.li,{children:"implement optimizations like skipping even numbers greater than 2 in the iteration process since they cannot be prime"}),"\n"]})})]}),"\n",(0,r.jsx)(i.h2,{id:"practice",children:"Practice"}),"\n",(0,r.jsxs)(l.A,{queryString:"primary",children:[(0,r.jsx)(a.A,{value:"practice",label:"Practice",children:(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-python",children:"isPrime(n):\n  if n < 2:\n    return false\n  if n == 2:\n    return true\n  if n % 2 == 0:\n    return false\n  limit = floor(sqrt(n))\n  for i = 3 to limit step 2:\n    if n % i == 0:\n      return false\n  return true\n"})})}),(0,r.jsx)(a.A,{value:"solution",label:"Solution",children:(0,r.jsxs)(l.A,{queryString:"code",children:[(0,r.jsx)(a.A,{value:"go",label:"",attributes:{title:"Go Lang",className:"code_lang go m"},children:(0,r.jsx)(o.A,{language:"go",children:d})}),(0,r.jsx)(a.A,{value:"java",label:"",attributes:{title:"Java",className:"code_lang java m"},children:(0,r.jsx)(o.A,{language:"java",children:u})}),(0,r.jsx)(a.A,{value:"js",label:"",attributes:{title:"JavaScript",className:"code_lang js m"},children:(0,r.jsx)(o.A,{language:"js",children:c})}),(0,r.jsx)(a.A,{value:"kotlin",label:"",attributes:{title:"Kotlin",className:"code_lang kotlin m"},children:(0,r.jsx)(o.A,{language:"kotlin",children:m})}),(0,r.jsx)(a.A,{value:"python",label:"",attributes:{title:"Python",className:"code_lang python m"},children:(0,r.jsx)(o.A,{language:"python",children:h})}),(0,r.jsx)(a.A,{value:"rust",label:"",attributes:{title:"Rust",className:"code_lang rust m"},children:(0,r.jsx)(o.A,{language:"rust",children:b})}),(0,r.jsx)(a.A,{value:"ts",label:"",attributes:{title:"TypeScript",className:"code_lang ts m"},children:(0,r.jsx)(o.A,{language:"ts",children:f})})]})})]})]})}function y(e={}){const{wrapper:i}={...(0,s.R)(),...e.components};return i?(0,r.jsx)(i,{...e,children:(0,r.jsx)(x,{...e})}):x(e)}}}]);