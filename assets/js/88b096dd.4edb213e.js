"use strict";(self.webpackChunkclassic=self.webpackChunkclassic||[]).push([[5684],{76222:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>b,contentTitle:()=>f,default:()=>S,frontMatter:()=>j,metadata:()=>r,toc:()=>x});const r=JSON.parse('{"id":"education/computer-science/algorithms/algo/shellsort","title":"Shellsort","description":"Shellsort","source":"@site/docs/education/01-computer-science/10-algorithms/04-algo/shellsort.mdx","sourceDirName":"education/01-computer-science/10-algorithms/04-algo","slug":"/education/computer-science/algorithms/algo/shellsort","permalink":"/tech-labs/docs/education/computer-science/algorithms/algo/shellsort","draft":false,"unlisted":false,"editUrl":"https://github.com/EliFuzz/tech-labs/docs/education/01-computer-science/10-algorithms/04-algo/shellsort.mdx","tags":[],"version":"current","frontMatter":{"title":"Shellsort","description":"Shellsort","hide_table_of_contents":true},"sidebar":"education","previous":{"title":"Selection Sort","permalink":"/tech-labs/docs/education/computer-science/algorithms/algo/selection-sort"},"next":{"title":"Shortest Common Supersequence (SCS)","permalink":"/tech-labs/docs/education/computer-science/algorithms/algo/shortest-common-supersequence"}}');var a=t(86070),i=t(15658),l=t(52421),s=t(74610),o=t(42953);const c="package main\n\nfunc shellSort(arr []int) {\n    n := len(arr)\n    gap := n / 2\n    for gap > 0 {\n        for i := gap; i < n; i++ {\n            temp := arr[i]\n            j := i\n            for j >= gap && arr[j-gap] > temp {\n                arr[j] = arr[j-gap]\n                j -= gap\n            }\n            arr[j] = temp\n        }\n        gap /= 2\n    }\n}\n",p="public class ShellSort {\n\n  public static void shellSort(int[] arr) {\n    int n = arr.length;\n    for (int gap = n / 2; gap > 0; gap /= 2) {\n      for (int i = gap; i < n; i++) {\n        int temp = arr[i];\n        int j = i;\n        while (j >= gap && arr[j - gap] > temp) {\n          arr[j] = arr[j - gap];\n          j -= gap;\n        }\n        arr[j] = temp;\n      }\n    }\n  }\n}\n",g="function shellSort(arr) {\n  let n = arr.length;\n  for (let gap = Math.floor(n / 2); gap > 0; gap = Math.floor(gap / 2)) {\n    for (let i = gap; i < n; i++) {\n      let temp = arr[i];\n      let j = i;\n      while (j >= gap && arr[j - gap] > temp) {\n        arr[j] = arr[j - gap];\n        j -= gap;\n      }\n      arr[j] = temp;\n    }\n  }\n}\n",h="fun shellSort(arr: IntArray) {\n    val n = arr.size\n    var gap = n / 2\n    while (gap > 0) {\n        for (i in gap until n) {\n            val temp = arr[i]\n            var j = i\n            while (j >= gap && arr[j - gap] > temp) {\n                arr[j] = arr[j - gap]\n                j -= gap\n            }\n            arr[j] = temp\n        }\n        gap /= 2\n    }\n}\n",d="def shell_sort(arr):\n    n = len(arr)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = arr[i]\n            j = i\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            arr[j] = temp\n        gap //= 2\n",u="fn shell_sort(arr: &mut [i32]) {\n    let n = arr.len();\n    let mut gap = n / 2;\n    while gap > 0 {\n        for i in gap..n {\n            let mut j = i;\n            let temp = arr[i];\n            while j >= gap && arr[j - gap] > temp {\n                arr[j] = arr[j - gap];\n                j -= gap;\n            }\n            arr[j] = temp;\n        }\n        gap /= 2;\n    }\n}\n",m="function shellSort(arr: number[]): void {\n  const n: number = arr.length;\n  for (\n    let gap: number = Math.floor(n / 2);\n    gap > 0;\n    gap = Math.floor(gap / 2)\n  ) {\n    for (let i: number = gap; i < n; i++) {\n      let temp: number = arr[i];\n      let j: number = i;\n      while (j >= gap && arr[j - gap] > temp) {\n        arr[j] = arr[j - gap];\n        j -= gap;\n      }\n      arr[j] = temp;\n    }\n  }\n}\n",j={title:"Shellsort",description:"Shellsort",hide_table_of_contents:!0},f=void 0,b={},x=[{value:"Definition",id:"definition",level:2},{value:"Practice",id:"practice",level:2}];function v(e){const n={code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h2,{id:"definition",children:"Definition"}),"\n",(0,a.jsxs)(l.A,{queryString:"primary",children:[(0,a.jsx)(s.A,{value:"definition",label:"Definition",children:(0,a.jsx)(n.p,{children:"Shellsort is an efficient sorting algorithm that improves upon the insertion sort algorithm by sorting sublists of the data and then eventually sorting the entire list. It belongs to the family of comparison-based sorting algorithms and operates by moving elements closer to their sorted position through a series of diminishing increment gaps"})}),(0,a.jsx)(s.A,{value:"how",label:"Explanation",children:(0,a.jsx)(n.p,{children:"Start by sorting elements that are far apart from each other and then progressively reduces the gap between elements to be compared. It involves dividing the list into smaller sublists and sorting them using the insertion sort algorithm. These sublists are created by selecting elements that are a certain distance apart from each other, called the gap or increment sequence. The algorithm continues to decrease the gap until it becomes 1, at which point the list is sorted"})}),(0,a.jsx)(s.A,{value:"guidance",label:"Guidance",children:(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Define an increment sequence to determine the gap between elements to be compared"}),"\n",(0,a.jsx)(n.li,{children:"Start with the largest gap and perform an insertion sort on sublists created by this gap"}),"\n",(0,a.jsx)(n.li,{children:"Reduce the gap and repeat the insertion sort process until the gap becomes 1"}),"\n",(0,a.jsx)(n.li,{children:"Finally, perform a standard insertion sort with a gap of 1 to sort the entire list"}),"\n"]})}),(0,a.jsx)(s.A,{value:"tips",label:"Tips",children:(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"experiment with different increment sequences to find the most efficient one for your dataset"}),"\n",(0,a.jsx)(n.li,{children:"avoid using large gaps at the beginning, as this might result in inefficient sorting"}),"\n",(0,a.jsx)(n.li,{children:"consider using the Knuth sequence (3x + 1) for determining the increment sequence, as it often yields good result"}),"\n"]})})]}),"\n",(0,a.jsx)(n.h2,{id:"practice",children:"Practice"}),"\n",(0,a.jsxs)(l.A,{queryString:"primary",children:[(0,a.jsx)(s.A,{value:"practice",label:"Practice",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"shellSort(arr):\n  # Define increment sequence\n  gaps = [701, 301, 132, 57, 23, 10, 4, 1]\n\n  # Iterate over each gap\n  for gap in gaps:\n    # Perform insertion sort with current gap\n    for i = gap to length(arr):\n      temp = arr[i]\n      j = i\n      # Move elements of arr[0..i-gap] that are greater than temp to their positions ahead of current position\n      while j >= gap and arr[j - gap] > temp:\n        arr[j] = arr[j - gap]\n        j = j - gap\n      arr[j] = temp\n"})})}),(0,a.jsx)(s.A,{value:"solution",label:"Solution",children:(0,a.jsxs)(l.A,{queryString:"code",children:[(0,a.jsx)(s.A,{value:"go",label:"",attributes:{title:"Go Lang",className:"code_lang go m"},children:(0,a.jsx)(o.A,{language:"go",children:c})}),(0,a.jsx)(s.A,{value:"java",label:"",attributes:{title:"Java",className:"code_lang java m"},children:(0,a.jsx)(o.A,{language:"java",children:p})}),(0,a.jsx)(s.A,{value:"js",label:"",attributes:{title:"JavaScript",className:"code_lang js m"},children:(0,a.jsx)(o.A,{language:"js",children:g})}),(0,a.jsx)(s.A,{value:"kotlin",label:"",attributes:{title:"Kotlin",className:"code_lang kotlin m"},children:(0,a.jsx)(o.A,{language:"kotlin",children:h})}),(0,a.jsx)(s.A,{value:"python",label:"",attributes:{title:"Python",className:"code_lang python m"},children:(0,a.jsx)(o.A,{language:"python",children:d})}),(0,a.jsx)(s.A,{value:"rust",label:"",attributes:{title:"Rust",className:"code_lang rust m"},children:(0,a.jsx)(o.A,{language:"rust",children:u})}),(0,a.jsx)(s.A,{value:"ts",label:"",attributes:{title:"TypeScript",className:"code_lang ts m"},children:(0,a.jsx)(o.A,{language:"ts",children:m})})]})})]})]})}function S(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(v,{...e})}):v(e)}}}]);