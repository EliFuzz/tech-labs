"use strict";(self.webpackChunkclassic=self.webpackChunkclassic||[]).push([[6082],{44912:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>y,contentTitle:()=>x,default:()=>_,frontMatter:()=>m,metadata:()=>b,toc:()=>j});var t=n(86070),l=n(25710),s=n(98459),r=n(37515),o=n(18792);const a='package main\n\nimport (\n    "math"\n)\n\nfunc liuHui(n int) float64 {\n    sideLength := 2.0\n    polygonSides := 6.0\n    for i := 0; i < n; i++ {\n        sideLength = math.Sqrt(4 - math.Pow(sideLength/2, 2))\n        polygonSides *= 2\n    }\n    return sideLength * polygonSides\n}\n',c="public class LiuHuiAlgorithm {\n\n  public static double liuHui(int n) {\n    double sideLength = 2.0;\n    double polygonSides = 6.0;\n    for (int i = 0; i < n; i++) {\n      sideLength = Math.sqrt(4 - Math.pow(sideLength / 2, 2));\n      polygonSides *= 2;\n    }\n    return sideLength * polygonSides;\n  }\n}\n",d="function liuHui(n) {\n  let sideLength = 2.0;\n  let polygonSides = 6.0;\n  for (let i = 0; i < n; i++) {\n    sideLength = Math.sqrt(4 - Math.pow(sideLength / 2, 2));\n    polygonSides *= 2;\n  }\n  return sideLength * polygonSides;\n}\n",u="fun liuHui(n: Int): Double {\n    var sideLength = 2.0\n    var polygonSides = 6.0\n    repeat(n) {\n        sideLength = Math.sqrt(4 - Math.pow(sideLength / 2, 2))\n        polygonSides *= 2\n    }\n    return sideLength * polygonSides\n}\n",h="import math\n\ndef liu_hui(n):\n    side_length = 2.0\n    polygon_sides = 6.0\n    for _ in range(n):\n        side_length = math.sqrt(4 - (side_length / 2) ** 2)\n        polygon_sides *= 2\n    return side_length * polygon_sides\n",g="fn liu_hui(n: u32) -> f64 {\n    let mut side_length = 2.0;\n    let mut polygon_sides = 6.0;\n    for _ in 0..n {\n        side_length = (4.0 - (side_length / 2.0).powi(2)).sqrt();\n        polygon_sides *= 2.0;\n    }\n    side_length * polygon_sides\n}\n",p="function liuHui(n: number): number {\n  let sideLength: number = 2.0;\n  let polygonSides: number = 6.0;\n  for (let i = 0; i < n; i++) {\n    sideLength = Math.sqrt(4 - Math.pow(sideLength / 2, 2));\n    polygonSides *= 2;\n  }\n  return sideLength * polygonSides;\n}\n",m={title:"Liu Hui `\u03c0` Algorithm",description:"Liu Hui `\u03c0` Algorithm",hide_table_of_contents:!0},x=void 0,b={id:"education/computer-science/algorithms/algo/liu-hui-algorithm",title:"Liu Hui `\u03c0` Algorithm",description:"Liu Hui `\u03c0` Algorithm",source:"@site/docs/education/01-computer-science/10-algorithms/04-algo/liu-hui-algorithm.mdx",sourceDirName:"education/01-computer-science/10-algorithms/04-algo",slug:"/education/computer-science/algorithms/algo/liu-hui-algorithm",permalink:"/tech-labs/docs/education/computer-science/algorithms/algo/liu-hui-algorithm",draft:!1,unlisted:!1,editUrl:"https://github.com/EliFuzz/tech-labs/docs/education/01-computer-science/10-algorithms/04-algo/liu-hui-algorithm.mdx",tags:[],version:"current",frontMatter:{title:"Liu Hui `\u03c0` Algorithm",description:"Liu Hui `\u03c0` Algorithm",hide_table_of_contents:!0},sidebar:"education",previous:{title:"Linear Search",permalink:"/tech-labs/docs/education/computer-science/algorithms/algo/linear-search"},next:{title:"Longest Common Subsequence (LCS)",permalink:"/tech-labs/docs/education/computer-science/algorithms/algo/longest-common-subsequence"}},y={},j=[{value:"Definition",id:"definition",level:2},{value:"Practice",id:"practice",level:2}];function f(e){const i={code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,l.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(i.h2,{id:"definition",children:"Definition"}),"\n",(0,t.jsxs)(s.A,{queryString:"primary",children:[(0,t.jsx)(r.A,{value:"definition",label:"Definition",children:(0,t.jsxs)(i.p,{children:["Liu Hui's ",(0,t.jsx)(i.code,{children:"\u03c0"})," Algorithm is a ancient Chinese method devised by mathematician Liu Hui in the 3rd century CE to approximate the value of ",(0,t.jsx)(i.code,{children:"\u03c0"}),". It employs the idea of inscribing and circumscribing polygons around a circle to iteratively approach the value of ",(0,t.jsx)(i.code,{children:"\u03c0"})]})}),(0,t.jsx)(r.A,{value:"how",label:"Explanation",children:(0,t.jsxs)(i.p,{children:["The algorithm approximates the value of ",(0,t.jsx)(i.code,{children:"\u03c0"})," by inscribing and circumscribing regular polygons around a circle. It uses the properties of polygons and trigonometric functions to calculate perimeters and approximate ",(0,t.jsx)(i.code,{children:"\u03c0"})]})}),(0,t.jsx)(r.A,{value:"guidance",label:"Guidance",children:(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["Start with a circle of radius 1","\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"Begin with a regular polygon inscribed within the circle. The more sides it has, the closer the approximation"}),"\n",(0,t.jsx)(i.li,{children:"Compute the perimeter of the inscribed polygon"}),"\n",(0,t.jsx)(i.li,{children:"Construct a regular polygon circumscribing the circle"}),"\n",(0,t.jsx)(i.li,{children:"Find the perimeter of the circumscribed polygon"}),"\n",(0,t.jsx)(i.li,{children:"repeat steps with polygons of increasing sides"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(i.li,{children:["Use the formula to approximate: ",(0,t.jsx)(i.code,{children:"\u03c0 \u2248 (Perimeter of circumscribed polygon + Perimeter of inscribed polygon) / 2"})]}),"\n"]})}),(0,t.jsx)(r.A,{value:"tips",label:"Tips",children:(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"start with a low number of sides for the polygons and gradually increase it for better precision"}),"\n",(0,t.jsx)(i.li,{children:"ensure accuracy in calculating perimeters to avoid cumulative errors"}),"\n",(0,t.jsx)(i.li,{children:"use trigonometric functions to calculate side lengths and angles of polygons accurately"}),"\n"]})})]}),"\n",(0,t.jsx)(i.h2,{id:"practice",children:"Practice"}),"\n",(0,t.jsxs)(s.A,{queryString:"primary",children:[(0,t.jsx)(r.A,{value:"practice",label:"Practice",children:(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-python",children:'liuHuiPiApproximation():\n  radius = 1\n  inscribed_perimeter = 0\n  circumscribed_perimeter = 0\n\n  for sides in range(3, maximum_sides):\n    inscribed_perimeter = calculatePolygonPerimeter(radius, sides, True)\n    circumscribed_perimeter = calculatePolygonPerimeter(radius, sides, False)\n    pi_approximation = (inscribed_perimeter + circumscribed_perimeter) / 2\n    print("Approximation of \u03c0 with", sides, "sides:", pi_approximation)\n\ncalculatePolygonPerimeter(radius, sides, inscribed):\n  if inscribed:\n    polygon_side_length = 2 * radius * sin(\u03c0 / sides)\n  else:\n    polygon_side_length = 2 * radius * tan(\u03c0 / sides)\n\n  return sides * polygon_side_length\n'})})}),(0,t.jsx)(r.A,{value:"solution",label:"Solution",children:(0,t.jsxs)(s.A,{queryString:"code",children:[(0,t.jsx)(r.A,{value:"go",label:"",attributes:{title:"Go Lang",className:"code_lang go m"},children:(0,t.jsx)(o.A,{language:"go",children:a})}),(0,t.jsx)(r.A,{value:"java",label:"",attributes:{title:"Java",className:"code_lang java m"},children:(0,t.jsx)(o.A,{language:"java",children:c})}),(0,t.jsx)(r.A,{value:"js",label:"",attributes:{title:"JavaScript",className:"code_lang js m"},children:(0,t.jsx)(o.A,{language:"js",children:d})}),(0,t.jsx)(r.A,{value:"kotlin",label:"",attributes:{title:"Kotlin",className:"code_lang kotlin m"},children:(0,t.jsx)(o.A,{language:"kotlin",children:u})}),(0,t.jsx)(r.A,{value:"python",label:"",attributes:{title:"Python",className:"code_lang python m"},children:(0,t.jsx)(o.A,{language:"python",children:h})}),(0,t.jsx)(r.A,{value:"rust",label:"",attributes:{title:"Rust",className:"code_lang rust m"},children:(0,t.jsx)(o.A,{language:"rust",children:g})}),(0,t.jsx)(r.A,{value:"ts",label:"",attributes:{title:"TypeScript",className:"code_lang ts m"},children:(0,t.jsx)(o.A,{language:"ts",children:p})})]})})]})]})}function _(e={}){const{wrapper:i}={...(0,l.R)(),...e.components};return i?(0,t.jsx)(i,{...e,children:(0,t.jsx)(f,{...e})}):f(e)}}}]);