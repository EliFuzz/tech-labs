"use strict";(self.webpackChunkclassic=self.webpackChunkclassic||[]).push([[9115],{69356:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>j,frontMatter:()=>o,metadata:()=>c,toc:()=>h});var i=s(11527),t=s(88672),r=s(29140),a=s(52360);const o={title:"Definition",description:"Definition of Design Patterns",hide_table_of_contents:!0},l="Design Patterns: Definition",c={id:"education/design-patterns/definition",title:"Definition",description:"Definition of Design Patterns",source:"@site/docs/education/03-design-patterns/01-definition.mdx",sourceDirName:"education/03-design-patterns",slug:"/education/design-patterns/definition",permalink:"/tech-labs/docs/education/design-patterns/definition",draft:!1,unlisted:!1,editUrl:"https://github.com/EliFuzz/tech-labs/docs/education/03-design-patterns/01-definition.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Definition",description:"Definition of Design Patterns",hide_table_of_contents:!0},sidebar:"education",previous:{title:"Design Patterns",permalink:"/tech-labs/docs/category/design-patterns"},next:{title:"Diagram Visualization",permalink:"/tech-labs/docs/education/design-patterns/visualization"}},d={},h=[{value:"Overview",id:"overview",level:2}];function g(e){const n={h1:"h1",h2:"h2",li:"li",p:"p",strong:"strong",ul:"ul",...(0,t.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"design-patterns-definition",children:"Design Patterns: Definition"}),"\n",(0,i.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsxs)(r.Z,{children:[(0,i.jsx)(a.Z,{value:"representation",label:"Representation",children:(0,i.jsxs)("table",{children:[(0,i.jsx)("thead",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("th",{children:"Aspect"}),(0,i.jsx)("th",{children:"Unified Modeling Language (UML)"}),(0,i.jsx)("th",{children:"Business Process Model and Notation (BPMN)"})]})}),(0,i.jsxs)("tbody",{children:[(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:"Definition"}),(0,i.jsx)("td",{children:(0,i.jsx)(n.p,{children:"standardized visual language used in software engineering to model\nand describe software systems through graphical notations,\nfacilitating communication and visualization of system structure,\nbehavior, interactions, and architecture among project stakeholders"})}),(0,i.jsx)("td",{children:(0,i.jsx)(n.p,{children:"standardized graphical notation for modeling business processes and\nworkflows. It provides symbols and conventions to represent tasks,\nevents, gateways, and flows, enabling stakeholders to document,\nanalyze, and improve business processes visually"})})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:"Purpose"}),(0,i.jsx)("td",{children:"modeling software systems/components"}),(0,i.jsx)("td",{children:"modeling business processes/workflows"})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:"Scope"}),(0,i.jsx)("td",{children:"applicable in software engineering across industries"}),(0,i.jsx)("td",{children:"focuses on business process modeling/automation"})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:"Diagram Types"}),(0,i.jsx)("td",{children:(0,i.jsxs)("ul",{children:[(0,i.jsxs)("li",{children:[(0,i.jsx)("b",{children:"Structural"}),(0,i.jsxs)("ul",{children:[(0,i.jsx)("li",{children:"Class Diagram"}),(0,i.jsx)("li",{children:"Component Diagram"}),(0,i.jsx)("li",{children:"Composite Structure Diagram"}),(0,i.jsx)("li",{children:"Deployment Diagram"}),(0,i.jsx)("li",{children:"Object Diagram"}),(0,i.jsx)("li",{children:"Package Diagram"}),(0,i.jsx)("li",{children:"Profile Diagram"})]})]}),(0,i.jsxs)("li",{children:[(0,i.jsx)("b",{children:"Behavioral"}),(0,i.jsxs)("ul",{children:[(0,i.jsx)("li",{children:"Activity Diagrams"}),(0,i.jsxs)("li",{children:[(0,i.jsx)("b",{children:"Interaction Diagram"}),(0,i.jsxs)("ul",{children:[(0,i.jsx)("li",{children:"Communication Diagram"}),(0,i.jsx)("li",{children:"Interaction Overview Diagram"}),(0,i.jsx)("li",{children:"Sequence Diagram"}),(0,i.jsx)("li",{children:"Timing Diagram"})]})]}),(0,i.jsx)("li",{children:"State Diagram"}),(0,i.jsx)("li",{children:"Use Case Diagram"})]})]})]})}),(0,i.jsx)("td",{children:(0,i.jsxs)("ul",{children:[(0,i.jsx)("li",{children:"process"}),(0,i.jsx)("li",{children:"collaboration"}),(0,i.jsx)("li",{children:"choreography"})]})})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:"audience"}),(0,i.jsx)("td",{children:"software engineers, architects, developers"}),(0,i.jsx)("td",{children:"architects, business analysts, managers"})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:"Level of Detail"}),(0,i.jsx)("td",{children:"detailed system modeling"}),(0,i.jsx)("td",{children:"high-level abstraction of business processes"})]})]})]})}),(0,i.jsx)(a.Z,{value:"oop",label:"OOP Terms",children:(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Abstract Class"}),": A blueprint for other classes to inherit from, often containing common methods and properties"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Abstraction"}),": Simplifying complex systems by focusing on essential characteristics while hiding unnecessary details"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Aggregation Hierarchy"}),": A structure that organizes classes based on their aggregation relationships, forming a hierarchy of dependencies"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Aggregation"}),": A relationship where one class contains references to other classes, but the referenced classes can exist independently"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Association"}),": A relationship between classes where one class is related to another, typically indicating a usage or dependency"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Attribute"}),": A characteristic or property that describes an object"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Class"}),": A blueprint for creating objects that defines their structure and behavior"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Cohesion"}),": The degree to which the elements within a module belong together and work together towards a common purpose"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Collaboration"}),": Interaction among objects to achieve a common goal, often involving passing messages between objects"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Composition"}),": A stronger form of aggregation where the contained objects are part of the whole and have a lifecycle dependent on the container"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Concrete Class"}),": A class that can be instantiated to create objects directly"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Coupling"}),": The degree of interdependence between modules or classes within a system"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Encapsulation"}),": Bundling data and methods that operate on the data into a single unit, hiding the internal state of an object from the outside"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Information Hiding"}),": Restricting access to certain parts of an object, protecting its internal details from external interference"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Inheritance Hierarchy"}),": A structure that organizes classes based on their inheritance relationships, forming a hierarchy of specialization"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Inheritance"}),": A mechanism where a new class inherits properties and behavior from an existing class"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Instance"}),": A specific realization of a class, representing a unique object in memory"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Instantiate"}),": Creating an instance of a class, allocating memory for the object and initializing its properties"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Interface"}),": A set of methods that define the behavior expected from a class, providing a contract for how a class should interact with the outside world"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Message"}),": Communication between objects, often invoking a method on another object"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Messaging"}),": The process of sending and receiving messages between objects to achieve desired behaviors -"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Multiple Inheritance"}),": A feature in some programming languages where a class can inherit properties and behavior from multiple parent classes"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Multiplicity"}),": The cardinality of relationships, indicating how many instances of one class are associated with instances of another clas"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Object Space Database"}),": A database system that stores objects rather than traditional rows and columns"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Object"}),": An instance of a class representing a unique entity with its own state and behavior"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Object Oriented Programming (OOP)"}),': A programming paradigm centered around the concept of "objects," which are instances of classes representing real-world entities. OOP focuses on organizing code into modular units (objects) that encapsulate data and behavior. It promotes concepts like inheritance, polymorphism, and encapsulation to create reusable and maintainable code']}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Operation"}),": A function or method that can be performed on an object"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Override"}),": Providing a new implementation for a method inherited from a superclass in a subclass"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Pattern"}),": A reusable solution to a common problem in software design"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Persistence"}),": The ability of data to outlast the execution of the program, typically achieved through storage in databases or files"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Persistent Object"}),": An object whose state is stored beyond the lifetime of the program execution"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Polymorphism"}),": The ability of objects to be treated as instances of their parent class or any of its subclasses"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Single Inheritance"}),": A restriction where a class can inherit properties and behavior from only one parent class"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Stereotype"}),": A fixed idea or image of a particular type of person or thing, often used in the context of classifying objects or behaviors"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Subclass"}),": A class that inherits properties and behavior from a superclass"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Superclass"}),": A class from which other classes inherit properties and behavior"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Transient Object"}),": An object that exists temporarily and is not stored permanently"]}),"\n"]})})]})]})}function j(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(g,{...e})}):g(e)}}}]);