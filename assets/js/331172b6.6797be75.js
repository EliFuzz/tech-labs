"use strict";(self.webpackChunkclassic=self.webpackChunkclassic||[]).push([[9610],{84517:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>d,default:()=>j,frontMatter:()=>a,metadata:()=>c,toc:()=>h});var i=s(11527),t=s(88672),r=s(29140),l=s(52360);const a={title:"Programming Paradigms",description:"Programming Paradigms Overview",hide_table_of_contents:!0},d=void 0,c={id:"education/software-development/programming-paradigms",title:"Programming Paradigms",description:"Programming Paradigms Overview",source:"@site/docs/education/03-software-development/01-programming-paradigms.mdx",sourceDirName:"education/03-software-development",slug:"/education/software-development/programming-paradigms",permalink:"/tech-labs/docs/education/software-development/programming-paradigms",draft:!1,unlisted:!1,editUrl:"https://github.com/EliFuzz/tech-labs/docs/education/03-software-development/01-programming-paradigms.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Programming Paradigms",description:"Programming Paradigms Overview",hide_table_of_contents:!0},sidebar:"education",previous:{title:"Software Development",permalink:"/tech-labs/docs/category/software-development"},next:{title:"Software Development Lifecycle",permalink:"/tech-labs/docs/education/software-development/sdlc"}},o={},h=[];function x(e){const n={code:"code",em:"em",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.a)(),...e.components};return(0,i.jsxs)(r.Z,{children:[(0,i.jsx)(l.Z,{value:"definition",label:"Definition",children:(0,i.jsxs)("table",{children:[(0,i.jsx)("thead",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("th",{children:"Aspect"}),(0,i.jsx)("th",{children:"Functional Programming (FP)"}),(0,i.jsx)("th",{children:"Object-Oriented Programming (OOP)"})]})}),(0,i.jsxs)("tbody",{children:[(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("b",{children:"Paradigm"})}),(0,i.jsx)("td",{children:"FP is based on the concept of functions as first-class citizens. It emphasizes the use of pure functions, immutability, and declarative programming"}),(0,i.jsx)("td",{children:"OOP is based on the concept of objects and classes. It emphasizes encapsulation, inheritance, and polymorphism"})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("b",{children:"Core Concept"})}),(0,i.jsx)("td",{children:"Functions"}),(0,i.jsx)("td",{children:"Objects"})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("b",{children:"Data Handling"})}),(0,i.jsx)("td",{children:"Immutable data structures are preferred. Data is treated as immutable, and transformations are done through the application of functions that create new data rather than modifying existing data"}),(0,i.jsx)("td",{children:"Objects encapsulate state and behavior. State modification occurs through methods and instance variables"})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("b",{children:"Side Effects"})}),(0,i.jsx)("td",{children:"Side effects are discouraged. Pure functions are preferred, which means functions produce the same output for a given input and do not have side effects"}),(0,i.jsx)("td",{children:"Side effects are common. Objects can have internal state and methods can modify this state, potentially causing side effects"})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("b",{children:"State Management"})}),(0,i.jsx)("td",{children:"State is managed through immutable data structures. Functions operate on these data structures without modifying them"}),(0,i.jsx)("td",{children:"State is encapsulated within objects. Objects maintain their state through instance variables, which can be modified through methods. State changes are often explicit and localized to specific objects"})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("b",{children:"Modularity"})}),(0,i.jsx)("td",{children:"Functions are composable and modular. Functions can be combined together to create larger functions"}),(0,i.jsx)("td",{children:"Classes provide encapsulation and modularity. Objects encapsulate both data and behavior, allowing for modular and reusable code through inheritance and composition"})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("b",{children:"Inheritance"})}),(0,i.jsx)("td",{children:"Inheritance is less emphasized. Instead, FP relies on higher-order functions, composition, and function chaining for code reuse and abstraction"}),(0,i.jsx)("td",{children:"Inheritance is a core concept. Objects can inherit properties and behavior from parent classes, enabling code reuse and establishing hierarchical relationships between classes"})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("b",{children:"Polymorphism"})}),(0,i.jsx)("td",{children:"Polymorphism is achieved through higher-order functions and function overloading"}),(0,i.jsx)("td",{children:"Polymorphism is achieved through inheritance and method overriding. Subclasses can override methods defined in parent classes to provide specialized behavior"})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("b",{children:"Encapsulation"})}),(0,i.jsx)("td",{children:"Encapsulation is achieved through function scope and closure. Functions can encapsulate internal state and behavior"}),(0,i.jsx)("td",{children:"Encapsulation is achieved through classes. Objects encapsulate both state and behavior, and access to internal data is controlled through methods"})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("b",{children:"Error Handling"})}),(0,i.jsx)("td",{children:"Error handling is often done through techniques like Monads in languages like Haskell"}),(0,i.jsx)("td",{children:"Error handling is typically done through exceptions and try-catch blocks"})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("b",{children:"Concurrency"})}),(0,i.jsx)("td",{children:"Pure functions and immutable data structures make concurrency easier to manage as there are no shared mutable state and fewer concerns about race conditions"}),(0,i.jsx)("td",{children:"Concurrency can be more challenging due to shared mutable state. Careful synchronization mechanisms like locks or synchronized methods are often required to ensure thread safety"})]})]})]})}),(0,i.jsx)(l.Z,{value:"languages",label:"Languages",children:(0,i.jsxs)("table",{children:[(0,i.jsx)("thead",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("th",{children:"Language"}),(0,i.jsx)("th",{children:"Core Paradigm"}),(0,i.jsx)("th",{children:"Functional Features"}),(0,i.jsx)("th",{children:"Support for First-class Functions"}),(0,i.jsx)("th",{children:"Support for Closures"}),(0,i.jsx)("th",{children:"Support for Immutable Data Structures"})]})}),(0,i.jsxs)("tbody",{children:[(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("b",{children:"C#"})}),(0,i.jsx)("td",{children:"OOP"}),(0,i.jsx)("td",{children:"Closures, lambdas"}),(0,i.jsx)("td",{children:"+"}),(0,i.jsx)("td",{children:"+"}),(0,i.jsxs)("td",{children:["Limited (through ",(0,i.jsx)(n.code,{children:"readonly"})," keyword)"]})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("b",{children:"C++11"})}),(0,i.jsx)("td",{children:"Mixed but primary OOP"}),(0,i.jsx)("td",{children:"Lambda expressions, function objects, and higher-order functions"}),(0,i.jsx)("td",{children:"+"}),(0,i.jsx)("td",{children:"+"}),(0,i.jsxs)("td",{children:["Limited (with libraries like ",(0,i.jsx)(n.code,{children:"Immutable"})," C++)"]})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("b",{children:"Go"})}),(0,i.jsx)("td",{children:"Mixed"}),(0,i.jsx)("td",{children:"Higher-order functions and closures"}),(0,i.jsx)("td",{children:"+"}),(0,i.jsx)("td",{children:"+"}),(0,i.jsx)("td",{children:"Limited (with libraries like immutable)"})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("b",{children:"Java"})}),(0,i.jsx)("td",{children:"OOP"}),(0,i.jsx)("td",{children:"Lambda expressions, streams, anonymous classes"}),(0,i.jsx)("td",{children:"+"}),(0,i.jsx)("td",{children:"+"}),(0,i.jsxs)("td",{children:["Limited (through ",(0,i.jsx)(n.code,{children:"final"})," keyword)"]})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("b",{children:"JavaScript"})}),(0,i.jsx)("td",{children:"Mixed"}),(0,i.jsx)("td",{children:"First-class functions, closures"}),(0,i.jsx)("td",{children:"+"}),(0,i.jsx)("td",{children:"+"}),(0,i.jsxs)("td",{children:["Through ",(0,i.jsx)(n.code,{children:"Object.freeze()"})," and libraries like ",(0,i.jsx)(n.code,{children:"immutable.js"})]})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("b",{children:"Kotlin"})}),(0,i.jsx)("td",{children:"Mixed but more lean to Functional"}),(0,i.jsx)("td",{children:"Higher-order functions, first-class functions, and closures"}),(0,i.jsx)("td",{children:"+"}),(0,i.jsx)("td",{children:"+"}),(0,i.jsxs)("td",{children:["Yes (with ",(0,i.jsx)(n.code,{children:"val"})," keyword)"]})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("b",{children:"Python"})}),(0,i.jsx)("td",{children:"Mixed but primary OOP"}),(0,i.jsx)("td",{children:"First-class citizens, lambda expressions, and comprehensions"}),(0,i.jsx)("td",{children:"+"}),(0,i.jsx)("td",{children:"+"}),(0,i.jsx)("td",{children:"Yes (through tuples, frozensets, etc.)"})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("b",{children:"Rust"})}),(0,i.jsx)("td",{children:"Mixed"}),(0,i.jsx)("td",{children:"Closures"}),(0,i.jsx)("td",{children:"+"}),(0,i.jsx)("td",{children:"+"}),(0,i.jsxs)("td",{children:["Yes (through libraries like ",(0,i.jsx)(n.code,{children:"rust-immutability"}),")"]})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("b",{children:"Scala"})}),(0,i.jsx)("td",{children:"Mixed"}),(0,i.jsx)("td",{children:"higher-order functions, traits, case classes, and mixins"}),(0,i.jsx)("td",{children:"+"}),(0,i.jsx)("td",{children:"+"}),(0,i.jsxs)("td",{children:["Yes (with ",(0,i.jsx)(n.code,{children:"val"})," keyword)"]})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("b",{children:"Swift"})}),(0,i.jsx)("td",{children:"Mixed"}),(0,i.jsx)("td",{children:"First-class functions, closures"}),(0,i.jsx)("td",{children:"+"}),(0,i.jsx)("td",{children:"+"}),(0,i.jsxs)("td",{children:["Yes (with ",(0,i.jsx)(n.code,{children:"let"})," keyword)"]})]})]})]})}),(0,i.jsx)(l.Z,{value:"oop",label:"OOP",children:(0,i.jsxs)(r.Z,{children:[(0,i.jsx)(l.Z,{value:"principles",label:"Core Principles",attributes:{className:"tabs__vertical"},children:(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Abstraction"}),": Process of simplifying complex reality by modeling classes appropriate to the problem and ignoring irrelevant details","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Process of exposing only the relevant and essential data to the users without showing unnecessary information"}),"\n",(0,i.jsx)(n.li,{children:"Hides the unnecessary implementation details from the user"}),"\n",(0,i.jsx)(n.li,{children:"It's a concept of hiding unnecessary implementation details"}),"\n",(0,i.jsx)(n.li,{children:"Abstraction solves the problem on the design level"}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.em,{children:"Example"}),": Interface or abstract class that defines a set of methods without implementation details"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Aggregation"}),': "has-a" relationship between two classes where one class contains references to other classes',"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Part-whole relationship: One class contains objects of another class"}),"\n",(0,i.jsx)(n.li,{children:"Objects have their own lifetime independent of the container object"}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.em,{children:"Example"}),": University has departments. Department can exist without a university, and a university can have multiple departments"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Association"}),": Relationship between 2 or more objects with their own lifetime and independent existence","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"May have bidirectional navigation"}),"\n",(0,i.jsx)(n.li,{children:"Can be 1-to-1, 1-to-many, or many-to-many"}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.em,{children:"Example"}),": Student is associated with a course. Course can have multiple students, and a student can be enrolled in multiple courses"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Class"}),": Blueprint (template/prototype) for creating objects","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Represents the set of properties or methods that are common to all objects of one type"}),"\n",(0,i.jsx)(n.li,{children:"Can have fields and methods to describe the behavior of an object"}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.em,{children:"Example"}),": Class ",(0,i.jsx)(n.code,{children:"Car"})," that has fields like ",(0,i.jsx)(n.code,{children:"brand"}),", ",(0,i.jsx)(n.code,{children:"model"}),", ",(0,i.jsx)(n.code,{children:"color"}),", and methods like ",(0,i.jsx)(n.code,{children:"start"}),", ",(0,i.jsx)(n.code,{children:"stop"}),". Each car object created from this class will have these properties and methods"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Cohesion"}),": How elements inside a module connected together","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Class is focused on what it should be doing"}),"\n",(0,i.jsx)(n.li,{children:"Only related methods (no extra methods)"}),"\n",(0,i.jsx)(n.li,{children:"High cohesion means that the responsibilities of a given element are highly focused, promoting readability and maintainability"}),"\n",(0,i.jsx)(n.li,{children:"Low cohesion, on the other hand, means that an element has too many responsibilities. It can be complex and hard to maintain, understand, and reduce reusability"}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.em,{children:"Example"}),":","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["High cohesion (desirable): ",(0,i.jsx)(n.code,{children:"Operations"})," class has a single responsibility with ",(0,i.jsx)(n.code,{children:"add"}),", ",(0,i.jsx)(n.code,{children:"subtract"}),", and ",(0,i.jsx)(n.code,{children:"multiply"})," methods"]}),"\n",(0,i.jsxs)(n.li,{children:["Low cohesion: ",(0,i.jsx)(n.code,{children:"Operations"})," class has too many responsibilities with ",(0,i.jsx)(n.code,{children:"add"}),", ",(0,i.jsx)(n.code,{children:"sendEmail"}),", and ",(0,i.jsx)(n.code,{children:"print"})," methods"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Composition"}),': Constructs classes using other classes as building blocks, forming a "has-a" relationship rather than an "is-a" relationship as in inheritance',"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Containment: Objects are composed of other objects as part of their internal structure"}),"\n",(0,i.jsx)(n.li,{children:"Composition implies a stronger relationship where the lifetime of the contained object is managed by the container object"}),"\n",(0,i.jsx)(n.li,{children:"Stronger relationship: Parts cannot exist independently of the whole"}),"\n",(0,i.jsx)(n.li,{children:"Assists in attaining high flexibility (loosely coupled) and prevents breaking of encapsulation"}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.em,{children:"Example"}),": Class ",(0,i.jsx)(n.code,{children:"Car"})," containing objects of class ",(0,i.jsx)(n.code,{children:"Engine"})," and ",(0,i.jsx)(n.code,{children:"Wheel"})]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Coupling"}),": Degree to which one class knows about another class","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Changing something major in one class should not affect the other"}),"\n",(0,i.jsx)(n.li,{children:"High coupling implies that a class has high dependence on another class. This is not a good thing as a change in one class may affect the other"}),"\n",(0,i.jsx)(n.li,{children:"Low coupling is often a sign of a well-structured computer system and a good design, and when combined with high cohesion, supports the general goals of high readability and maintainability"}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.em,{children:"Example"}),":","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Low coupling (desirable): ",(0,i.jsx)(n.code,{children:"Client"})," class asks a ",(0,i.jsx)(n.code,{children:"DatabaseManager"})," class to fetch data. Here, the ",(0,i.jsx)(n.code,{children:"Client"})," class doesn't need to know how to access the database"]}),"\n",(0,i.jsxs)(n.li,{children:["High coupling: ",(0,i.jsx)(n.code,{children:"Client"})," class accessing the database directly to fetch the data"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Dependency"}),": Relationship where one class depends on another class but has no ownership","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Changes in the depended-on class may affect the dependent class"}),"\n",(0,i.jsx)(n.li,{children:"It's a weaker relationship compared to association"}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.em,{children:"Example"}),": Car depends on a fuel source to operate. If the fuel source changes, the car's behavior may be affected"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Dependency Injection"}),": Dependency injection makes it easy to create loosely coupled components, which typically means that components consume functionality defined by interfaces without having any first-hand knowledge of which implementation classes are being used","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Promotes loose coupling and easier testing by allowing dependencies to be swapped or mocked"}),"\n",(0,i.jsx)(n.li,{children:"Dependencies are typically passed through constructors, methods, or setter injection"}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.em,{children:"Example"}),": Instead of a car creating its own fuel object, it receives a fuel object from an external source"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Encapsulation"}),": It's a bundling of data and methods that operate on the data into a single unit, called a class","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Data hiding: Restricts access to certain components of the object"}),"\n",(0,i.jsx)(n.li,{children:"Access specifiers (e.g., public, private, protected) control the visibility of methods and variables"}),"\n",(0,i.jsx)(n.li,{children:"Prevents access to implementation details"}),"\n",(0,i.jsx)(n.li,{children:"It's a technique to prevent accidental modification of data"}),"\n",(0,i.jsx)(n.li,{children:'Data hiding ("Black boxing")'}),"\n",(0,i.jsx)(n.li,{children:"Encapsulation solves the problem in the implementation level"}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.em,{children:"Example"}),": Class with private attributes and public methods for accessing and modifying those attributes"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Inheritance"}),": Mechanism by which one class acquires the properties (methods and fields) of another class","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Allows new classes to reuse, extend, and modify the behavior of existing classes"}),"\n",(0,i.jsx)(n.li,{children:"Superclass (base class) and subclass (derived class) relationship"}),"\n",(0,i.jsx)(n.li,{children:'"is-a" relationship'}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.em,{children:"Example"}),": Class ",(0,i.jsx)(n.code,{children:"Animal"})," with properties and methods, and subclasses like ",(0,i.jsx)(n.code,{children:"Dog"})," and ",(0,i.jsx)(n.code,{children:"Cat"})," inheriting from it"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Inversion of Control (IoC)"}),": Pattern used for decoupling components and layers in the system","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"It allows for dynamic runtime behavior by letting the framework control the execution flow"}),"\n",(0,i.jsx)(n.li,{children:"IoC is often implemented using techniques such as dependency injection or event handling"}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.em,{children:"Example"}),":","\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"public class TextEditor {\n    private SpellChecker checker;\n    public TextEditor() {\n        this.checker = new SpellChecker();\n    }\n}\n\n// IoC\npublic class TextEditor {\n    private IocSpellChecker checker;\n    public TextEditor(IocSpellChecker checker) {\n        this.checker = checker;\n    }\n}\n/*\nYou have inverted control by handing\nthe responsibility of instantiating\nthe spell checker from the TextEditor class\nto the caller\n*/\nSpellChecker sc = new SpellChecker; // dependency\nTextEditor textEditor = new TextEditor(sc);\n"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Object"}),": It's an instance of the class. When a class is defined, no memory is allocated in the heap only a pointer in the stack but when it is instantiated (i.e., an object is created) memory is allocated","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Have states (data) and behaviors (methods)"}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.em,{children:"Example"}),": Object might be a specific ",(0,i.jsx)(n.code,{children:"Car"}),", e.g. red Ferrari. This object will inherit all the properties and methods of the ",(0,i.jsx)(n.code,{children:"Car"})," class but will represent a specific Ferrari"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Polymorphism"}),": Ability to take various forms. It allows objects of different classes to be treated as objects of a common superclass","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Method overriding (static binding): Subclasses can provide a specific implementation of a method that is already provided by its superclass"}),"\n",(0,i.jsx)(n.li,{children:"Method overloading (dynamic binding): Multiple methods can have the same name with different parameters"}),"\n",(0,i.jsx)(n.li,{children:"Many forms - one interface, multiple functions (behavior)"}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.em,{children:"Example"}),": ",(0,i.jsx)(n.code,{children:"draw()"})," method in shapes where each shape implements its own version"]}),"\n"]}),"\n"]}),"\n"]})}),(0,i.jsx)(l.Z,{value:"solid",label:"SOLID Principles",children:(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Single Responsibility Principle (SRP)"}),": Class should have a single responsibility","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Class should have only one reason to change"}),"\n",(0,i.jsx)(n.li,{children:"Class and methods should have only 1 responsibility"}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.em,{children:"Example"}),": Instead of implementing a class that handles file reading, printing, and sendingEmail, these responsibilities should be split into separate classes"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Open/Closed Principle (OCP)"}),": Classes should be open for extension, but closed for modification","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Class should be made in such a way that adding new features or components should not lead to modification in the existing system"}),"\n",(0,i.jsx)(n.li,{children:"How? - Rely on abstractions"}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.em,{children:"Example"}),": If you have a class that calculates the area of shapes, instead of modifying the class to support a new shape, you should create a new class for that shape and have it implement the existing shape interface"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Liskov Substitution Principle (LSP)"}),": If a program is using a base class, it should be able to use any of its subclasses without the program knowing it","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Derived classes must be substitutable for their base classes"}),"\n",(0,i.jsx)(n.li,{children:"Child classes must not remove base class behavior or violate base class invariants"}),"\n",(0,i.jsx)(n.li,{children:'"Is Substitutable for" in all situations'}),"\n",(0,i.jsx)(n.li,{children:"Extended class should implement/override all functionality"}),"\n",(0,i.jsx)(n.li,{children:"It looks like a duck quacks like a duck, but needs batteries -> wrong abstraction"}),"\n",(0,i.jsx)(n.li,{children:"Smells: if method trying to detect which class he should use; derived class didn't implement one of the methods in a base class"}),"\n",(0,i.jsx)(n.li,{children:"How to mitigate? - Create small interfaces"}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.em,{children:"Example"}),": It looks like a duck quacks like a duck, but needs batteries -> wrong abstraction"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Interface Segregation Principle (ISP)"}),": Clients should not be forced to depend on interfaces they do not use","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Use smaller interfaces"}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.em,{children:"Example"}),": Instead of having a large interface with many methods, it's better to have many smaller interfaces, each catering to a specific behavior"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Dependency Inversion Principle (DIP)"}),": High-level modules should not depend on low-level modules; both should depend on abstractions","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Abstractions should not depend on details, details should depend upon abstractions"}),"\n",(0,i.jsx)(n.li,{children:"Dependency Injection (DI) is an implementation of DIP"}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.em,{children:"Example"}),": Instead of hardcoding a specific database technology (like MySQL) into your application, you use an interface that can work with any database. The specific database implementation is then determined at runtime"]}),"\n"]}),"\n"]}),"\n"]})})]})}),(0,i.jsx)(l.Z,{value:"functional",label:"Functional",children:(0,i.jsxs)(r.Z,{children:[(0,i.jsx)(l.Z,{value:"overview",label:"Overview",attributes:{className:"tabs__vertical"},children:(0,i.jsx)(n.p,{children:"Paradigm that treats computation as the evaluation of mathematical functions, emphasizing immutable data and pure functions."})}),(0,i.jsx)(l.Z,{value:"advantages",label:"Advantages",children:(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Conciseness and Expressiveness"}),": Encourages concise and expressive code"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Modularity and Reusability"}),": Promotes modular design for maintainable and reusable code"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Parallelism and Concurrency"}),": Facilitates parallelism and concurrent programming"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Reduced Bugs and Side Effects"}),": Minimizes bugs and makes programs easier to debug and test"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Scalability"}),": Well-suited for building scalable systems"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Better Error Handling"}),": Provides declarative error handling mechanisms"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Cross-platform Compatibility"}),": Runs on multiple platforms for versatility"]}),"\n"]})}),(0,i.jsx)(l.Z,{value:"principles",label:"Principles",children:(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Immutability"}),": Data is immutable, preventing unexpected side effects"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Pure Functions"}),": Functions produce the same output for the same input without side effects"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"First-class and Higher-order Functions"}),": Functions can be passed as arguments, returned as values, and assigned to variables"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Recursion"}),": Functions call themselves to solve problems without mutable state"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Laziness/Eager Evaluation"}),": Evaluation is delayed until needed, improving efficiency"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Referential Transparency"}),": Expressions can be replaced with their values without changing behavior"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Pattern Matching"}),": Deconstructs data for concise and expressive control flow"]}),"\n"]})})]})})]})}function j(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(x,{...e})}):x(e)}}}]);