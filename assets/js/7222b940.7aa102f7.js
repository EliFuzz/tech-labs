"use strict";(self.webpackChunkclassic=self.webpackChunkclassic||[]).push([[4539],{90337:(e,i,t)=>{t.r(i),t.d(i,{assets:()=>a,contentTitle:()=>l,default:()=>u,frontMatter:()=>c,metadata:()=>n,toc:()=>h});const n=JSON.parse('{"id":"education/system-design/micro-frontend","title":"Micro Frontend","description":"Micro Frontend","source":"@site/docs/education/04-system-design/06-micro-frontend.mdx","sourceDirName":"education/04-system-design","slug":"/education/system-design/micro-frontend","permalink":"/tech-labs/docs/education/system-design/micro-frontend","draft":false,"unlisted":false,"editUrl":"https://github.com/EliFuzz/tech-labs/docs/education/04-system-design/06-micro-frontend.mdx","tags":[],"version":"current","sidebarPosition":6,"frontMatter":{"title":"Micro Frontend","description":"Micro Frontend","hide_table_of_contents":true},"sidebar":"education","previous":{"title":"Data Mesh","permalink":"/tech-labs/docs/education/system-design/data-mesh"},"next":{"title":"Enterprise","permalink":"/tech-labs/docs/education/system-design/enterprise"}}');var s=t(86070),r=t(15658),d=t(52421),o=t(74610);const c={title:"Micro Frontend",description:"Micro Frontend",hide_table_of_contents:!0},l=void 0,a={},h=[{value:"System Architecture",id:"system-architecture",level:2},{value:"Repositories",id:"repositories",level:2}];function p(e){const i={h2:"h2",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(i.h2,{id:"system-architecture",children:"System Architecture"}),"\n",(0,s.jsx)(d.A,{queryString:"primary",children:(0,s.jsx)(o.A,{value:"system-architecture-overview",label:"Overview",children:(0,s.jsxs)("table",{children:[(0,s.jsx)("thead",{children:(0,s.jsxs)("tr",{children:[(0,s.jsx)("th",{children:"Aspect"}),(0,s.jsx)("th",{children:"Monolith"}),(0,s.jsx)("th",{children:"Modular Monolith"}),(0,s.jsx)("th",{children:"Micro Frontend (Vertical)"}),(0,s.jsx)("th",{children:"Micro Frontend (Horizontal)"}),(0,s.jsx)("th",{children:"Island Architecture"})]})}),(0,s.jsxs)("tbody",{children:[(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Visualization"})}),(0,s.jsx)("td",{}),(0,s.jsx)("td",{}),(0,s.jsx)("td",{}),(0,s.jsx)("td",{}),(0,s.jsx)("td",{})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Definition"})}),(0,s.jsx)("td",{children:"Single-tiered software application where the UI and data access code are combined into a single program from a single platform"}),(0,s.jsx)("td",{children:"Monolithic application that is divided into modules based on features or business domains"}),(0,s.jsx)("td",{children:"Type of microservice architecture where each frontend component corresponds to a vertical slice of the application"}),(0,s.jsx)("td",{children:"Microservice approach where components are split based on horizontal layers like presentation, business logic, etc."}),(0,s.jsx)("td",{children:"Modern approach that involves building a web application as a set of small, independent, and loosely coupled islands"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Complexity"})}),(0,s.jsx)("td",{children:"Low to moderate, depending on the application size"}),(0,s.jsx)("td",{children:"Moderate, as it involves breaking down the monolith into logical modules"}),(0,s.jsx)("td",{children:"High, due to the distributed nature of services"}),(0,s.jsx)("td",{children:"High, similar to vertical micro frontends but with an additional layer of complexity due to horizontal slicing"}),(0,s.jsx)("td",{children:"Moderate to high, depending on the granularity of the islands"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Scalability"})}),(0,s.jsx)("td",{children:"Challenging for large applications due to tight coupling and complexity"}),(0,s.jsx)("td",{children:"Improved over monolith due to modularity, but still requires careful management of module interactions"}),(0,s.jsx)("td",{children:"Good, as each service can be updated independently"}),(0,s.jsx)("td",{children:"Good, with the added benefit of clear separation of concerns"}),(0,s.jsx)("td",{children:"Excellent, as each island can be maintained separately"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Technology Stack"})}),(0,s.jsx)("td",{children:"Uniform across the entire application"}),(0,s.jsx)("td",{children:"Uniform or varied, depending on module requirements"}),(0,s.jsx)("td",{children:"Can vary between services, allowing for the use of best-suited technologies"}),(0,s.jsx)("td",{children:"Can vary between layers, providing flexibility"}),(0,s.jsx)("td",{children:"Highly flexible, with each island potentially using different technologies"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Use Case"})}),(0,s.jsx)("td",{children:"Small to medium-sized applications with a limited scope"}),(0,s.jsx)("td",{children:"Medium-sized applications that require clear separation of concerns without fully committing to Micro Frontend (MFE)"}),(0,s.jsx)("td",{children:"Large-scale applications with clear domain boundaries and the need for independent scaling and deployment"}),(0,s.jsx)("td",{children:"Large applications that require a clear separation of presentation and business logic"}),(0,s.jsx)("td",{children:"Applications that can benefit from a mix of different technologies and independent deployment cycles"})]})]})]})})}),"\n",(0,s.jsx)(i.h2,{id:"repositories",children:"Repositories"}),"\n",(0,s.jsx)(d.A,{queryString:"primary",children:(0,s.jsx)(o.A,{value:"repositories-overview",label:"Overview"})})]})}function u(e={}){const{wrapper:i}={...(0,r.R)(),...e.components};return i?(0,s.jsx)(i,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}}}]);