"use strict";(self.webpackChunkclassic=self.webpackChunkclassic||[]).push([[2189],{37612:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>j,contentTitle:()=>g,default:()=>w,frontMatter:()=>p,metadata:()=>v,toc:()=>x});var t=i(11527),a=i(88672),r=i(29140),l=i(52360),c=i(52296);const s="package main\n\n// recursive\nfunc euclideanRecursive(a, b int) int {\n    if b == 0 {\n        return a\n    }\n    return euclideanRecursive(b, a%b)\n}\n\n// iterative\nfunc euclideanIterative(a, b int) int {\n    var temp int\n    for b != 0 {\n        temp = b\n        b = a % b\n        a = temp\n    }\n    return a\n}\n",d="public class EuclideanAlgorithm {\n\n  // recursive\n  public static int euclideanRecursive(int a, int b) {\n    if (b == 0) {\n      return a;\n    }\n    return euclideanRecursive(b, a % b);\n  }\n\n  // iterative\n  public static int euclideanIterative(int a, int b) {\n    int temp;\n    while (b != 0) {\n      temp = b;\n      b = a % b;\n      a = temp;\n    }\n    return a;\n  }\n}\n",u="// recursive\nfunction euclideanRecursive(a, b) {\n  if (b === 0) {\n    return a;\n  }\n  return euclideanRecursive(b, a % b);\n}\n\n// iterative\nfunction euclideanIterative(a, b) {\n  let temp;\n  while (b !== 0) {\n    temp = b;\n    b = a % b;\n    a = temp;\n  }\n  return a;\n}\n",o="// recursive\nfun euclideanRecursive(a: Int, b: Int): Int {\n    return if (b == 0) a else euclideanRecursive(b, a % b)\n}\n\n// iterative\nfun euclideanIterative(a: Int, b: Int): Int {\n    var temp: Int\n    var aa = a\n    var bb = b\n    while (bb != 0) {\n        temp = bb\n        bb = aa % bb\n        aa = temp\n    }\n    return aa\n}\n",h="# recursive\ndef euclidean_recursive(a, b):\n    return a if b == 0 else euclidean_recursive(b, a % b)\n\n# iterative\ndef euclidean_iterative(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a\n",b="// recursive\nfn euclidean_recursive(mut a: i32, mut b: i32) -> i32 {\n    if b == 0 {\n        return a;\n    }\n    return euclidean_recursive(b, a % b);\n}\n\n// iterative\nfn euclidean_iterative(mut a: i32, mut b: i32) -> i32 {\n    let mut temp: i32;\n    while b != 0 {\n        temp = b;\n        b = a % b;\n        a = temp;\n    }\n    return a;\n}\n",m="// recursive\nfunction euclideanRecursive(a: number, b: number): number {\n  return b === 0 ? a : euclideanRecursive(b, a % b);\n}\n\n// iterative\nfunction euclideanIterative(a: number, b: number): number {\n  let temp: number;\n  while (b !== 0) {\n    temp = b;\n    b = a % b;\n    a = temp;\n  }\n  return a;\n}\n",p={title:"Euclidean Algorithm",description:"Euclidean Algorithm",hide_table_of_contents:!0},g=void 0,v={id:"education/computer-science/algorithms/algo/euclidean-algorithm",title:"Euclidean Algorithm",description:"Euclidean Algorithm",source:"@site/docs/education/01-computer-science/10-algorithms/03-algo/euclidean-algorithm.mdx",sourceDirName:"education/01-computer-science/10-algorithms/03-algo",slug:"/education/computer-science/algorithms/algo/euclidean-algorithm",permalink:"/docs/education/computer-science/algorithms/algo/euclidean-algorithm",draft:!1,unlisted:!1,editUrl:"https://github.com/EliFuzz/tech-labs/docs/education/01-computer-science/10-algorithms/03-algo/euclidean-algorithm.mdx",tags:[],version:"current",frontMatter:{title:"Euclidean Algorithm",description:"Euclidean Algorithm",hide_table_of_contents:!0},sidebar:"education",previous:{title:"Discrete Fourier Transform",permalink:"/docs/education/computer-science/algorithms/algo/discrete-fourier-transform"},next:{title:"Euclidean Distance",permalink:"/docs/education/computer-science/algorithms/algo/euclidean-distance"}},j={},x=[{value:"Definition",id:"definition",level:2},{value:"Practice",id:"practice",level:2}];function f(e){const n={code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"definition",children:"Definition"}),"\n",(0,t.jsxs)(r.Z,{children:[(0,t.jsx)(l.Z,{value:"definition",label:"Definition",children:(0,t.jsx)(n.p,{children:"The Euclidean Algorithm is a method for finding the greatest common divisor (GCD) of two integers. It relies on the principle that the GCD of two numbers remains the same if the larger number is replaced by its difference with the smaller number. This process continues until one of the numbers becomes zero, at which point the other number is the GCD"})}),(0,t.jsx)(l.Z,{value:"how",label:"Explanation",children:(0,t.jsxs)(n.p,{children:["Select two non-negative integers, denoted as ",(0,t.jsx)(n.code,{children:"a"})," and ",(0,t.jsx)(n.code,{children:"b"}),". If ",(0,t.jsx)(n.code,{children:"b"})," equals zero, the greatest common divisor (GCD) of ",(0,t.jsx)(n.code,{children:"a"})," and ",(0,t.jsx)(n.code,{children:"b"})," is ",(0,t.jsx)(n.code,{children:"a"}),". Otherwise, repeatedly apply the algorithm with ",(0,t.jsx)(n.code,{children:"b"})," as the new ",(0,t.jsx)(n.code,{children:"a"})," and ",(0,t.jsx)(n.code,{children:"a modulo b"})," as the new ",(0,t.jsx)(n.code,{children:"b"})," until ",(0,t.jsx)(n.code,{children:"b"})," reaches zero. Finally, return the value of ",(0,t.jsx)(n.code,{children:"a"})," as the GCD"]})}),(0,t.jsx)(l.Z,{value:"guidance",label:"Guidance",children:(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Take two non-negative integers ",(0,t.jsx)(n.code,{children:"a"})," and ",(0,t.jsx)(n.code,{children:"b"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["if ",(0,t.jsx)(n.code,{children:"b"})," is ",(0,t.jsx)(n.code,{children:"0"}),", the GCD is ",(0,t.jsx)(n.code,{children:"a"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["return ",(0,t.jsx)(n.code,{children:"a"})]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["otherwise, find the remainder of ",(0,t.jsx)(n.code,{children:"a"})," divided by ",(0,t.jsx)(n.code,{children:"b"})]}),"\n",(0,t.jsxs)(n.li,{children:["replace ",(0,t.jsx)(n.code,{children:"a"})," with the value of ",(0,t.jsx)(n.code,{children:"b"}),", and ",(0,t.jsx)(n.code,{children:"b"})," with the remainder found in the previous step"]}),"\n",(0,t.jsxs)(n.li,{children:["repeat steps until ",(0,t.jsx)(n.code,{children:"b"})," becomes zero"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["Return the value of ",(0,t.jsx)(n.code,{children:"a"}),", which is the GCD"]}),"\n"]})}),(0,t.jsx)(l.Z,{value:"tips",label:"Tips",children:(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"ensure to handle the case where one of the inputs is zero"}),"\n",(0,t.jsx)(n.li,{children:"optimize the algorithm by using iterative instead of recursive implementation for better performance"}),"\n",(0,t.jsx)(n.li,{children:"validate inputs to handle negative integers appropriately"}),"\n"]})})]}),"\n",(0,t.jsx)(n.h2,{id:"practice",children:"Practice"}),"\n",(0,t.jsxs)(r.Z,{children:[(0,t.jsx)(l.Z,{value:"practice",label:"Practice",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"euclideanAlgorithm(a, b)\n  while b is not zero\n    temp := b\n    b := a % b\n    a := temp\n  return a\n"})})}),(0,t.jsx)(l.Z,{value:"solution",label:"Solution",children:(0,t.jsxs)(r.Z,{queryString:"code",children:[(0,t.jsx)(l.Z,{value:"go",label:"",attributes:{title:"Go Lang",className:"code_lang go m"},children:(0,t.jsx)(c.Z,{language:"go",children:s})}),(0,t.jsx)(l.Z,{value:"java",label:"",attributes:{title:"Java",className:"code_lang java m"},children:(0,t.jsx)(c.Z,{language:"java",children:d})}),(0,t.jsx)(l.Z,{value:"js",label:"",attributes:{title:"JavaScript",className:"code_lang js m"},children:(0,t.jsx)(c.Z,{language:"js",children:u})}),(0,t.jsx)(l.Z,{value:"kotlin",label:"",attributes:{title:"Kotlin",className:"code_lang kotlin m"},children:(0,t.jsx)(c.Z,{language:"kotlin",children:o})}),(0,t.jsx)(l.Z,{value:"python",label:"",attributes:{title:"Python",className:"code_lang python m"},children:(0,t.jsx)(c.Z,{language:"python",children:h})}),(0,t.jsx)(l.Z,{value:"rust",label:"",attributes:{title:"Rust",className:"code_lang rust m"},children:(0,t.jsx)(c.Z,{language:"rust",children:b})}),(0,t.jsx)(l.Z,{value:"ts",label:"",attributes:{title:"TypeScript",className:"code_lang ts m"},children:(0,t.jsx)(c.Z,{language:"ts",children:m})})]})})]})]})}function w(e={}){const{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(f,{...e})}):f(e)}}}]);