"use strict";(self.webpackChunkclassic=self.webpackChunkclassic||[]).push([[4382],{38431:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>j,frontMatter:()=>l,metadata:()=>i,toc:()=>h});const i=JSON.parse('{"id":"education/software-development/bitwise-operations","title":"Bitwise Operations","description":"Bitwise Operations","source":"@site/docs/education/03-software-development/04-bitwise-operations.mdx","sourceDirName":"education/03-software-development","slug":"/education/software-development/bitwise-operations","permalink":"/tech-labs/docs/education/software-development/bitwise-operations","draft":false,"unlisted":false,"editUrl":"https://github.com/EliFuzz/tech-labs/docs/education/03-software-development/04-bitwise-operations.mdx","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"title":"Bitwise Operations","description":"Bitwise Operations","hide_table_of_contents":true},"sidebar":"education","previous":{"title":"Software Testing Lifecycle","permalink":"/tech-labs/docs/education/software-development/stlc"},"next":{"title":"Regex","permalink":"/tech-labs/docs/education/software-development/regex"}}');var t=s(86070),r=s(15658),d=s(33407),c=s(33903);const l={title:"Bitwise Operations",description:"Bitwise Operations",hide_table_of_contents:!0},o=void 0,a={},h=[];function x(e){const n={code:"code",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(d.A,{queryString:"primary",children:[(0,t.jsx)(c.A,{value:"overview",label:"Overview",children:(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Binary operation"}),": manipulation of individual bits in binary data or numbers."]})}),(0,t.jsx)(c.A,{value:"negative-number-conversion",label:"Negative number conversion",children:(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Convert number into 2's complement (binary): ",(0,t.jsx)(n.code,{children:"7 -> 0111"})]}),"\n",(0,t.jsxs)(n.li,{children:["Invert all the bits: ",(0,t.jsx)(n.code,{children:"0111 -> 1000"})]}),"\n",(0,t.jsxs)(n.li,{children:["Add 1: ",(0,t.jsx)(n.code,{children:"1000 -> 1001"})]}),"\n"]})}),(0,t.jsx)(c.A,{value:"bitwise-operations",label:"Bitwise operations",children:(0,t.jsxs)("table",{children:[(0,t.jsx)("thead",{children:(0,t.jsxs)("tr",{children:[(0,t.jsx)("th",{style:{minWidth:"220px"},children:"Operator"}),(0,t.jsx)("th",{children:"Description"}),(0,t.jsx)("th",{children:"Example"})]})}),(0,t.jsxs)("tbody",{children:[(0,t.jsxs)("tr",{children:[(0,t.jsxs)("td",{children:["AND (",(0,t.jsx)(n.code,{children:"&"}),")"]}),(0,t.jsxs)("td",{children:["If both bits are ",(0,t.jsx)(n.code,{children:"1"}),", the result is ",(0,t.jsx)(n.code,{children:"1"}),"; otherwise ",(0,t.jsx)(n.code,{children:"0"})]}),(0,t.jsx)("td",{children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-text",children:"0101 (5) &\n0011 (3)\n----\n0001 (1)\n"})})})]}),(0,t.jsxs)("tr",{children:[(0,t.jsxs)("td",{children:["OR (",(0,t.jsx)(n.code,{children:"|"}),")"]}),(0,t.jsxs)("td",{children:["If any bit is ",(0,t.jsx)(n.code,{children:"1"}),", the result is ",(0,t.jsx)(n.code,{children:"1"}),"; otherwise ",(0,t.jsx)(n.code,{children:"0"})]}),(0,t.jsx)("td",{children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-text",children:"0101 (5) |\n0011 (3)\n----\n0111 (7)\n"})})})]}),(0,t.jsxs)("tr",{children:[(0,t.jsxs)("td",{children:["XOR: exclusive OR (",(0,t.jsx)(n.code,{children:"^"}),")"]}),(0,t.jsxs)("td",{children:["If the bits are different, the result is ",(0,t.jsx)(n.code,{children:"1"}),"; otherwise ",(0,t.jsx)(n.code,{children:"0"})]}),(0,t.jsx)("td",{children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-text",children:"0101 (5) ^\n0011 (3)\n----\n0110 (6)\n"})})})]}),(0,t.jsxs)("tr",{children:[(0,t.jsxs)("td",{children:["NOT (",(0,t.jsx)(n.code,{children:"~"}),")"]}),(0,t.jsxs)("td",{children:["Flips the bits. Each ",(0,t.jsx)(n.code,{children:"0"})," becomes ",(0,t.jsx)(n.code,{children:"1"}),", and each ",(0,t.jsx)(n.code,{children:"1"})," becomes ",(0,t.jsx)(n.code,{children:"0"})]}),(0,t.jsx)("td",{children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-text",children:"0000 0101 (5) ~\n--------\n1111 1010 (-6)\n"})})})]}),(0,t.jsxs)("tr",{children:[(0,t.jsxs)("td",{children:["Signed Left Shift (",(0,t.jsx)(n.code,{children:"<<"}),")"]}),(0,t.jsx)("td",{children:"Shifts the bits of the left operand to the left by a number of positions specified by the right operand"}),(0,t.jsx)("td",{children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-text",children:"# positive number\n\n0000 0101 (5) <<\n0000 0010 (2)\n---------\n0001 0100 (20)\n\n# negative number\n\n1111 1011 (-5) <<\n0000 0010 (2)\n---------\n1110 1100 (-20)\n"})})})]}),(0,t.jsxs)("tr",{children:[(0,t.jsxs)("td",{children:["Signed Right Shift (",(0,t.jsx)(n.code,{children:">>"}),")"]}),(0,t.jsx)("td",{children:"Shifts the bits of the left operand to the right by a number of positions specified by the right operand"}),(0,t.jsx)("td",{children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-text",children:"# positive number\n\n0101 (5) >>\n0010 (2)\n----\n0001 (1)\n\n# negative number\n\n1111 1011 (-5) >>\n0000 0010 (2)\n---------\n1111 1110 (-2)\n"})})})]}),(0,t.jsxs)("tr",{children:[(0,t.jsxs)("td",{children:["Unsigned Right Shift (",(0,t.jsx)(n.code,{children:">>>"}),")"]}),(0,t.jsx)("td",{children:"Similar to the right shift operator, but it treats the value as an unsigned integer. It fills the vacant bits on the left with zeros"}),(0,t.jsx)("td",{children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-text",children:"# positive number\n\n0101 (5) >>>\n0010 (2)\n----\n0001 (1)\n\n# negative number\n\n1111 0101 (-5) >>>\n0000 0010 (2)\n---------\n0111 1111 1111 1111 1111 1111 1111 1110 (1073741822)\n"})})})]})]})]})})]})}function j(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(x,{...e})}):x(e)}}}]);