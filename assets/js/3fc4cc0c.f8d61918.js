"use strict";(self.webpackChunkclassic=self.webpackChunkclassic||[]).push([[2160],{80521:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>b,contentTitle:()=>v,default:()=>y,frontMatter:()=>m,metadata:()=>f,toc:()=>j});var i=t(86070),r=t(25710),a=t(98459),s=t(37515),c=t(18792);const l='package main\n\nimport (\n    "math"\n)\n\nfunc tsp(graph [][]int, visited []bool, current, n, count, cost, ans int) int {\n    if count == n && graph[current][0] > 0 {\n        ans = int(math.Min(float64(ans), float64(cost+graph[current][0])))\n        return ans\n    }\n\n    for i := 0; i < n; i++ {\n        if !visited[i] && graph[current][i] > 0 {\n            visited[i] = true\n            ans = tsp(graph, visited, i, n, count+1, cost+graph[current][i], ans)\n            visited[i] = false\n        }\n    }\n    return ans\n}\n',o="import java.util.Arrays;\n\npublic class TSP {\n\n  static int tsp(int[][] graph, boolean[] visited, int current, int n, int count, int cost, int ans) {\n    if (count == n && graph[current][0] > 0) {\n      ans = Math.min(ans, cost + graph[current][0]);\n      return ans;\n    }\n\n    for (int i = 0; i < n; i++) {\n      if (!visited[i] && graph[current][i] > 0) {\n        visited[i] = true;\n        ans = tsp(graph, visited, i, n, count + 1, cost + graph[current][i], ans);\n        visited[i] = false;\n      }\n    }\n    return ans;\n  }\n}\n",u="function tsp(graph, visited, current, n, count, cost, ans) {\n  if (count === n && graph[current][0] > 0) {\n    ans = Math.min(ans, cost + graph[current][0]);\n    return ans;\n  }\n\n  for (let i = 0; i < n; i++) {\n    if (!visited[i] && graph[current][i] > 0) {\n      visited[i] = true;\n      ans = tsp(graph, visited, i, n, count + 1, cost + graph[current][i], ans);\n      visited[i] = false;\n    }\n  }\n  return ans;\n}\n",h="fun tsp(graph: Array<IntArray>, visited: BooleanArray, current: Int, n: Int, count: Int, cost: Int, ans: Int): Int {\n    if (count == n && graph[current][0] > 0) {\n        return minOf(ans, cost + graph[current][0])\n    }\n\n    var newAns = ans\n    for (i in 0 until n) {\n        if (!visited[i] && graph[current][i] > 0) {\n            visited[i] = true\n            newAns = tsp(graph, visited, i, n, count + 1, cost + graph[current][i], newAns)\n            visited[i] = false\n        }\n    }\n    return newAns\n}\n",d="def tsp(graph, visited, current, n, count, cost, ans):\n    if count == n and graph[current][0] > 0:\n        return min(ans, cost + graph[current][0])\n\n    for i in range(n):\n        if not visited[i] and graph[current][i] > 0:\n            visited[i] = True\n            ans = tsp(graph, visited, i, n, count + 1, cost + graph[current][i], ans)\n            visited[i] = False\n    return ans\n",p="use std::cmp;\n\nfn tsp(graph: &Vec<Vec<i32>>, visited: &mut Vec<bool>, current: usize, n: usize, count: usize, cost: i32, ans: i32) -> i32 {\n    if count == n && graph[current][0] > 0 {\n        return cmp::min(ans, cost + graph[current][0]);\n    }\n\n    let mut new_ans = ans;\n    for i in 0..n {\n        if !visited[i] && graph[current][i] > 0 {\n            visited[i] = true;\n            new_ans = tsp(graph, visited, i, n, count + 1, cost + graph[current][i], new_ans);\n            visited[i] = false;\n        }\n    }\n    new_ans\n}\n",g="function tsp(\n  graph: number[][],\n  visited: boolean[],\n  current: number,\n  n: number,\n  count: number,\n  cost: number,\n  ans: number,\n): number {\n  if (count === n && graph[current][0] > 0) {\n    return Math.min(ans, cost + graph[current][0]);\n  }\n\n  let newAns = ans;\n  for (let i = 0; i < n; i++) {\n    if (!visited[i] && graph[current][i] > 0) {\n      visited[i] = true;\n      newAns = tsp(\n        graph,\n        visited,\n        i,\n        n,\n        count + 1,\n        cost + graph[current][i],\n        newAns,\n      );\n      visited[i] = false;\n    }\n  }\n  return newAns;\n}\n",m={title:"Travelling Salesman Problem",description:"Travelling Salesman Problem",hide_table_of_contents:!0},v=void 0,f={id:"education/computer-science/algorithms/algo/travelling-salesman-problem",title:"Travelling Salesman Problem",description:"Travelling Salesman Problem",source:"@site/docs/education/01-computer-science/10-algorithms/03-algo/travelling-salesman-problem.mdx",sourceDirName:"education/01-computer-science/10-algorithms/03-algo",slug:"/education/computer-science/algorithms/algo/travelling-salesman-problem",permalink:"/tech-labs/docs/education/computer-science/algorithms/algo/travelling-salesman-problem",draft:!1,unlisted:!1,editUrl:"https://github.com/EliFuzz/tech-labs/docs/education/01-computer-science/10-algorithms/03-algo/travelling-salesman-problem.mdx",tags:[],version:"current",frontMatter:{title:"Travelling Salesman Problem",description:"Travelling Salesman Problem",hide_table_of_contents:!0},sidebar:"education",previous:{title:"Tower of Hanoi",permalink:"/tech-labs/docs/education/computer-science/algorithms/algo/tower-of-hanoi"},next:{title:"Unique Paths",permalink:"/tech-labs/docs/education/computer-science/algorithms/algo/unique-paths"}},b={},j=[{value:"Definition",id:"definition",level:2},{value:"Practice",id:"practice",level:2}];function x(n){const e={code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.h2,{id:"definition",children:"Definition"}),"\n",(0,i.jsxs)(a.A,{queryString:"primary",children:[(0,i.jsx)(s.A,{value:"definition",label:"Definition",children:(0,i.jsx)(e.p,{children:"The Travelling Salesman Problem (TSP) is a classic problem in computer science and operations research where the objective is to find the shortest possible route that visits a given set of cities and returns to the original city. It's an NP-hard problem, meaning there is no known polynomial-time solution for large inputs. However, there are several approaches and algorithms to approximate the solution"})}),(0,i.jsx)(s.A,{value:"how",label:"Explanation",children:(0,i.jsx)(e.p,{children:"Works by exhaustively evaluating all possible routes or by using heuristics to find an approximate solution. One common approach is the brute-force method, where all possible permutations of city visits are generated and the shortest route is selected. Another popular approach is the nearest neighbor algorithm, where the salesman starts at a random city and repeatedly visits the nearest unvisited city until all cities are visited"})}),(0,i.jsx)(s.A,{value:"guidance",label:"Guidance",children:(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["Start at any city","\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"choose the nearest unvisited city to the current city"}),"\n",(0,i.jsx)(e.li,{children:"add the selected city to the route"}),"\n",(0,i.jsx)(e.li,{children:"repeat steps until all cities are visited"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(e.li,{children:"Once all cities are visited, return to the starting city to complete the route"}),"\n"]})}),(0,i.jsx)(s.A,{value:"tips",label:"Tips",children:(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"implementing memoization techniques can significantly improve the performance of the brute-force approach by avoiding redundant calculations"}),"\n",(0,i.jsx)(e.li,{children:"using dynamic programming, particularly in cases where subproblems overlap, can help optimize the solution"}),"\n",(0,i.jsx)(e.li,{children:"experiment with different heuristics, such as the nearest insertion or farthest insertion algorithms, to find a good balance between accuracy and efficiency"}),"\n"]})})]}),"\n",(0,i.jsx)(e.h2,{id:"practice",children:"Practice"}),"\n",(0,i.jsxs)(a.A,{queryString:"primary",children:[(0,i.jsx)(s.A,{value:"practice",label:"Practice",children:(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:"tsp_brute_force(graph, current_city, visited_cities):\n  if all cities visited:\n    return distance from current_city to starting_city\n  else:\n    min_distance = INFINITY\n    for each city in graph:\n      if city not in visited_cities:\n        distance = tsp_brute_force(graph, city, visited_cities + [city])\n        min_distance = min(min_distance, distance + distance from current_city to city)\n    return min_distance\n"})})}),(0,i.jsx)(s.A,{value:"solution",label:"Solution",children:(0,i.jsxs)(a.A,{queryString:"code",children:[(0,i.jsx)(s.A,{value:"go",label:"",attributes:{title:"Go Lang",className:"code_lang go m"},children:(0,i.jsx)(c.A,{language:"go",children:l})}),(0,i.jsx)(s.A,{value:"java",label:"",attributes:{title:"Java",className:"code_lang java m"},children:(0,i.jsx)(c.A,{language:"java",children:o})}),(0,i.jsx)(s.A,{value:"js",label:"",attributes:{title:"JavaScript",className:"code_lang js m"},children:(0,i.jsx)(c.A,{language:"js",children:u})}),(0,i.jsx)(s.A,{value:"kotlin",label:"",attributes:{title:"Kotlin",className:"code_lang kotlin m"},children:(0,i.jsx)(c.A,{language:"kotlin",children:h})}),(0,i.jsx)(s.A,{value:"python",label:"",attributes:{title:"Python",className:"code_lang python m"},children:(0,i.jsx)(c.A,{language:"python",children:d})}),(0,i.jsx)(s.A,{value:"rust",label:"",attributes:{title:"Rust",className:"code_lang rust m"},children:(0,i.jsx)(c.A,{language:"rust",children:p})}),(0,i.jsx)(s.A,{value:"ts",label:"",attributes:{title:"TypeScript",className:"code_lang ts m"},children:(0,i.jsx)(c.A,{language:"ts",children:g})})]})})]})]})}function y(n={}){const{wrapper:e}={...(0,r.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(x,{...n})}):x(n)}}}]);