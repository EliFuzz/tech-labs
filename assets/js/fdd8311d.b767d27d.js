"use strict";(self.webpackChunkclassic=self.webpackChunkclassic||[]).push([[853],{38934:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>v,contentTitle:()=>p,default:()=>k,frontMatter:()=>x,metadata:()=>i,toc:()=>y});const i=JSON.parse('{"id":"education/computer-science/algorithms/algo/tower-of-hanoi","title":"Tower of Hanoi","description":"Tower of Hanoi","source":"@site/docs/education/01-computer-science/10-algorithms/04-algo/tower-of-hanoi.mdx","sourceDirName":"education/01-computer-science/10-algorithms/04-algo","slug":"/education/computer-science/algorithms/algo/tower-of-hanoi","permalink":"/tech-labs/docs/education/computer-science/algorithms/algo/tower-of-hanoi","draft":false,"unlisted":false,"editUrl":"https://github.com/EliFuzz/tech-labs/docs/education/01-computer-science/10-algorithms/04-algo/tower-of-hanoi.mdx","tags":[],"version":"current","frontMatter":{"title":"Tower of Hanoi","description":"Tower of Hanoi","hide_table_of_contents":true},"sidebar":"education","previous":{"title":"Topological Sorting","permalink":"/tech-labs/docs/education/computer-science/algorithms/algo/topological-sorting"},"next":{"title":"Travelling Salesman Problem","permalink":"/tech-labs/docs/education/computer-science/algorithms/algo/travelling-salesman-problem"}}');var t=o(86070),r=o(15658),a=o(33407),s=o(33903),l=o(68171);const c='package main\n\nfunc towerOfHanoi(n int, source, auxiliary, destination string) {\n    if n == 1 {\n        fmt.Println("Move disk 1 from", source, "to", destination)\n        return\n    }\n    towerOfHanoi(n-1, source, destination, auxiliary)\n    fmt.Println("Move disk", n, "from", source, "to", destination)\n    towerOfHanoi(n-1, auxiliary, source, destination)\n}\n',d='public class TowerOfHanoi {\n\n  public static void towerOfHanoi(int n, String source, String auxiliary, String destination) {\n    if (n == 1) {\n      System.out.println("Move disk 1 from " + source + " to " + destination);\n      return;\n    }\n    towerOfHanoi(n - 1, source, destination, auxiliary);\n    System.out.println("Move disk " + n + " from " + source + " to " + destination);\n    towerOfHanoi(n - 1, auxiliary, source, destination);\n  }\n}\n',u="function towerOfHanoi(n, source, auxiliary, destination) {\n  if (n === 1) {\n    console.log(`Move disk 1 from ${source} to ${destination}`);\n    return;\n  }\n  towerOfHanoi(n - 1, source, destination, auxiliary);\n  console.log(`Move disk ${n} from ${source} to ${destination}`);\n  towerOfHanoi(n - 1, auxiliary, source, destination);\n}\n",h='fun towerOfHanoi(n: Int, source: String, auxiliary: String, destination: String) {\n    if (n == 1) {\n        println("Move disk 1 from $source to $destination")\n        return\n    }\n    towerOfHanoi(n - 1, source, destination, auxiliary)\n    println("Move disk $n from $source to $destination")\n    towerOfHanoi(n - 1, auxiliary, source, destination)\n}\n',f='def tower_of_hanoi(n, source, auxiliary, destination):\n    if n == 1:\n        print(f"Move disk 1 from {source} to {destination}")\n        return\n    tower_of_hanoi(n - 1, source, destination, auxiliary)\n    print(f"Move disk {n} from {source} to {destination}")\n    tower_of_hanoi(n - 1, auxiliary, source, destination)\n',m='fn tower_of_hanoi(n: u32, source: char, auxiliary: char, destination: char) {\n    if n == 1 {\n        println!("Move disk 1 from {} to {}", source, destination);\n        return;\n    }\n    tower_of_hanoi(n - 1, source, destination, auxiliary);\n    println!("Move disk {} from {} to {}", n, source, destination);\n    tower_of_hanoi(n - 1, auxiliary, source, destination);\n}\n',g="function towerOfHanoi(\n  n: number,\n  source: string,\n  auxiliary: string,\n  destination: string,\n) {\n  if (n === 1) {\n    console.log(`Move disk 1 from ${source} to ${destination}`);\n    return;\n  }\n  towerOfHanoi(n - 1, source, destination, auxiliary);\n  console.log(`Move disk ${n} from ${source} to ${destination}`);\n  towerOfHanoi(n - 1, auxiliary, source, destination);\n}\n",x={title:"Tower of Hanoi",description:"Tower of Hanoi",hide_table_of_contents:!0},p=void 0,v={},y=[{value:"Definition",id:"definition",level:2},{value:"Practice",id:"practice",level:2}];function j(e){const n={code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"definition",children:"Definition"}),"\n",(0,t.jsxs)(a.A,{queryString:"primary",children:[(0,t.jsx)(s.A,{value:"definition",label:"Definition",children:(0,t.jsx)(n.p,{children:"The Tower of Hanoi is a classic recursive algorithm used to solve the problem of moving a stack of discs from one rod to another, following certain rules"})}),(0,t.jsx)(s.A,{value:"how",label:"Explanation",children:(0,t.jsx)(n.p,{children:"Recursively moving disks from one rod to another, adhering to three rules: (1) Only one disk can be moved at a time. (2) A disk can only be moved onto a rod if it's either empty or has a larger disk on top of it. (3) Each move must involve moving the top disk of one rod onto another rod. The algorithm follows a pattern where it moves n-1 disks from the source rod to the auxiliary rod, then moves the nth disk from the source rod to the destination rod, and finally moves the n-1 disks from the auxiliary rod to the destination rod, all recursively"})}),(0,t.jsx)(s.A,{value:"guidance",label:"Guidance",children:(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Start with all disks stacked on one rod, called the source rod"}),"\n",(0,t.jsx)(n.li,{children:"Identify the target rod where you want to move all the disks"}),"\n",(0,t.jsx)(n.li,{children:"Choose an auxiliary rod to assist in the movement"}),"\n",(0,t.jsx)(n.li,{children:"Move n-1 disks from the source rod to the auxiliary rod using the target rod as a helper"}),"\n",(0,t.jsx)(n.li,{children:"Move the nth disk from the source rod to the target rod"}),"\n",(0,t.jsx)(n.li,{children:"Move the n-1 disks from the auxiliary rod to the target rod using the source rod as a helper"}),"\n",(0,t.jsx)(n.li,{children:"Repeat the process recursively for the remaining disks until all disks are moved to the target rod"}),"\n"]})}),(0,t.jsx)(s.A,{value:"tips",label:"Tips",children:(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"keep track of the number of disks being moved at each step to ensure proper recursive function calls"}),"\n",(0,t.jsx)(n.li,{children:"ensure that the disks are moved in the correct order to maintain the rules of the Tower of Hanoi puzzle"}),"\n",(0,t.jsx)(n.li,{children:"use the recursive nature of the algorithm efficiently to minimize unnecessary movements"}),"\n"]})})]}),"\n",(0,t.jsx)(n.h2,{id:"practice",children:"Practice"}),"\n",(0,t.jsxs)(a.A,{queryString:"primary",children:[(0,t.jsx)(s.A,{value:"practice",label:"Practice",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'tower_of_hanoi(n, source, target, auxiliary):\n  if n == 1:\n    move_disk(source, target)\n  else:\n    tower_of_hanoi(n-1, source, auxiliary, target)\n    move_disk(source, target)\n    tower_of_hanoi(n-1, auxiliary, target, source)\n\nmove_disk(source, target):\n  print "Move disk from", source, "to", target\n'})})}),(0,t.jsx)(s.A,{value:"solution",label:"Solution",children:(0,t.jsxs)(a.A,{queryString:"code",children:[(0,t.jsx)(s.A,{value:"go",label:"",attributes:{title:"Go Lang",className:"code_lang go m"},children:(0,t.jsx)(l.A,{language:"go",children:c})}),(0,t.jsx)(s.A,{value:"java",label:"",attributes:{title:"Java",className:"code_lang java m"},children:(0,t.jsx)(l.A,{language:"java",children:d})}),(0,t.jsx)(s.A,{value:"js",label:"",attributes:{title:"JavaScript",className:"code_lang js m"},children:(0,t.jsx)(l.A,{language:"js",children:u})}),(0,t.jsx)(s.A,{value:"kotlin",label:"",attributes:{title:"Kotlin",className:"code_lang kotlin m"},children:(0,t.jsx)(l.A,{language:"kotlin",children:h})}),(0,t.jsx)(s.A,{value:"python",label:"",attributes:{title:"Python",className:"code_lang python m"},children:(0,t.jsx)(l.A,{language:"python",children:f})}),(0,t.jsx)(s.A,{value:"rust",label:"",attributes:{title:"Rust",className:"code_lang rust m"},children:(0,t.jsx)(l.A,{language:"rust",children:m})}),(0,t.jsx)(s.A,{value:"ts",label:"",attributes:{title:"TypeScript",className:"code_lang ts m"},children:(0,t.jsx)(l.A,{language:"ts",children:g})})]})})]})]})}function k(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(j,{...e})}):j(e)}}}]);