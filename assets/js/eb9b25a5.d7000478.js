"use strict";(self.webpackChunkclassic=self.webpackChunkclassic||[]).push([[1225],{72481:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>o,contentTitle:()=>c,default:()=>j,frontMatter:()=>l,metadata:()=>a,toc:()=>h});var i=n(11527),r=n(84135),t=n(40521),d=n(74109);const l={title:"Architecture Styles",description:"Architecture Styles Overview",hide_table_of_contents:!0},c=void 0,a={id:"education/software-development/architecture-styles",title:"Architecture Styles",description:"Architecture Styles Overview",source:"@site/docs/education/03-software-development/06-architecture-styles.mdx",sourceDirName:"education/03-software-development",slug:"/education/software-development/architecture-styles",permalink:"/tech-labs/docs/education/software-development/architecture-styles",draft:!1,unlisted:!1,editUrl:"https://github.com/EliFuzz/tech-labs/docs/education/03-software-development/06-architecture-styles.mdx",tags:[],version:"current",sidebarPosition:6,frontMatter:{title:"Architecture Styles",description:"Architecture Styles Overview",hide_table_of_contents:!0},sidebar:"education",previous:{title:"Regex",permalink:"/tech-labs/docs/education/software-development/regex"},next:{title:"Security",permalink:"/tech-labs/docs/education/software-development/security"}},o={},h=[{value:"Binlog Process",id:"binlog-process",level:2},{value:"Replication",id:"replication",level:2},{value:"Versioning",id:"versioning",level:2},{value:"Resource Naming Convention",id:"resource-naming-convention",level:2},{value:"Nouns vs Verbs",id:"nouns-vs-verbs",level:2},{value:"Singular vs Plural",id:"singular-vs-plural",level:2},{value:"REST Verbs",id:"rest-verbs",level:2},{value:"HTTP Status Codes",id:"http-status-codes",level:2},{value:"Proper Error Handling",id:"proper-error-handling",level:2},{value:"Response Entity",id:"response-entity",level:2},{value:"Data Filtering",id:"data-filtering",level:2},{value:"Utilize Resource Nesting Efficiency",id:"utilize-resource-nesting-efficiency",level:2},{value:"Security",id:"security",level:2},{value:"Async Logging",id:"async-logging",level:2},{value:"Caching",id:"caching",level:2},{value:"Payload Compression",id:"payload-compression",level:2},{value:"Connection Pool",id:"connection-pool",level:2},{value:"Request Body",id:"request-body",level:2}];function x(e){const s={code:"code",em:"em",h2:"h2",li:"li",mermaid:"mermaid",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.a)(),...e.components};return(0,i.jsxs)(t.Z,{queryString:"primary",children:[(0,i.jsx)(d.Z,{value:"overview",label:"Architecture Styles",children:(0,i.jsxs)("table",{children:[(0,i.jsx)("thead",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("th",{children:"Communication Style"}),(0,i.jsx)("th",{children:"Definition"}),(0,i.jsx)("th",{children:"Features"}),(0,i.jsx)("th",{children:"Use Cases"})]})}),(0,i.jsxs)("tbody",{children:[(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("b",{children:"Asynchronous"})}),(0,i.jsx)("td",{children:"Asynchronous communication is used to communicate between services without waiting for the response"}),(0,i.jsx)("td",{children:(0,i.jsxs)("ul",{children:[(0,i.jsx)("li",{children:"Non-blocking"}),(0,i.jsx)("li",{children:"Supports retries"}),(0,i.jsx)("li",{children:"Flexible scaling"}),(0,i.jsx)("li",{children:"Load leveling"}),(0,i.jsx)("li",{children:"Batch processing"})]})}),(0,i.jsx)("td",{children:(0,i.jsxs)("ul",{children:[(0,i.jsx)("li",{children:"Event-Driven Architectures"}),(0,i.jsx)("li",{children:"Background processing"}),(0,i.jsx)("li",{children:"Decoupled systems"})]})})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("b",{children:"Database"})}),(0,i.jsx)("td",{children:"Uses a shared database to communicate between services. Commonly uses CQRS and Event Sourcing techniques"}),(0,i.jsx)("td",{children:(0,i.jsxs)("ul",{children:[(0,i.jsx)("li",{children:"Eventual Consistency"}),(0,i.jsx)("li",{children:"ACID properties"}),(0,i.jsx)("li",{children:"Consistent state management"})]})}),(0,i.jsx)("td",{children:(0,i.jsxs)("ul",{children:[(0,i.jsx)("li",{children:"Data backup and recovery"}),(0,i.jsx)("li",{children:"Data synchronization"}),(0,i.jsx)("li",{children:"When you need a snapshot of data"})]})})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("b",{children:"File Transfer"})}),(0,i.jsx)("td",{children:"Services communicate by reading and writing files to a shared location"}),(0,i.jsx)("td",{children:(0,i.jsxs)("ul",{children:[(0,i.jsx)("li",{children:"Batch processing"}),(0,i.jsx)("li",{children:"Eventual Consistency"})]})}),(0,i.jsx)("td",{children:(0,i.jsxs)("ul",{children:[(0,i.jsx)("li",{children:"Batch processing"}),(0,i.jsx)("li",{children:"Data import/export"}),(0,i.jsx)("li",{children:"Integration with legacy systems"})]})})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("b",{children:"GraphQL"})}),(0,i.jsx)("td",{children:"Query language for APIs, allowing clients to request exactly what they need"}),(0,i.jsx)("td",{children:(0,i.jsxs)("ul",{children:[(0,i.jsx)("li",{children:"Flexible data retrieval"}),(0,i.jsx)("li",{children:"Schema-first development"}),(0,i.jsx)("li",{children:"Type safety"}),(0,i.jsx)("li",{children:"Reduces over/under-fetching of data"})]})}),(0,i.jsx)("td",{children:(0,i.jsx)("ul",{children:(0,i.jsx)("li",{children:"APIs with complex and dynamic data requirements"})})})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("b",{children:"gRPC"})}),(0,i.jsx)("td",{children:"gRPC (Google Remote Procedure Call) is a high-performance, language-agnostic remote procedure call (RPC) framework that enables efficient communication between distributed systems by utilizing Protocol Buffers for serialization and HTTP/2 for transport, ensuring low latency, bandwidth efficiency, and support for bi-directional streaming"}),(0,i.jsx)("td",{children:(0,i.jsxs)("ul",{children:[(0,i.jsx)("li",{children:"High performance"}),(0,i.jsx)("li",{children:"Bi-directional streaming"}),(0,i.jsx)("li",{children:"Protobuf"}),(0,i.jsx)("li",{children:"HTTP/2"}),(0,i.jsx)("li",{children:"Binary data transfer"})]})}),(0,i.jsx)("td",{children:(0,i.jsxs)("ul",{children:[(0,i.jsx)("li",{children:"Microservices"}),(0,i.jsx)("li",{children:"Point-to-point real-time communication"}),(0,i.jsx)("li",{children:"Command and action oriented APIs"}),(0,i.jsx)("li",{children:"High performance communication in massive microservice systems"})]})})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("b",{children:"P2P"})}),(0,i.jsx)("td",{children:"P2P (Peer-to-Peer) is a decentralized form of communication where each party has the same capabilities and either party can initiate a communication session. It enables direct communication and sharing of resources among multiple nodes in a network without the need for a central coordinating server"}),(0,i.jsx)("td",{children:(0,i.jsxs)("ul",{children:[(0,i.jsx)("li",{children:"Decentralized"}),(0,i.jsx)("li",{children:"Resource sharing"}),(0,i.jsx)("li",{children:"Direct communication"}),(0,i.jsx)("li",{children:"Dynamic network topology"}),(0,i.jsx)("li",{children:"Resilient and scalable"})]})}),(0,i.jsx)("td",{children:(0,i.jsxs)("ul",{children:[(0,i.jsx)("li",{children:"File sharing applications (Torrent)"}),(0,i.jsx)("li",{children:"Blockchain and cryptocurrencies"}),(0,i.jsx)("li",{children:"Distributed databases"}),(0,i.jsx)("li",{children:"Decentralized social networks"}),(0,i.jsx)("li",{children:"Collaborative software applications"}),(0,i.jsx)("li",{children:"Multiplayer online gaming"})]})})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("b",{children:"SOAP"})}),(0,i.jsx)("td",{children:"SOAP (Simple Object Access Protocol) is an XML-based communication protocol"}),(0,i.jsx)("td",{children:(0,i.jsx)("ul",{children:(0,i.jsx)("li",{children:"XML-based"})})}),(0,i.jsx)("td",{children:(0,i.jsxs)("ul",{children:[(0,i.jsx)("li",{children:"Enterprise applications"}),(0,i.jsx)("li",{children:"Payment gateways"}),(0,i.jsx)("li",{children:"identity management"}),(0,i.jsx)("li",{children:"CRM solutions"}),(0,i.jsx)("li",{children:"financial and telecommunication services"}),(0,i.jsx)("li",{children:"legacy system support"})]})})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("b",{children:"Stream"})}),(0,i.jsx)("td",{children:"Data transmission method where information is continuously and sequentially delivered in a steady flow, often in real-time, without distinct boundaries or breaks, facilitating persistent and ongoing data exchange between communicating entities"}),(0,i.jsx)("td",{children:(0,i.jsxs)("ul",{children:[(0,i.jsx)("li",{children:"Push-based"}),(0,i.jsx)("li",{children:"Pull-based"}),(0,i.jsx)("li",{children:"Reactive"}),(0,i.jsx)("li",{children:"Real-time data processing and insights"})]})}),(0,i.jsx)("td",{children:(0,i.jsxs)("ul",{children:[(0,i.jsx)("li",{children:"Real-time analytics"}),(0,i.jsx)("li",{children:"Live dashboard updates"}),(0,i.jsx)("li",{children:"Streaming applications"}),(0,i.jsx)("li",{children:"MMO games"}),(0,i.jsx)("li",{children:"Chat applications"})]})})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("b",{children:"Synchronous"})}),(0,i.jsx)("td",{children:"Data transmission between sender and receiver occurs in real-time, requiring both parties to be actively engaged simultaneously for message exchange, ensuring temporal alignment of communication events"}),(0,i.jsx)("td",{children:(0,i.jsxs)("ul",{children:[(0,i.jsx)("li",{children:"Blocking"}),(0,i.jsx)("li",{children:"Resource-based"}),(0,i.jsx)("li",{children:"HTTP methods"}),(0,i.jsx)("li",{children:"Supports request-response patterns"})]})}),(0,i.jsx)("td",{children:(0,i.jsxs)("ul",{children:[(0,i.jsx)("li",{children:"Operations where immediate response is required"}),(0,i.jsx)("li",{children:"Request/response APIs"}),(0,i.jsx)("li",{children:"Transactional systems"})]})})]})]})]})}),(0,i.jsx)(d.Z,{value:"async",label:"Async",children:(0,i.jsxs)(t.Z,{queryString:"secondary",children:[(0,i.jsx)(d.Z,{value:"protocol",label:"Messaging protocol",attributes:{className:"tabs__vertical"},children:(0,i.jsxs)("table",{children:[(0,i.jsx)("thead",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("th",{children:"Aspect"}),(0,i.jsx)("th",{children:"MQTT"}),(0,i.jsx)("th",{children:"AMQP"})]})}),(0,i.jsxs)("tbody",{children:[(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("b",{children:"Visualization"})}),(0,i.jsx)("td",{children:(0,i.jsx)(s.mermaid,{value:"graph LR\n\nsubgraph broker[AMPQ Broker]\n  direction LR\n\n  exchange(Exchange) --\x3e |route messages based on binding| queue1(Queue)\n  exchange(Exchange) --\x3e |route messages based on binding| queue2(Queue)\nend\n\npublisher(Publisher) --\x3e |publish message| exchange(Exchange)\nqueue1 --\x3e |publish| consumer1(Consumer)\nconsumer1 -.-> |subscribe| queue1(Queue)\n\nqueue2 --\x3e |publish| consumer2(Consumer)\nconsumer2 -.-> |subscribe| queue2(Queue)"})}),(0,i.jsx)("td",{children:(0,i.jsx)(s.mermaid,{value:"  graph LR\n\n  subgraph broker[MQTT Broker]\n      direction LR\n\n      topic(Topic)\n  end\n\n  publisher(Publisher) --\x3e |publish message| topic\n\n  topic --\x3e |publish| consumer1(Consumer)\n  topic --\x3e |publish| consumer2(Consumer)\n\n  consumer1 -.-> |subscribe| topic\n  consumer2 -.-> |subscribe| topic"})})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("b",{children:"Definition"})}),(0,i.jsx)("td",{children:"Provides simple message queuing services, which can be implemented mainly in the embedded systems"}),(0,i.jsx)("td",{children:"Offers a wealthier range of messaging circumstances, and it performs better when it comes to security protocols"})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("b",{children:"Background"})}),(0,i.jsx)("td",{children:"MQTT is majorly vendor-driven and was developed by IBM"}),(0,i.jsx)("td",{children:"JP Morgan developed AMQP for financial apps"})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("b",{children:"Architecture"})}),(0,i.jsx)("td",{children:"MQTT has client/broker architecture"}),(0,i.jsx)("td",{children:"AMQP has a client/broker and client/server architecture"})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("b",{children:"Design protocol"})}),(0,i.jsx)("td",{children:"It simplifies the process of encrypting messaging using TLS and authenticating clients using modern protocols such as OAuth"}),(0,i.jsx)("td",{children:"It is a TCP-based protocol that performs both publish/subscribe and request/response types of communication"})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("b",{children:"Framework optimization"})}),(0,i.jsx)("td",{children:"It is based on the wire framework, which uses a stream-like approach for lightweight memory devices"}),(0,i.jsx)("td",{children:"It is optimized on the wire of data framing, which has a buffering approach, boosting the server performance"})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("b",{children:"Messaging services"})}),(0,i.jsx)("td",{children:"MQTT is highly transient and is most engaged for active routing pud core unuse bors"}),(0,i.jsx)("td",{children:"AMQP enables all kinds of messaging, including bulk messaging, and executes metadata messages"})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("b",{children:"Transaction of messages"})}),(0,i.jsx)("td",{children:"It is known for supporting general acknowledgments relatively quickly"}),(0,i.jsx)("td",{children:"It supports various acknowledgments and transactions"})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("b",{children:"Data context"})}),(0,i.jsx)("td",{children:"MQTT has partial support for data cache and proxy"}),(0,i.jsx)("td",{children:"AMQP offers full support for data cache and proxy"})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("b",{children:"Proven security"})}),(0,i.jsx)("td",{children:"It does not act to any security issues in connection, although its security can be amped up using add-on services"}),(0,i.jsx)("td",{children:"AMQP eliminates the policy of TLS and SASL, increasing the performance of continuous updates swiftly"})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("b",{children:"Last value queues"})}),(0,i.jsx)("td",{children:"It offers to Retain command and Supports the last value in the queues smoothly"}),(0,i.jsx)("td",{children:"There is no provision or support for the last values in the queue, which can be a limitation"})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("b",{children:"Efficiency and scalability"})}),(0,i.jsx)("td",{children:"Since it is wire-efficient, it requires less effort to implement on a client than AMQP"}),(0,i.jsx)("td",{children:"It does not allow the creation of subscriptions in message streams; hence, it is unscalable"})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("b",{children:"Reliable messaging"})}),(0,i.jsx)("td",{children:"Its data delivery is highly reliable and on point"}),(0,i.jsx)("td",{children:"It enables only fire-and-forget policy. AMQP is not reliable"})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("b",{children:"Namespaces"})}),(0,i.jsx)("td",{children:'MQTT deploys "namespaces" for the transmission of messages in a hierarchy'}),(0,i.jsx)("td",{children:"AMQP allows multiple ways for finding messages, such as queues or nodes"})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("b",{children:"Additional attributes"})}),(0,i.jsx)("td",{children:"MQTT fulfills the basic requirements for the DNS server"}),(0,i.jsx)("td",{children:"It is asymmetric and does not support any advanced features"})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("b",{children:"Implementation"})}),(0,i.jsx)("td",{children:"It can be implemented in devices with less than 64kb of RAM"}),(0,i.jsx)("td",{children:"It is implemented in little elements of less than 64kb"})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("b",{children:"Extensibility"})}),(0,i.jsx)("td",{children:"MQTT has an entire fresh draft of the protocol and allows for much broader extensibility than other protocols"}),(0,i.jsx)("td",{children:"It has structural points allowing extensibility in a particular fashion and alteration in layers by isolation"})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("b",{children:"Pros"})}),(0,i.jsx)("td",{children:(0,i.jsxs)("ul",{children:[(0,i.jsx)("li",{children:"Is lightweight and battery-friendly"}),(0,i.jsx)("li",{children:"Offers 3 QoS levels to support reliable messaging"}),(0,i.jsx)("li",{children:"Works well over unreliable networks"}),(0,i.jsx)("li",{children:"Allows for security through TLS"}),(0,i.jsx)("li",{children:"Has many open-source libraries to ease development and implementation"}),(0,i.jsx)("li",{children:"Low bandwidth usage"})]})}),(0,i.jsx)("td",{children:(0,i.jsxs)("ul",{children:[(0,i.jsx)("li",{children:"Has built-in integrations for TSL and SASL for greater security"}),(0,i.jsx)("li",{children:"Supports many different messaging patterns"}),(0,i.jsx)("li",{children:"Offers 3 QoS levels for message deliverability and reliability"}),(0,i.jsx)("li",{children:"Can be extended very easily"}),(0,i.jsx)("li",{children:"Has many open-source libraries to make implementation easy"})]})})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("b",{children:"Cons"})}),(0,i.jsx)("td",{children:(0,i.jsxs)("ul",{children:[(0,i.jsx)("li",{children:"Only supports the publish-subscribe messaging pattern"}),(0,i.jsx)("li",{children:"Not as easily extensible"}),(0,i.jsx)("li",{children:"Less built-in security features"})]})}),(0,i.jsx)("td",{children:(0,i.jsxs)("ul",{children:[(0,i.jsx)("li",{children:"Requires higher bandwidthT"}),(0,i.jsx)("li",{children:"Has bigger messages, which means slower transmission speeds"})]})})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("b",{children:"Use Cases"})}),(0,i.jsx)("td",{children:(0,i.jsxs)("ul",{children:[(0,i.jsx)("li",{children:"Social apps messaging"}),(0,i.jsx)("li",{children:"Cloud communication protocol"})]})}),(0,i.jsx)("td",{children:"Widely used in critical systems in the financial, telecommunications, defense, manufacturing, internet, and cloud computing industries"})]})]})]})}),(0,i.jsx)(d.Z,{value:"qos",label:"Delivery Semantics",children:(0,i.jsxs)("table",{children:[(0,i.jsx)("thead",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("th",{children:"QoS (Quality of Service) Level"}),(0,i.jsx)("th",{children:"Definition"}),(0,i.jsx)("th",{children:"Message Delivery"}),(0,i.jsx)("th",{children:"Pace"}),(0,i.jsx)("th",{children:"Dependability"})]})}),(0,i.jsxs)("tbody",{children:[(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("b",{children:"0 (at least once)"})}),(0,i.jsx)("td",{children:"Each message will be delivered once or possibly not at all. This method prioritizes speed but compromises on reliability"}),(0,i.jsx)("td",{children:"Single Delivery"}),(0,i.jsx)("td",{children:"Swift"}),(0,i.jsx)("td",{children:"Low"})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("b",{children:"1 (at most once)"})}),(0,i.jsx)("td",{children:"Ensures the delivery of the message but also allows the possibility of duplicates"}),(0,i.jsx)("td",{children:"Guaranteed Delivery"}),(0,i.jsx)("td",{children:"Fair"}),(0,i.jsx)("td",{children:"High"})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("b",{children:"2 (exactly once)"})}),(0,i.jsx)("td",{children:"Promises a single delivery of the message. While the most reliable, it is the least speedy"}),(0,i.jsx)("td",{children:"Unambiguous Delivery"}),(0,i.jsx)("td",{children:"Slow"}),(0,i.jsx)("td",{children:"Supreme"})]})]})]})}),(0,i.jsx)(d.Z,{value:"patterns",label:"Service Integration Patterns",children:(0,i.jsxs)("table",{children:[(0,i.jsx)("thead",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("th",{children:"Pattern"}),(0,i.jsx)("th",{children:"Description"}),(0,i.jsx)("th",{children:"Use Cases"}),(0,i.jsx)("th",{children:"Implementation"}),(0,i.jsx)("th",{children:"Examples"})]})}),(0,i.jsxs)("tbody",{children:[(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("b",{children:"Request-Reply"})}),(0,i.jsx)("td",{children:"Client sends a request to a service, which processes the request and sends a response back to the client"}),(0,i.jsx)("td",{children:"Synchronous interactions where the client expects a response within a predefined time frame"}),(0,i.jsx)("td",{children:"Use protocols like HTTP, gRPC, or AMQP for request-response communication. Ensure error handling and timeout mechanisms are in place to handle failures gracefully"}),(0,i.jsx)("td",{children:"HTTP RESTful APIs and RPC calls"})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("b",{children:"Publish-Subscribe (Pub-Sub)"})}),(0,i.jsx)("td",{children:"Publishers broadcast messages (events) to one or more subscribers without knowledge of the subscribers' identities"}),(0,i.jsx)("td",{children:"Asynchronous event-driven architectures where services need to react to state changes or events"}),(0,i.jsx)("td",{children:"Utilize message brokers like Apache Kafka, RabbitMQ, or AWS SNS/SQS. Define topics for different event types and allow subscribers to consume messages asynchronously"}),(0,i.jsx)("td",{children:"User registrations, order placements, and system notifications"})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("b",{children:"Message Broker"})}),(0,i.jsx)("td",{children:"Services communicate indirectly through a message broker, which acts as an intermediary responsible for message routing and delivery"}),(0,i.jsx)("td",{children:"Decoupling of producers and consumers, enabling asynchronous communication and load balancing"}),(0,i.jsx)("td",{children:"Choose a suitable message broker (e.g., RabbitMQ, Kafka) and define message queues for point-to-point communication or topics for pub-sub scenarios"}),(0,i.jsx)("td",{children:"Task queues, job processing, and distributed logging"})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("b",{children:"Event Sourcing"})}),(0,i.jsx)("td",{children:"Services maintain a sequential record of state-changing events, which serve as the primary source of truth for data"}),(0,i.jsx)("td",{children:"Tracking and auditing changes to data, ensuring consistency and traceability across distributed systems"}),(0,i.jsx)("td",{children:"Implement event sourcing patterns using databases optimized for write-heavy workloads (e.g., Apache Kafka, Apache Pulsar) or dedicated event sourcing frameworks"}),(0,i.jsx)("td",{children:"Financial transactions, inventory management, and audit logs"})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("b",{children:"Command Query Responsibility Segregation (CQRS)"})}),(0,i.jsx)("td",{children:"Separates the responsibility for handling read and write operations into separate components, optimizing performance and scalability"}),(0,i.jsx)("td",{children:"Applications with varying read and write loads, where optimizing data retrieval and modification operations is critical"}),(0,i.jsx)("td",{children:"Maintain separate data models for reads and writes, with dedicated services handling each aspect. Utilize event sourcing and eventual consistency to synchronize data between read and write stores"}),(0,i.jsx)("td",{children:"E-commerce platforms, social media feeds, and analytics systems"})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("b",{children:"Saga Pattern"})}),(0,i.jsx)("td",{children:"Manages distributed transactions across multiple services by orchestrating a sequence of compensating actions to maintain consistency"}),(0,i.jsx)("td",{children:"Long-running business transactions spanning multiple services, where traditional ACID transactions are not feasible"}),(0,i.jsx)("td",{children:"Implement sagas using choreography or orchestration-based approaches. Utilize compensating transactions to rollback changes in case of failures and ensure eventual consistency"}),(0,i.jsx)("td",{children:"Order processing, payment processing, and booking systems"})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("b",{children:"Data Replication"})}),(0,i.jsx)("td",{children:"Copies data from one service to another to ensure availability, performance, and fault tolerance"}),(0,i.jsx)("td",{children:"Replicating data across multiple services or data centers to improve read/write performance, reduce latency, and enhance fault tolerance"}),(0,i.jsx)("td",{children:"Use techniques like master-slave replication, multi-master replication, or distributed caching to replicate data across services. Ensure consistency and synchronization mechanisms are in place to handle updates and conflicts"}),(0,i.jsx)("td",{children:"Caching, database replication, and distributed data stores"})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("b",{children:"Gateway and Proxy"})}),(0,i.jsx)("td",{children:"Provides a single entry point for clients to access multiple services, abstracting the complexities of the underlying microservices architecture"}),(0,i.jsx)("td",{children:"Simplifying client interactions, enforcing security policies, and aggregating data from multiple services"}),(0,i.jsx)("td",{children:"Deploy gateways/proxies as separate services or as part of a service mesh infrastructure. Implement routing, load balancing, and security features to manage client requests effectively"}),(0,i.jsx)("td",{children:"API gateways, reverse proxies, and edge computing platforms"})]})]})]})})]})}),(0,i.jsx)(d.Z,{value:"db",label:"Database",children:(0,i.jsxs)(t.Z,{queryString:"secondary",children:[(0,i.jsx)(d.Z,{value:"poll",label:"Polling",attributes:{className:"tabs__vertical"},children:(0,i.jsx)(s.mermaid,{value:"  graph TB\n\n  write(Write Microservice) -----\x3e |message with status NEW| db[(Database)]\n\n  job(Read Jobs) --\x3e |read/poll message| db\n  job -.-> |message status PROCESSING| db\n\n  subgraph brokers [Message Brokers]\n      direction LR\n\n      broker([Broker])\n  end\n\n  job --\x3e |publish message| broker\n\n  broker --\x3e |publish| ms(Processing Microservice)\n  ms -.-> |subscribe| broker\n\n  ms -.-> |message status PROCESSED| db"})}),(0,i.jsxs)(d.Z,{value:"binary",label:"Binary Logs",children:[(0,i.jsx)(s.h2,{id:"binlog-process",children:"Binlog Process"}),(0,i.jsx)(s.mermaid,{value:"    graph LR\n\n    transaction(Transaction is committed) --\x3e |update| binlog(binlog Cache)\n    binlog --\x3e |commit| pageCache(Page Cache)\n    pageCache --\x3e |flush| fsync(fsync to binlog file)"}),(0,i.jsx)(s.h2,{id:"replication",children:"Replication"}),(0,i.jsx)(s.mermaid,{value:"    graph RL\n        source(Source/Master instance) --\x3e |1. execute transaction| sourceDb[(Database)]\n        source --\x3e |2. write event| binarylog(Binary Log)\n        replica(Replica/Slave instance) --\x3e |3. run binlog dump with IO thread| source\n        replica --\x3e |4. IO thread writes the events it downloaded| relay(Relay Log)\n        replica --\x3e |5. SQL thread reads| relay\n        replica --\x3e |6. SQL thread executes events| replicaDb[(Database)]"})]})]})}),(0,i.jsx)(d.Z,{value:"ftp",label:"File Transfer",children:(0,i.jsxs)(t.Z,{queryString:"secondary",children:[(0,i.jsx)(d.Z,{value:"ftp",label:"FTP",attributes:{className:"tabs__vertical"},children:(0,i.jsx)(s.mermaid,{value:"  graph TB\n\n  ftpClient(FTP Client) --\x3e |send file| ftpServer(FTP Server)\n  job(Read Jobs) -.-> |read/poll message| ftpServer\n  job --\x3e |send message| broker([Message Broker])\n  service(Microservice) -.-> |subscribe| broker\n  broker --\x3e |publish| service"})}),(0,i.jsx)(d.Z,{value:"file",label:"File Storage",children:(0,i.jsx)(s.mermaid,{value:"  graph TB\n\n  client( Client) --\x3e |send file| storage[(Blob Storage)]\n  job(Read Jobs) -.-> |read/poll message| storage\n  job --\x3e |send message| broker([Message Broker])\n  service(Microservice) -.-> |subscribe| broker\n  broker --\x3e |publish| service"})})]})}),(0,i.jsx)(d.Z,{value:"graphql",label:"GraphQL",children:(0,i.jsxs)("table",{children:[(0,i.jsx)("thead",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("th",{children:"Aspect"}),(0,i.jsx)("th",{children:"REST"}),(0,i.jsx)("th",{children:"GraphQL"})]})}),(0,i.jsxs)("tbody",{children:[(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("b",{children:"Visualization"})}),(0,i.jsx)("td",{children:(0,i.jsx)(s.mermaid,{value:"  graph TB\n\n  client(Client) --\x3e |REST call| product(Product)\n  client --\x3e |REST call| review(Review)\n  client --\x3e |REST call| inventory(Inventory)"})}),(0,i.jsx)("td",{children:(0,i.jsx)(s.mermaid,{value:"  graph TB\n\n  client(Client) --\x3e |REST call| graphql(GraphQL)\n\n  graphql --\x3e |request data| product(Product)\n  graphql --\x3e |request data| review(Review)\n  graphql --\x3e |request data| inventory(Inventory)"})})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("b",{children:"Design Philosophy"})}),(0,i.jsx)("td",{children:"Based on standard HTTP methods (GET, POST, PUT, DELETE for CRUD operations) and status codes"}),(0,i.jsx)("td",{children:"A query language for APIs, not tied to HTTP. Provides single endpoint for clients to query for precisely the data they need"})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("b",{children:"Data Fetching"})}),(0,i.jsx)("td",{children:"Multiple requests might be required to gather all necessary data"}),(0,i.jsx)("td",{children:"Allows fetching all necessary data in a single request"})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("b",{children:"Over-fetching/Under-fetching"})}),(0,i.jsx)("td",{children:"Possible, as server defines what data is returned for each endpoint"}),(0,i.jsx)("td",{children:"No over- or under-fetching, as client defines exactly what data it needs"})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("b",{children:"Efficiency"})}),(0,i.jsx)("td",{children:"Less efficient due to over-fetching and under-fetching"}),(0,i.jsx)("td",{children:"More efficient due to minimized data transfer"})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("b",{children:"Versioning"})}),(0,i.jsx)("td",{children:"Requires versioning as changing the structure can lead to breaking changes"}),(0,i.jsx)("td",{children:"No versioning needed, as old fields can be deprecated and new ones added"})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("b",{children:"Error Handling"})}),(0,i.jsx)("td",{children:"Uses HTTP status codes"}),(0,i.jsx)("td",{children:"Provides error messages in the response, not tied to HTTP status codes"})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("b",{children:"Real-time Updates"})}),(0,i.jsx)("td",{children:"Requires additional technologies like WebSockets"}),(0,i.jsx)("td",{children:"Supports subscriptions which allows real-time updates"})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("b",{children:"Flexibility"})}),(0,i.jsx)("td",{children:"Less flexible as server defines what data is sent for each endpoint"}),(0,i.jsx)("td",{children:"API-First approach: More flexible as client specifies exactly what data it needs"})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("b",{children:"Caching"})}),(0,i.jsx)("td",{children:"Caching is straightforward with HTTP caching mechanisms"}),(0,i.jsx)("td",{children:"Requires more effort to implement as it doesn't leverage HTTP caching mechanisms"})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("b",{children:"Use Case"})}),(0,i.jsx)("td",{children:"Ideal for simple, CRUD-based projects and public APIs due to its simplicity and scalability"}),(0,i.jsx)("td",{children:"Best for complex systems, real-time data, microservices, and when precise control over data fetching is required and when following API-First approach"})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("b",{children:"Typing"})}),(0,i.jsx)("td",{children:"No built-in type system"}),(0,i.jsx)("td",{children:"Has a strong type system, which helps with validation and autocompletion tools"})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("b",{children:"API Introspection"})}),(0,i.jsx)("td",{children:"Not supported"}),(0,i.jsx)("td",{children:"Supported, which allows clients to understand what data is available"})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("b",{children:"Optimized for"})}),(0,i.jsx)("td",{children:"Optimized for servers"}),(0,i.jsx)("td",{children:"Optimized for clients"})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("b",{children:"Scalability"})}),(0,i.jsx)("td",{children:"Might suffer performance issues due to over-fetching and multiple round trips"}),(0,i.jsx)("td",{children:"Better performance due to minimized data transfer and single round trip. For Enterprise applications Federated schemas and Apollo Router can be used"})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("b",{children:"Debugging"})}),(0,i.jsx)("td",{children:"Can be difficult due to the lack of specific error messages"}),(0,i.jsx)("td",{children:"Easier due to detailed error messages and API introspection"})]})]})]})}),(0,i.jsx)(d.Z,{value:"gRPC",label:"gRPC",children:(0,i.jsxs)(t.Z,{queryString:"secondary",children:[(0,i.jsx)(d.Z,{value:"flow",label:"gRPC Flow",attributes:{className:"tabs__vertical"},children:(0,i.jsx)(s.mermaid,{value:"  graph LR\n\n  subgraph order [Order Service]\n    direction TB\n\n    clientApp(Client Application) --\x3e |2. rpc call| clientEncode(Encoding/Decoding)\n    clientEncode --\x3e |3. client stub| clientRuntime(gRPC Runtime)\n    clientRuntime --\x3e |4. send| clientTransport(Transport)\n\n    clientTransport --\x3e |12. receive| clientRuntime\n    clientRuntime --\x3e |13. decode| clientEncode\n    clientEncode --\x3e |14. result| clientApp\n  end\n\n  subgraph payment [Payment Service]\n    direction TB\n\n    serverTransport(Transport) --\x3e |6. receive| serverRuntime(gRPC Runtime)\n    serverRuntime --\x3e |7. decode stub| serverEncode(Encoding/Decoding)\n    serverEncode --\x3e |8. local call| serverApp(Server Application)\n\n    serverApp --\x3e |9. return| serverEncode\n    serverEncode --\x3e |10. encode stub| serverRuntime\n    serverRuntime --\x3e |11. send| serverTransport\n  end\n\n  client(Client) <----\x3e |1. REST call| clientApp\n\n  clientTransport <----\x3e |5. HTTP/2| serverTransport"})}),(0,i.jsx)(d.Z,{value:"types",label:"Types",children:(0,i.jsxs)("table",{children:[(0,i.jsx)("thead",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("th",{children:"Aspect"}),(0,i.jsx)("th",{children:"Unary"}),(0,i.jsx)("th",{children:"Server Streaming"}),(0,i.jsx)("th",{children:"Client Streaming"}),(0,i.jsx)("th",{children:"Bi-Directional Streaming"})]})}),(0,i.jsxs)("tbody",{children:[(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("b",{children:"Visualization"})}),(0,i.jsx)("td",{children:(0,i.jsx)(s.mermaid,{value:"  graph TB\n\n  client(Client) --\x3e |request| server(Server)\n  server --\x3e |response| client"})}),(0,i.jsx)("td",{children:(0,i.jsx)(s.mermaid,{value:"  graph TB\n\n  client(Client) --\x3e |request| server(Server)\n\n  subgraph messages\n    direction LR\n\n    message1(( ))\n    message2(( ))\n    message3(( ))\n\n    message1 -.-> message2\n    message2 -.-> message3\n  end\n\n  server -.....-> |response| message1\n  message3 -.-> |stream messages| client"})}),(0,i.jsx)("td",{children:(0,i.jsx)(s.mermaid,{value:"  graph BT\n\n  client(Client) -.-> |request| message1\n\n  subgraph messages\n    direction LR\n\n    message1(( ))\n    message2(( ))\n    message3(( ))\n\n    message1 -.-> message2\n    message2 -.-> message3\n  end\n\n  message3 -.-> |stream messages| server(Server)\n\n  server --\x3e |response| client"})}),(0,i.jsx)("td",{children:(0,i.jsx)(s.mermaid,{value:"  graph TB\n\n  subgraph clientMessages [Messages]\n    direction LR\n\n    message1(( ))\n    message2(( ))\n    message3(( ))\n\n    message1 -.-> message2\n    message2 -.-> message3\n  end\n\n  subgraph serverMessages [Messages]\n    direction LR\n\n    message4(( ))\n    message5(( ))\n    message6(( ))\n\n    message4 -.-> message5\n    message5 -.-> message6\n  end\n\n  client(Client) -.-> |request| message1\n\n  message3 -.-> |stream messages| server(Server)\n\n  server -.-> |response| message4\n\n  message6 -.-> |stream messages| client"})})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("b",{children:"Definition"})}),(0,i.jsx)("td",{children:"Client sends request, server sends back response"}),(0,i.jsx)("td",{children:"Client sends request, server responds with a stream to read multiple messages"}),(0,i.jsx)("td",{children:"Client sends multiple messages via stream, waits for server response"}),(0,i.jsx)("td",{children:"Both sides send and receive messages independently via streams"})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("b",{children:"Data Flow"})}),(0,i.jsx)("td",{children:"Single request - single response"}),(0,i.jsx)("td",{children:"Single request - multiple responses"}),(0,i.jsx)("td",{children:"Multiple requests - single response"}),(0,i.jsx)("td",{children:"Multiple requests - multiple responses"})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("b",{children:"Latency"})}),(0,i.jsx)("td",{children:"High, due to round-trip time"}),(0,i.jsx)("td",{children:"Lower due to continuous stream from server"}),(0,i.jsx)("td",{children:"Lower due to continuous stream from client"}),(0,i.jsx)("td",{children:"Lowest, due to continuous bi-directional communication"})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("b",{children:"Resource Usage"})}),(0,i.jsx)("td",{children:"Low, only one request and one response"}),(0,i.jsx)("td",{children:"Higher, due to the stream of responses"}),(0,i.jsx)("td",{children:"Higher, due to the stream of requests"}),(0,i.jsx)("td",{children:"Highest, due to the continuous bi-directional communication"})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("b",{children:"Real-time Data Handling"})}),(0,i.jsx)("td",{children:"Not suitable, due to high latency"}),(0,i.jsx)("td",{children:"Server can continuously send updates"}),(0,i.jsx)("td",{children:"Client can continuously send updates"}),(0,i.jsx)("td",{children:"Both client and server can continuously send updates"})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("b",{children:"Use Cases"})}),(0,i.jsx)("td",{children:(0,i.jsx)("ul",{children:(0,i.jsx)("li",{children:"Request/Response pattern"})})}),(0,i.jsx)("td",{children:(0,i.jsxs)("ul",{children:[(0,i.jsx)("li",{children:"Live audio/video streaming"}),(0,i.jsx)("li",{children:"Send large datasets"}),(0,i.jsx)("li",{children:"Download files"})]})}),(0,i.jsx)("td",{children:(0,i.jsxs)("ul",{children:[(0,i.jsx)("li",{children:"Upload files"}),(0,i.jsx)("li",{children:"Sending client-side streaming data"})]})}),(0,i.jsx)("td",{children:(0,i.jsxs)("ul",{children:[(0,i.jsx)("li",{children:"Chat applications"}),(0,i.jsx)("li",{children:"Real-time gaming"})]})})]})]})]})}),(0,i.jsx)(d.Z,{value:"rpc",label:"RPC vs RESTful",children:(0,i.jsxs)("table",{children:[(0,i.jsx)("thead",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("th",{children:"Aspect"}),(0,i.jsx)("th",{children:"RPC"}),(0,i.jsx)("th",{children:"RESTful"})]})}),(0,i.jsxs)("tbody",{children:[(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("b",{children:"Message type"})}),(0,i.jsx)("td",{children:"Resource"}),(0,i.jsx)("td",{children:"Binary"})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("b",{children:"Coupling"})}),(0,i.jsx)("td",{children:"Strong"}),(0,i.jsx)("td",{children:"Weak"})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("b",{children:"Data format"})}),(0,i.jsx)("td",{children:"binary, thrift, protobuf, avro"}),(0,i.jsx)("td",{children:"text, xml, json, csv"})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("b",{children:"Communication protocol"})}),(0,i.jsx)("td",{children:"TCP"}),(0,i.jsx)("td",{children:"HTTP/1.1, HTTP/2"})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("b",{children:"Performance"})}),(0,i.jsx)("td",{children:"High"}),(0,i.jsx)("td",{children:"Lower"})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("b",{children:"IDL (Interface Definition Language)"})}),(0,i.jsx)("td",{children:"Thrift, protobuf"}),(0,i.jsx)("td",{children:"Swagger"})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("b",{children:"Client code generation"})}),(0,i.jsx)("td",{children:"Auto-generated stub"}),(0,i.jsx)("td",{children:"Auto-generated stub"})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("b",{children:"Developer experience"})}),(0,i.jsx)("td",{children:"Not human readable and hard to debug"}),(0,i.jsx)("td",{children:"Human readable and easy to debug"})]})]})]})}),(0,i.jsx)(d.Z,{value:"trpc",label:"gRPC vs tRPC",children:(0,i.jsxs)("table",{children:[(0,i.jsx)("thead",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("th",{children:"Comparison Criteria"}),(0,i.jsx)("th",{children:"gRPC (Google RPC)"}),(0,i.jsx)("th",{children:"tRPC (TypeScript RPC)"})]})}),(0,i.jsxs)("tbody",{children:[(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("b",{children:"Language Support"})}),(0,i.jsx)("td",{children:"Supports a wide range of programming languages including C++, Python, Ruby, and C#"}),(0,i.jsx)("td",{children:"Primarily supports TypeScript and JavaScript, other languages are not supported"})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("b",{children:"Protocol"})}),(0,i.jsx)("td",{children:"Uses HTTP/2 as a default transport protocol"}),(0,i.jsx)("td",{children:"Uses HTTP/1.1, HTTP/2, and HTTP/3 protocols"})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("b",{children:"Data Format"})}),(0,i.jsx)("td",{children:"Uses Protocol Buffers as the interface definition language"}),(0,i.jsx)("td",{children:"Uses JSON as the data format"})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("b",{children:"Streaming Support"})}),(0,i.jsx)("td",{children:"Supports bi-directional streaming and flow control"}),(0,i.jsx)("td",{children:"tRPC doesn't support streaming natively but can be used with streaming libraries"})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("b",{children:"Client-Server Communication"})}),(0,i.jsx)("td",{children:"Uses a contract-first approach to client-server communication"}),(0,i.jsx)("td",{children:"Uses a code-first approach to client-server communication"})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("b",{children:"API Contract"})}),(0,i.jsx)("td",{children:"Interface definition language (IDL) is required for defining the API contract"}),(0,i.jsx)("td",{children:"Type safety is provided by the TypeScript compiler, and doesn't require a separate IDL"})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("b",{children:"Error Handling"})}),(0,i.jsx)("td",{children:"Provides a rich model for handling various types of errors"}),(0,i.jsx)("td",{children:"Has a simpler mechanism for handling errors"})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("b",{children:"Performance"})}),(0,i.jsx)("td",{children:"High performance due to binary data format and HTTP/2 protocol"}),(0,i.jsx)("td",{children:"Performance is good but not as high as gRPC due to JSON and HTTP/1.1 usage"})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("b",{children:"Use Cases"})}),(0,i.jsx)("td",{children:"Suitable for microservices, real-time systems, and point-to-point services"}),(0,i.jsx)("td",{children:"Suitable for building APIs in TypeScript or JavaScript"})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("b",{children:"Server Push"})}),(0,i.jsx)("td",{children:"Supports server push via HTTP/2"}),(0,i.jsx)("td",{children:"Server push is not supported natively"})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("b",{children:"Interoperability"})}),(0,i.jsx)("td",{children:"Can interoperate with other gRPC services out of the box"}),(0,i.jsx)("td",{children:"Interoperability is limited to TypeScript and JavaScript"})]})]})]})})]})}),(0,i.jsx)(d.Z,{value:"p2p",label:"P2P",children:(0,i.jsxs)(t.Z,{children:[(0,i.jsxs)(d.Z,{value:"overview",label:"Overview",attributes:{className:"tabs__vertical"},children:[(0,i.jsx)(s.p,{children:'Peer-to-peer (P2P) is a decentralized network model where nodes, or "peers", connect directly to each other instead of via a central server. Each peer shares resources like processing power or storage, enabling efficient and flexible data distribution'}),(0,i.jsx)(s.mermaid,{value:"    graph LR\n\n    subgraph orders [Orders]\n        direction LR\n\n        order1(Order Service)\n        order2(Order Service)\n        order3(Order Service)\n    end\n\n    subgraph payments [Payments]\n        direction LR\n\n        payment1(Payment Service)\n        payment2(Payment Service)\n        payment3(Payment Service)\n    end\n\n    order1 --\x3e payment1\n    order1 --\x3e payment2\n    order1 --\x3e payment3\n\n    order2 --\x3e payment1\n    order2 --\x3e payment2\n    order2 --\x3e payment3\n\n    order3 --\x3e payment1\n    order3 --\x3e payment2\n    order3 --\x3e payment3"})]}),(0,i.jsx)(d.Z,{value:"types",label:"Network Types",children:(0,i.jsxs)("table",{children:[(0,i.jsx)("thead",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("th",{children:"Aspect"}),(0,i.jsx)("th",{children:"Unstructured P2P"}),(0,i.jsx)("th",{children:"Structured P2P"}),(0,i.jsx)("th",{children:"Hybrid P2P"})]})}),(0,i.jsxs)("tbody",{children:[(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("b",{children:"Topology"})}),(0,i.jsx)("td",{children:"Random, decentralized"}),(0,i.jsx)("td",{children:"Overlay network, usually structured based on distributed hash tables (DHTs)"}),(0,i.jsx)("td",{children:"Combination of decentralized and structured elements"})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("b",{children:"Routing"})}),(0,i.jsx)("td",{children:"Flooding, random walk"}),(0,i.jsx)("td",{children:"DHT-based (Chord, Kademlia, etc.)"}),(0,i.jsx)("td",{children:"Combination of flooding and DHT-based routing"})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("b",{children:"Scalability"})}),(0,i.jsx)("td",{children:"Limited by flooding, can suffer from congestion and inefficiency as network size grows"}),(0,i.jsx)("td",{children:"Highly scalable due to structured routing, can handle large-scale networks efficiently"}),(0,i.jsx)("td",{children:"Offers good scalability by combining the benefits of both structured and unstructured approaches"})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("b",{children:"Search Efficiency"})}),(0,i.jsx)("td",{children:"Low, as searches may need to traverse the entire network"}),(0,i.jsx)("td",{children:"High, logarithmic time complexity for routing queries"}),(0,i.jsx)("td",{children:"Moderate, depends on the implementation"})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("b",{children:"Fault Tolerance"})}),(0,i.jsx)("td",{children:"Limited, as nodes may join/leave without coordination, leading to data loss or inconsistency"}),(0,i.jsx)("td",{children:"High, redundancy and structured routing ensure resilience against node failures"}),(0,i.jsx)("td",{children:"Moderately high, benefits from both decentralized nature and structured redundancy"})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("b",{children:"Data Locality"})}),(0,i.jsx)("td",{children:"Low, data may be stored on any node, leading to increased latency for retrieval"}),(0,i.jsx)("td",{children:"Moderate, structured routing enables efficient data localization"}),(0,i.jsx)("td",{children:"Moderate, depends on the implementation"})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("b",{children:"Resource Consumption"})}),(0,i.jsx)("td",{children:"High, due to flooding and lack of optimization in routing"}),(0,i.jsx)("td",{children:"Moderate, structured routing reduces resource consumption compared to unstructured P2P"}),(0,i.jsx)("td",{children:"Moderate, depends on the balance between structured and unstructured elements"})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("b",{children:"Security"})}),(0,i.jsx)("td",{children:"Low, vulnerable to sybil attacks, as nodes can easily join without verification"}),(0,i.jsx)("td",{children:"Moderate to high, DHT-based authentication and routing protocols enhance security"}),(0,i.jsx)("td",{children:"Moderate, depends on the implementation and integration of security measures"})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("b",{children:"Examples"})}),(0,i.jsx)("td",{children:"BitTorrent"}),(0,i.jsx)("td",{children:"Chord, Kademlia"}),(0,i.jsx)("td",{children:"Blockchain networks"})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("b",{children:"Use Cases"})}),(0,i.jsx)("td",{children:"File sharing, ad hoc communication"}),(0,i.jsx)("td",{children:"Distributed storage, content delivery networks"}),(0,i.jsx)("td",{children:"Decentralized finance, decentralized applications"})]})]})]})})]})}),(0,i.jsx)(d.Z,{value:"stream",label:"Stream",children:(0,i.jsxs)("table",{children:[(0,i.jsx)("thead",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("th",{children:"Aspect"}),(0,i.jsx)("th",{children:"Short Polling"}),(0,i.jsx)("th",{children:"Long Polling"}),(0,i.jsx)("th",{children:"Webhook"}),(0,i.jsx)("th",{children:"WebSockets"}),(0,i.jsx)("th",{children:"Server-Sent Events (SSE)"})]})}),(0,i.jsxs)("tbody",{children:[(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("b",{children:"Visualization"})}),(0,i.jsx)("td",{children:(0,i.jsx)(s.mermaid,{value:"  sequenceDiagram\n\n  participant Client\n  participant Server\n\n  Client->>Server: Request\n  Server--\x3e>Client: No new data\n\n  loop Check for updates\n      Client->>Server: Poll for updates\n      Server--\x3e>Client: New data (if available)\n      Note over Client,Server: Delay between requests (client-side)\n  end"})}),(0,i.jsx)("td",{children:(0,i.jsx)(s.mermaid,{value:"  sequenceDiagram\n\n  participant Client\n  participant Server\n\n  Client->>Server: Request\n  activate Server\n  Server--\x3e>Client: No new data\n  deactivate Server\n\n  loop Check for updates\n      Client->>Server: Long poll for updates\n      activate Server\n      Server--\x3e>Client: New data (if available)\n      deactivate Server\n      Note over Client,Server: Connection kept open (server-side)\n  end"})}),(0,i.jsx)("td",{children:(0,i.jsx)(s.mermaid,{value:"    sequenceDiagram\n\n    participant User\n    participant App\n    participant Server\n    participant Webhook\n\n    User->>App: Performs an action\n    App->>Server: Sends data about the action\n    Note right of Server: Processes data and decides\n    Server->>Webhook: Triggers the Webhook\n    Webhook->>App: Sends data (POST request)\n    App->>User: Updates based on Webhook data"})}),(0,i.jsx)("td",{children:(0,i.jsx)(s.mermaid,{value:"  sequenceDiagram\n\n  participant Client\n  participant Server\n\n  Client->>Server: Establish connection\n  Server--\x3e>Client: Connection Accepted (101 Switching Protocols)\n\n  loop events\n    Client->>Server: Send Message\n    Server--\x3e>Client: Receive Message\n  end\n\n  Client->>Server: Close Connection\n  Server--\x3e>Client: Close Connection"})}),(0,i.jsx)("td",{children:(0,i.jsx)(s.mermaid,{value:"  sequenceDiagram\n  participant Client\n  participant Server\n\n  Client->>Server: Establish connection\n  Server--\x3e>Client: Connection established\n\n  Client->>Server: Request\n\n  loop Receive events\n      Server->>Client: Event data\n  end\n\n  Client->>Server: Close connection\n  Server--\x3e>Client: Connection closed"})})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("b",{children:"Real-time communication"})}),(0,i.jsx)("td",{children:"No, it makes repeated requests even if no data is available"}),(0,i.jsx)("td",{children:"Yes, it keeps connection open until data is available"}),(0,i.jsx)("td",{children:"Yes, server pushes data to client when a particular event happens"}),(0,i.jsx)("td",{children:"Yes, it provides full-duplex communication channels"}),(0,i.jsx)("td",{children:"Yes, it allows a server to push updates to clients"})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("b",{children:"Efficiency"})}),(0,i.jsx)("td",{children:"Low, as it continuously asks for data from the server, leading to high network traffic"}),(0,i.jsx)("td",{children:"Higher than short polling, as it reduces unnecessary network overhead"}),(0,i.jsx)("td",{children:"High, no need for client to continuously poll for data, reducing network traffic"}),(0,i.jsx)("td",{children:"High, as it only communicates when there is new data, and maintains a constant connection"}),(0,i.jsx)("td",{children:"High, as it allows servers to push updates without client requests"})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("b",{children:"Complexity"})}),(0,i.jsx)("td",{children:"Low, as it uses standard HTTP requests"}),(0,i.jsx)("td",{children:"Higher than short polling, as it needs to maintain open connections"}),(0,i.jsx)("td",{children:"Medium, client needs to subscribe to events and server needs to support webhooks"}),(0,i.jsx)("td",{children:"High, as it requires specific protocols and server-side implementation"}),(0,i.jsx)("td",{children:"Medium, as it mostly requires server-side implementation"})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("b",{children:"HTTP Headers"})}),(0,i.jsx)("td",{children:"Sent with every request, increasing overhead"}),(0,i.jsx)("td",{children:"Sent with every request, increasing overhead"}),(0,i.jsx)("td",{children:"Sent only when an event occurs, reducing overhead"}),(0,i.jsx)("td",{children:"Sent only at connection setup, reducing overhead"}),(0,i.jsx)("td",{children:"Sent only at connection setup, reducing overhead"})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("b",{children:"Data Direction"})}),(0,i.jsx)("td",{children:"Bidirectional, but inefficient"}),(0,i.jsx)("td",{children:"Bidirectional, but inefficient"}),(0,i.jsx)("td",{children:"Unidirectional (server to client), best for delivering event notifications"}),(0,i.jsx)("td",{children:"Bidirectional, providing real-time interaction"}),(0,i.jsx)("td",{children:"Unidirectional (server to client), best for delivering updates"})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("b",{children:"Connection Persistence"})}),(0,i.jsx)("td",{children:"No, connections are closed after each request"}),(0,i.jsx)("td",{children:"Yes, until the server has data to send"}),(0,i.jsx)("td",{children:"No, connections are established only when an event occurs"}),(0,i.jsx)("td",{children:"Yes, connections are kept alive until closed by either client or server"}),(0,i.jsx)("td",{children:"Yes, until the client closes the connection"})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("b",{children:"Use Cases"})}),(0,i.jsx)("td",{children:"Best for when updates are infrequent and data is small"}),(0,i.jsx)("td",{children:"Best for when updates are sporadic but real-time delivery is required"}),(0,i.jsx)("td",{children:"Best for real-time notifications, when you want to be notified when a particular event happens"}),(0,i.jsx)("td",{children:"Best for real-time applications, gaming, chat applications etc"}),(0,i.jsx)("td",{children:"Best for real-time applications, especially when updates are only required to be sent to the client"})]})]})]})}),(0,i.jsx)(d.Z,{value:"sync",label:"Sync",children:(0,i.jsxs)(t.Z,{queryString:"secondary",children:[(0,i.jsx)(d.Z,{value:"development",label:"Development Styles",attributes:{className:"tabs__vertical"},children:(0,i.jsxs)("table",{children:[(0,i.jsx)("thead",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("th",{children:"Aspect"}),(0,i.jsx)("th",{children:"Code First"}),(0,i.jsx)("th",{children:"API First"})]})}),(0,i.jsxs)("tbody",{children:[(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("b",{children:"Visualization"})}),(0,i.jsx)("td",{children:(0,i.jsx)(s.mermaid,{value:"  graph TB\n\n  develop(Develop code) --\x3e integrate(Integrate code)\n  tests(Write tests and API docs) --\x3e |run tests| integrate\n  integrate --\x3e deploy(Deploy)\n  deploy --\x3e release(Release new version)"})}),(0,i.jsx)("td",{children:(0,i.jsx)(s.mermaid,{value:"  graph TB\n\n  design(Design API) --\x3e review(Review & mock API)\n  review --\x3e developApi(Develop API)\n\n  review --\x3e |generate code| developCode(Develop code)\n  document(Document API & write tests) -.-> developCode\n  developCode --\x3e integrate(Integrate & deploy code)\n  publish(Publish API docs & run tests) -.-> integrate\n\n  developApi --\x3e deploy(Deploy API)\n  deploy --\x3e release(Release new version)\n\n  integrate --\x3e release"})})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("b",{children:"Definition"})}),(0,i.jsx)("td",{children:"Development of the application begins with coding, and the APIs are developed from the code"}),(0,i.jsx)("td",{children:"APIs are developed before the actual coding begins. The APIs are designed and documented first, followed by the development of the application"})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("b",{children:"Approach"})}),(0,i.jsx)("td",{children:"Bottom-up: Focuses on the application\u2019s functionality. Serves application's needs"}),(0,i.jsx)("td",{children:"Top-down: Client-oriented approach. Serves client's needs"})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("b",{children:"Design Focus"})}),(0,i.jsx)("td",{children:"Focuses primarily on the application\u2019s functionality and then on the API capabilities"}),(0,i.jsx)("td",{children:"Prioritizes the design and capabilities of the APIs, and then the application is built around these APIs"})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("b",{children:"Implementation Speed"})}),(0,i.jsx)("td",{children:"Can be faster initially because the development can start immediately without having to wait for the API design"}),(0,i.jsx)("td",{children:"Might be slower to start because the API design needs to be completed first. However, in the long run, it can speed up the development process as it provides a clear roadmap. In addition, cross-team collaboration can be improved as well and decentralize/distribute the workflow among multiple teams without any overhead or delays"})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("b",{children:"Collaboration"})}),(0,i.jsx)("td",{children:"Might lead to less collaboration as developers might not have a clear vision of the final product"}),(0,i.jsx)("td",{children:"Promotes collaboration between front-end and back-end developers, as well as other stakeholders, as everyone has a clear understanding of the APIs and their capabilities"})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("b",{children:"Scalability"})}),(0,i.jsx)("td",{children:"Scalability can be a challenge as changes in the code might require changes in the APIs"}),(0,i.jsx)("td",{children:"Considers scalability from the start. APIs are designed to cater to future needs, which makes scaling more straightforward"})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("b",{children:"Consistency"})}),(0,i.jsx)("td",{children:"May lead to inconsistency in API design as different developers might design APIs differently"}),(0,i.jsx)("td",{children:"Ensures consistency in API design as all APIs are designed before the coding begins, following a predefined set of standards"})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("b",{children:"Documentation"})}),(0,i.jsx)("td",{children:"Can be a challenge in the Code First approach, as it is often treated as an afterthought"}),(0,i.jsx)("td",{children:"Prioritizes documentation, which is done in the initial stages of the project. This ensures that all stakeholders understand the APIs and their capabilities"})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("b",{children:"Testing"})}),(0,i.jsx)("td",{children:"Testing is generally performed after the application has been developed"}),(0,i.jsx)("td",{children:"APIs can be tested independently of the application, allowing for early detection and resolution of issues"})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("b",{children:"Integration"})}),(0,i.jsx)("td",{children:"Might present integration challenges as the APIs might not align with 3rd-party systems or components"}),(0,i.jsx)("td",{children:"Considers integration from the start. APIs are designed to be reusable and can be easily integrated with other systems"})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("b",{children:"Maintenance"})}),(0,i.jsx)("td",{children:"Might lead to higher maintenance costs if changes in the code require changes in the APIs"}),(0,i.jsx)("td",{children:"With its focus on scalability and integration from the start, can lead to lower maintenance costs in the long run"})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("b",{children:"Use Case"})}),(0,i.jsx)("td",{children:"Well-suited for small, simple projects where quick development is required"}),(0,i.jsx)("td",{children:"Ideal for complex, large-scale projects where scalability, consistency, and integration are key considerations"})]})]})]})}),(0,i.jsxs)(d.Z,{value:"practices",label:"Best Practices",children:[(0,i.jsx)(s.h2,{id:"versioning",children:"Versioning"}),(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"URL Path"}),": ",(0,i.jsx)(s.code,{children:"test.com/v1/users"})]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"URL Query"}),": ",(0,i.jsx)(s.code,{children:"/users?version=1.0"})]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Header"})," (or as a custom header): ",(0,i.jsx)(s.code,{children:'curl -H "Accept: application/json; version=1.0" test.com/users'})]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Body"}),": ",(0,i.jsx)(s.code,{children:'curl test.com/users -d "{version: 1.0}"'})]}),"\n"]}),(0,i.jsx)(s.h2,{id:"resource-naming-convention",children:"Resource Naming Convention"}),(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"URL Path and URL Query Parameters"}),": Consider using hyphens (",(0,i.jsx)(s.code,{children:"-"}),") to separate words in your URLs, as it helps users and search engines identify concepts in the URL more easily","\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:(0,i.jsx)(s.code,{children:"/users/very-long-path?long-text=123"})}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"camelCase"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:(0,i.jsx)(s.code,{children:"/users/veryLongPath?longText=123"})}),"\n"]}),"\n"]}),"\n"]}),(0,i.jsx)(s.h2,{id:"nouns-vs-verbs",children:"Nouns vs Verbs"}),(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["Verbs should not be used in endpoint paths. Instead, the pathname should contain the nouns that identify the object that the endpoint that we are accessing or altering belongs to.","\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["Instead of using ",(0,i.jsx)(s.code,{children:"/getAllClients"})," to fetch all clients, use ",(0,i.jsx)(s.code,{children:"/clients"})]}),"\n"]}),"\n"]}),"\n"]}),(0,i.jsx)(s.h2,{id:"singular-vs-plural",children:"Singular vs Plural"}),(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["Stick to one convention because it depends on your domain","\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["as an example","\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"shopping cart"})," in e-commerce website is ",(0,i.jsx)(s.strong,{children:"1-to-1"})," relationship between client and a shopping cart. Therefore, it's confusing to have ",(0,i.jsx)(s.code,{children:"/carts"})]}),"\n",(0,i.jsxs)(s.li,{children:["on the other hand, we can have a ",(0,i.jsx)(s.strong,{children:"blog"})," with ",(0,i.jsx)(s.strong,{children:"articles"})," which makes more sense to have ",(0,i.jsx)(s.code,{children:"/articles"})," endpoint"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),(0,i.jsx)(s.h2,{id:"rest-verbs",children:"REST Verbs"}),(0,i.jsxs)("table",{children:[(0,i.jsx)("thead",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("th",{children:"Resource"}),(0,i.jsx)("th",{children:"GET (read)"}),(0,i.jsx)("th",{children:"POST (create)"}),(0,i.jsx)("th",{children:"PUT (update)"}),(0,i.jsx)("th",{children:"PATCH (partial update)"}),(0,i.jsx)("th",{children:"DELETE (delete)"}),(0,i.jsx)("th",{children:"OPTIONS"}),(0,i.jsx)("th",{children:"HEAD"})]})}),(0,i.jsxs)("tbody",{children:[(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("code",{children:"/users"})}),(0,i.jsx)("td",{children:"returns all users"}),(0,i.jsx)("td",{children:"creates a new user"}),(0,i.jsx)("td",{children:"bulk update of users"}),(0,i.jsx)("td",{children:"partial update of all users"}),(0,i.jsx)("td",{children:"delete all users"}),(0,i.jsx)("td",{rowspan:"2",children:"returns HTTP methods"}),(0,i.jsx)("td",{rowspan:"2",children:"returns HTTP headers"})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("code",{children:"/users/1"})}),(0,i.jsx)("td",{children:"returns a specific use"}),(0,i.jsx)("td",{children:"method not allowed (405)"}),(0,i.jsx)("td",{children:"updates a specific user"}),(0,i.jsx)("td",{children:"partial update of a specific user"}),(0,i.jsx)("td",{children:"deletes a specific user"})]})]})]}),(0,i.jsx)(s.h2,{id:"http-status-codes",children:"HTTP Status Codes"}),(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"1xx"}),": Information"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"2xx"}),": Success"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"3xx"}),": Redirection"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"4xx"}),": Client Error"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"5xx"}),": Server Error"]}),"\n"]}),(0,i.jsxs)("table",{children:[(0,i.jsx)("thead",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("th",{children:"HTTP Code"}),(0,i.jsx)("th",{children:"HTTP Status"}),(0,i.jsx)("th",{children:"Use Cases"})]})}),(0,i.jsxs)("tbody",{children:[(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:"200"}),(0,i.jsx)("td",{children:"OK"}),(0,i.jsx)("td",{children:"Request succeeded (REST call)"})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:"201"}),(0,i.jsx)("td",{children:"CREATED"}),(0,i.jsx)("td",{children:"Request succeeded and resource created (short async call)"})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:"202"}),(0,i.jsx)("td",{children:"ACCEPTED"}),(0,i.jsx)("td",{children:"Request has been accepted for processing (long async call)"})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:"301"}),(0,i.jsx)("td",{children:"MOVED PERMANENTLY"}),(0,i.jsx)("td",{children:"Resource was moved to a new place permanently"})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:"400"}),(0,i.jsx)("td",{children:"BAD REQUEST"}),(0,i.jsx)("td",{children:"REST API client's invalid input. Provide only client's oriented message"})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:"401"}),(0,i.jsx)("td",{children:"UNAUTHORIZED"}),(0,i.jsx)("td",{children:"Client is not authenticated"})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:"403"}),(0,i.jsx)("td",{children:"FORBIDDEN"}),(0,i.jsx)("td",{children:"Client is not authorised to access resource"})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:"404"}),(0,i.jsx)("td",{children:"NOT FOUND"}),(0,i.jsx)("td",{children:"Requested resource is not found"})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:"500"}),(0,i.jsx)("td",{children:"INTERNAL SERVER ERROR"}),(0,i.jsx)("td",{children:"Any unexpected error. Do not provide any information to a client instead log it"})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:"503"}),(0,i.jsx)("td",{children:"SERVICE UNAVAILABLE"}),(0,i.jsx)("td",{children:"Do not provide any information to a client instead log it"})]})]})]}),(0,i.jsx)(s.h2,{id:"proper-error-handling",children:"Proper Error Handling"}),(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsx)(s.p,{children:"Do not expose any sensitive information"}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:["Wrap any API calls and return only predefined messages for ",(0,i.jsx)(s.code,{children:"4xx"}),", ",(0,i.jsx)(s.code,{children:"5xx"})]}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsx)(s.p,{children:"Implement global Exception and provide Default Response Entity"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"HTTP Code 400: Provide only client's oriented message"}),"\n",(0,i.jsx)(s.li,{children:"HTTP Code 500: Log the error and provide generic message"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsx)(s.p,{children:"Standardize response body"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-json",children:'{\n    "timestamp":"2000-01-15T22:00:00.000+0000",\n    "status":500,\n    "error":"Internal Server Error",\n    "message":"Error while processing request",\n    "path":"/api/user/1"\n}\n'})}),"\n"]}),"\n"]}),(0,i.jsx)(s.h2,{id:"response-entity",children:"Response Entity"}),(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"Don\u2019t return plain text responses"}),"\n",(0,i.jsx)(s.li,{children:"In most cases REST APIs should accept JSON for request payload and also respond with JSON because it is a standard for transferring data"}),"\n"]}),(0,i.jsx)(s.h2,{id:"data-filtering",children:"Data Filtering"}),(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["use URL params","\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"filter"}),": ",(0,i.jsx)(s.code,{children:"GET /users?country=US&city=NY"})]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"sorting"}),": ",(0,i.jsx)(s.code,{children:"GET /users?sort=name:asc"})]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"paging"}),":","\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"offset/limit"}),": ",(0,i.jsx)(s.code,{children:"GET /users?offset=3&limit=120"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["slower solution because it process ",(0,i.jsx)(s.strong,{children:"x"})," rows and then return ",(0,i.jsx)(s.strong,{children:"y"})," rows"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"OFFSET 90000 LIMIT 10"}),": read 90010 rows and then return only 10 rows"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"cursor/token"}),": ",(0,i.jsx)(s.code,{children:"GET /users?cursor=12345"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"more efficient solution especially for large datasets"}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"token"}),": any column or property that is used to pivot through the data in the table. Most common is ",(0,i.jsx)(s.code,{children:"created_at"})," column"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"improve performance"}),": index column that is used to pivot through the data in the table (cursor/token column)"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:'WHERE created_at >= "2024-01-01" LIMIT 10'}),": filter through the table and read only 10 required rows"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),(0,i.jsx)(s.h2,{id:"utilize-resource-nesting-efficiency",children:"Utilize Resource Nesting Efficiency"}),(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["If resource have a ",(0,i.jsx)(s.strong,{children:"has-a"})," relationship to another resource it's good to use ",(0,i.jsx)(s.strong,{children:"nesting"})," while implementing REST API Contracts","\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["Example: user can have some orders in e-commerce website","\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"user's orders"}),": ",(0,i.jsx)(s.code,{children:"/users/1/orders/"})]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"user's order"}),": ",(0,i.jsx)(s.code,{children:"/users/1/orders/1"})]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),(0,i.jsx)(s.h2,{id:"security",children:"Security"}),(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"Use SSL/TLS for secure communication"}),"\n",(0,i.jsxs)(s.li,{children:["Add secured short-lived headers","\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"JWT Token"}),": ",(0,i.jsx)(s.code,{children:"Authorization: Bearer <token>"})]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"CORS"}),": ",(0,i.jsx)(s.code,{children:"Access-Control-Allow-Origin: your.domain.com"})]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(s.li,{children:"Root Certificate"}),"\n",(0,i.jsxs)(s.li,{children:["Rate Limiting","\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["Design rate limiting rules based on ",(0,i.jsx)(s.strong,{children:"user"}),", ",(0,i.jsx)(s.strong,{children:"IP"}),", ",(0,i.jsx)(s.strong,{children:"action group"}),", etc."]}),"\n"]}),"\n"]}),"\n"]}),(0,i.jsx)(s.h2,{id:"async-logging",children:"Async Logging"}),(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"send logs to a lock-free ring buffer and return"}),"\n",(0,i.jsx)(s.li,{children:"flush to the disk periodically"}),"\n",(0,i.jsx)(s.li,{children:"higher throughput and lower latency"}),"\n"]}),(0,i.jsx)(s.h2,{id:"caching",children:"Caching"}),(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"store frequently accessed data in the cache instead of database"}),"\n",(0,i.jsx)(s.li,{children:"query database when there is a cache miss"}),"\n"]}),(0,i.jsx)(s.h2,{id:"payload-compression",children:"Payload Compression"}),(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"use gzip"}),"\n",(0,i.jsx)(s.li,{children:"reduce the data size to speed up the download/upload"}),"\n"]}),(0,i.jsx)(s.h2,{id:"connection-pool",children:"Connection Pool"}),(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"opening and closing DB connections add significant overhead"}),"\n",(0,i.jsx)(s.li,{children:"connection pool maintains a number of open connections for applications to reuse"}),"\n"]}),(0,i.jsx)(s.h2,{id:"request-body",children:"Request Body"}),(0,i.jsx)(s.p,{children:"This pattern is well-suited for any messaging protocols and data formats. Including but not limited to REST, Pub-Sub"}),(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-json",children:'{\n    "specversion" : "1.0",\n    "type" : "com.github.pull_request.closed",\n    "source" : "https://github.com/spec/pull",\n    "subject" : "123",\n    "id" : "5f9eab6f-3d1f-4d0f-bd6d-9a8c6c8c6c6c",\n    "time" : "2020-01-15T22:00:00Z",\n    "datacontenttype" : "application/json",\n    "data" : "{ "user": { "id": 1, "name": "John" } }"\n}\n'})}),(0,i.jsxs)("table",{children:[(0,i.jsx)("thead",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("th",{children:"Attribute"}),(0,i.jsx)("th",{children:"Description"}),(0,i.jsx)("th",{children:"Constraints"}),(0,i.jsx)("th",{children:"Examples"})]})}),(0,i.jsxs)("tbody",{children:[(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("b",{children:"id"})}),(0,i.jsx)("td",{children:"Producers must ensure each event has a unique source and ID. If a duplicate event is resent (e.g., due to a network error), it may have the same ID. Consumers may assume events with identical source and ID are duplicates"}),(0,i.jsx)("td",{children:(0,i.jsxs)("ul",{children:[(0,i.jsx)("li",{children:"REQUIRED"}),(0,i.jsx)("li",{children:"MUST be a non-empty string"}),(0,i.jsx)("li",{children:"MUST be unique within the scope of the producer"})]})}),(0,i.jsx)("td",{children:(0,i.jsxs)("ul",{children:[(0,i.jsx)("li",{children:"Event counter maintained by the producer"}),(0,i.jsx)("li",{children:"UUID"}),(0,i.jsx)("li",{children:"Complex ID"}),(0,i.jsx)("li",{children:(0,i.jsx)(s.code,{children:"d9b280c3-890d-4a09-a518-8b3a2080d0d7"})})]})})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("b",{children:"source"})}),(0,i.jsx)("td",{children:"Identifies the event's context, including details like event source type, publishing organization, or production process. The URI's syntax and semantics are defined by the event producer. Each event must have a unique source + ID combination, ensured by producers. Applications may assign unique sources to producers, facilitating unique ID generation. UUIDs, URNs, DNS authorities, or custom schemes can be used for source identifiers. A source may involve multiple producers, necessitating collaboration to maintain unique source + ID combinations for each event"}),(0,i.jsx)("td",{children:(0,i.jsxs)("ul",{children:[(0,i.jsx)("li",{children:"REQUIRED"}),(0,i.jsx)("li",{children:"MUST be a non-empty URI-reference"}),(0,i.jsx)("li",{children:"An absolute URI is RECOMMENDED"})]})}),(0,i.jsx)("td",{children:(0,i.jsxs)("ul",{children:[(0,i.jsx)("li",{children:"Internet-wide unique URI with a DNS authority"}),(0,i.jsx)("li",{children:"Universally-unique URN with a UUID"}),(0,i.jsx)("li",{children:"Application-specific identifiers"}),(0,i.jsx)("li",{children:(0,i.jsx)(s.code,{children:"https://github.com/spec/pull"})})]})})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("b",{children:"specversion"})}),(0,i.jsx)("td",{children:"Attribute includes only major and minor version numbers, allowing for patch changes without altering this property's value. Note: A suffix might be added for testing purposes during release candidate releases"}),(0,i.jsx)("td",{children:(0,i.jsxs)("ul",{children:[(0,i.jsx)("li",{children:"REQUIRED"}),(0,i.jsx)("li",{children:"MUST be a non-empty string"})]})}),(0,i.jsx)("td",{children:(0,i.jsxs)("ul",{children:[(0,i.jsx)("li",{children:(0,i.jsx)(s.code,{children:"1.0"})}),(0,i.jsx)("li",{children:(0,i.jsx)(s.code,{children:"1.1"})})]})})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("b",{children:"type"})}),(0,i.jsx)("td",{children:"Describes the type of event associated with the originating occurrence. It's commonly used for routing, observability, and policy enforcement. The format is defined by the producer and may include details such as the type version"}),(0,i.jsx)("td",{children:(0,i.jsxs)("ul",{children:[(0,i.jsx)("li",{children:"REQUIRED"}),(0,i.jsx)("li",{children:"MUST be a non-empty string"}),(0,i.jsx)("li",{children:"SHOULD be prefixed with a reverse-DNS name. The prefixed domain dictates the organization which defines the semantics of this event type"})]})}),(0,i.jsx)("td",{children:(0,i.jsxs)("ul",{children:[(0,i.jsx)("li",{children:(0,i.jsx)(s.code,{children:"com.github.pull_request.closed"})}),(0,i.jsx)("li",{children:(0,i.jsx)(s.code,{children:"com.example.object.created.v2"})})]})})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("b",{children:"datacontenttype"})}),(0,i.jsx)("td",{children:"Allows data to carry various content types, independent of the event format. It informs consumers about the content's format and encoding"}),(0,i.jsx)("td",{children:(0,i.jsxs)("ul",{children:[(0,i.jsx)("li",{children:"OPTIONAL"}),(0,i.jsx)("li",{children:"String"})]})}),(0,i.jsx)("td",{children:(0,i.jsxs)("ul",{children:[(0,i.jsx)("li",{children:(0,i.jsx)(s.code,{children:"application/xml"})}),(0,i.jsx)("li",{children:(0,i.jsx)(s.code,{children:"application/json"})})]})})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("b",{children:"dataschema"})}),(0,i.jsx)("td",{children:"Identifies the schema that data adheres to. Incompatible changes to the schema SHOULD be reflected by a different URI"}),(0,i.jsx)("td",{children:(0,i.jsxs)("ul",{children:[(0,i.jsx)("li",{children:"OPTIONAL"}),(0,i.jsx)("li",{children:"URI"})]})}),(0,i.jsx)("td",{children:(0,i.jsx)("ul",{children:(0,i.jsx)("li",{children:(0,i.jsx)(s.code,{children:"http://registry.com/schema/v1/api.json"})})})})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("b",{children:"subject"})}),(0,i.jsxs)("td",{children:["In event-driven systems, the event subject, tied to the event producer, helps subscribers filter relevant events. This is crucial in scenarios where middleware lacks data interpretation capability. For instance, a subscriber may only want to receive events related to certain blob names, like those ending in ",(0,i.jsx)(s.em,{children:".jpg"})," or ",(0,i.jsx)(s.em,{children:".jpeg"}),". The subject attribute aids in constructing efficient filters. For example, a subscriber might be interested in new blob creations within a storage container, where the event source denotes the container, the type indicates the event, and the ID distinguishes between occurrences of similarly named blobs. The subject field carries the name of the newly created blob"]}),(0,i.jsx)("td",{children:(0,i.jsxs)("ul",{children:[(0,i.jsx)("li",{children:"OPTIONAL"}),(0,i.jsx)("li",{children:"String"})]})}),(0,i.jsx)("td",{children:(0,i.jsx)("ul",{children:(0,i.jsx)("li",{children:(0,i.jsx)(s.code,{children:"file.jpg"})})})})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("b",{children:"time"})}),(0,i.jsx)("td",{children:"Timestamp of the event occurrence"}),(0,i.jsx)("td",{children:(0,i.jsxs)("ul",{children:[(0,i.jsx)("li",{children:"OPTIONAL"}),(0,i.jsx)("li",{children:"Timestamp"}),(0,i.jsx)("li",{children:"RFC 3339"})]})}),(0,i.jsx)("td",{children:(0,i.jsx)("ul",{children:(0,i.jsx)("li",{children:(0,i.jsx)(s.code,{children:"2020-01-15T22:00:00Z"})})})})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("b",{children:"data"})}),(0,i.jsx)("td",{children:"Content that is associated with the event"}),(0,i.jsx)("td",{children:(0,i.jsxs)("ul",{children:[(0,i.jsx)("li",{children:"OPTIONAL"}),(0,i.jsxs)("li",{children:["Based on the ",(0,i.jsx)(s.code,{children:"datacontenttype"})]})]})}),(0,i.jsx)("td",{children:(0,i.jsx)("ul",{children:(0,i.jsx)("li",{children:(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-json",children:'{\n  "user": {\n    "id": 1,\n    "name": "John",\n    "age": 20\n  }\n}\n'})})})})})]})]})]})]})]})})]})}function j(e={}){const{wrapper:s}={...(0,r.a)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(x,{...e})}):x(e)}}}]);