"use strict";(self.webpackChunkclassic=self.webpackChunkclassic||[]).push([[2723],{57967:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>x,contentTitle:()=>q,default:()=>k,frontMatter:()=>f,metadata:()=>j,toc:()=>b});var u=t(11527),s=t(84135),i=t(40521),r=t(74109),l=t(80035);const c='package main\n\nimport (\n\t"sync"\n)\n\ntype Queue struct {\n\tqueue []interface{}\n\tlock  sync.RWMutex\n}\n\nfunc NewQueue() *Queue {\n\treturn &Queue{queue: make([]interface{}, 0)}\n}\n\nfunc (q *Queue) Enqueue(item interface{}) {\n\tq.lock.Lock()\n\tdefer q.lock.Unlock()\n\n\tq.queue = append(q.queue, item)\n}\n\nfunc (q *Queue) Peek() (interface{}, bool) {\n\tq.lock.RLock()\n\tdefer q.lock.RUnlock()\n\n\tif len(q.queue) == 0 {\n\t\treturn nil, false\n\t}\n\treturn q.queue[0], true\n}\n\nfunc (q *Queue) Dequeue() (interface{}, bool) {\n\tq.lock.Lock()\n\tdefer q.lock.Unlock()\n\n\tif len(q.queue) == 0 {\n\t\treturn nil, false\n\t}\n\titem := q.queue[0]\n\tq.queue = q.queue[1:]\n\treturn item, true\n}\n',a="import java.util.LinkedList;\nimport java.util.NoSuchElementException;\n\npublic class Queue<T> {\n\n  private LinkedList<T> queue = new LinkedList<>();\n\n  public void enqueue(T item) {\n    queue.addLast(item);\n  }\n\n  public T peek() {\n    try {\n      return queue.getFirst();\n    } catch (NoSuchElementException e) {\n      return null;\n    }\n  }\n\n  public T dequeue() {\n    try {\n      return queue.removeFirst();\n    } catch (NoSuchElementException e) {\n      return null;\n    }\n  }\n}\n",d="class Queue {\n  constructor() {\n    this.queue = [];\n  }\n\n  enqueue(item) {\n    this.queue.push(item);\n  }\n\n  peek() {\n    return this.queue.length > 0 ? this.queue[0] : null;\n  }\n\n  dequeue() {\n    return this.queue.length > 0 ? this.queue.shift() : null;\n  }\n}\n",o="class Queue<T> {\n    private val queue: MutableList<T> = mutableListOf()\n\n    fun enqueue(item: T) {\n        queue.add(item)\n    }\n\n    fun peek(): T? {\n        return elements.firstOrNull()\n    }\n\n    fun dequeue(): T? {\n        return elements.removeFirstOrNull()\n    }\n}\n",h="class Queue:\n    def __init__(self):\n        self.queue = []\n\n    def enqueue(self, item):\n        self.queue.append(item)\n\n    def peek(self):\n        return self.queue[0] if self.queue else None\n\n    def dequeue(self):\n        return self.queue.pop(0) if self.queue else None\n",p="use std::collections::VecDeque;\n\npub struct Queue<T> {\n    queue: VecDeque<T>,\n}\n\nimpl<T> Queue<T> {\n    pub fn new() -> Self {\n        Queue {\n            queue: VecDeque::new(),\n        }\n    }\n\n    pub fn enqueue(&mut self, item: T) {\n        self.queue.push_back(item);\n    }\n\n    pub fn peek(&self) -> Option<&T> {\n        self.queue.front()\n    }\n\n    pub fn dequeue(&mut self) -> Option<T> {\n        self.queue.pop_front()\n    }\n}\n",m="class Queue<T> {\n  private queue: T[] = [];\n\n  enqueue(item: T): void {\n    this.queue.push(item);\n  }\n\n  peek(): T | undefined {\n    return this.queue[0];\n  }\n\n  dequeue(): T | undefined {\n    return this.queue.shift();\n  }\n}\n",f={title:"Queue",description:"Queue Data Structure",hide_table_of_contents:!0},q=void 0,j={id:"education/computer-science/data-structures/basic/queue",title:"Queue",description:"Queue Data Structure",source:"@site/docs/education/01-computer-science/09-data-structures/02-basic/04-queue.mdx",sourceDirName:"education/01-computer-science/09-data-structures/02-basic",slug:"/education/computer-science/data-structures/basic/queue",permalink:"/tech-labs/docs/education/computer-science/data-structures/basic/queue",draft:!1,unlisted:!1,editUrl:"https://github.com/EliFuzz/tech-labs/docs/education/01-computer-science/09-data-structures/02-basic/04-queue.mdx",tags:[],version:"current",sidebarPosition:4,frontMatter:{title:"Queue",description:"Queue Data Structure",hide_table_of_contents:!0},sidebar:"education",previous:{title:"Doubly Linked List",permalink:"/tech-labs/docs/education/computer-science/data-structures/basic/doubly-linked-list"},next:{title:"Stack",permalink:"/tech-labs/docs/education/computer-science/data-structures/basic/stack"}},x={},b=[{value:"Definition",id:"definition",level:2},{value:"Practice",id:"practice",level:2}];function g(e){const n={code:"code",h2:"h2",img:"img",p:"p",pre:"pre",strong:"strong",...(0,s.a)(),...e.components},{Details:f}=n;return f||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,u.jsxs)(u.Fragment,{children:[(0,u.jsx)(n.p,{children:(0,u.jsx)(n.img,{src:t(65706).Z+""})}),"\n",(0,u.jsxs)("table",{children:[(0,u.jsxs)("thead",{children:[(0,u.jsxs)("tr",{children:[(0,u.jsx)("th",{children:"Space"}),(0,u.jsx)("th",{colspan:"6",children:"Time"})]}),(0,u.jsxs)("tr",{children:[(0,u.jsx)("th",{}),(0,u.jsx)("th",{children:"Access"}),(0,u.jsx)("th",{children:"Lookup"}),(0,u.jsx)("th",{children:"Insertion"}),(0,u.jsx)("th",{children:"Deletion"})]})]}),(0,u.jsx)("tbody",{children:(0,u.jsxs)("tr",{children:[(0,u.jsx)("td",{children:(0,u.jsx)("code",{className:"fair",children:"O(n)"})}),(0,u.jsx)("td",{children:(0,u.jsx)("code",{className:"fair",children:"O(n)"})}),(0,u.jsx)("td",{children:(0,u.jsx)("code",{className:"fair",children:"O(n)"})}),(0,u.jsx)("td",{children:(0,u.jsx)("code",{className:"excellent",children:"O(1)"})}),(0,u.jsx)("td",{children:(0,u.jsx)("code",{className:"excellent",children:"O(1)"})})]})})]}),"\n",(0,u.jsx)(n.h2,{id:"definition",children:"Definition"}),"\n",(0,u.jsxs)(i.Z,{queryString:"primary",children:[(0,u.jsxs)(r.Z,{value:"short",label:"Short",children:[(0,u.jsxs)(n.p,{children:[(0,u.jsx)(n.strong,{children:"Queue"})," is a data structure that follows the First-In-First-Out (FIFO) principle, where elements are added at the end and removed from the front."]}),(0,u.jsxs)(f,{children:[(0,u.jsx)("summary",{children:"Simplified"}),(0,u.jsx)(n.p,{children:"You're in a candy store with your friends, and you all want to buy your favorite candies. But there's a rule: you can't all rush to the counter at once; you have to form a line. The first one in\nthe line gets their candy first, then the second, and so on until everyone has their candy."}),(0,u.jsx)(n.p,{children:"This is just like a queue in a shop."})]})]}),(0,u.jsx)(r.Z,{value:"detailed",label:"Detailed",children:(0,u.jsxs)(n.p,{children:[(0,u.jsx)(n.strong,{children:"Queue"})," is a data structure where elements are kept in order. It operates on a First-In-First-Out (FIFO) principle, meaning the first element added will be the first to be removed. The main\noperations are 'enqueue' (adding elements to the end) and 'dequeue' (removing elements from the front). Often, there's also a 'peek' operation that lets you see the front element without removing\nit. In essence, a queue is a linear, sequential collection."]})})]}),"\n",(0,u.jsx)(n.h2,{id:"practice",children:"Practice"}),"\n",(0,u.jsxs)(i.Z,{queryString:"primary",children:[(0,u.jsx)(r.Z,{value:"practice",label:"Practice",children:(0,u.jsxs)("table",{children:[(0,u.jsx)("thead",{children:(0,u.jsxs)("tr",{children:[(0,u.jsx)("th",{children:"Aspect"}),(0,u.jsx)("th",{children:"Pseudo Code"})]})}),(0,u.jsxs)("tbody",{children:[(0,u.jsxs)("tr",{children:[(0,u.jsx)("td",{children:"Enqueue"}),(0,u.jsx)("td",{children:(0,u.jsx)(n.pre,{children:(0,u.jsx)(n.code,{children:"enqueue(item):\n  queue.add_to_end(item)\n"})})})]}),(0,u.jsxs)("tr",{children:[(0,u.jsx)("td",{children:"Peak"}),(0,u.jsx)("td",{children:(0,u.jsx)(n.pre,{children:(0,u.jsx)(n.code,{children:"peek():\n  queue.show_first()\n\n"})})})]}),(0,u.jsxs)("tr",{children:[(0,u.jsx)("td",{children:"Dequeue"}),(0,u.jsx)("td",{children:(0,u.jsx)(n.pre,{children:(0,u.jsx)(n.code,{children:"dequeue():\n  queue.remove_first()\n"})})})]})]})]})}),(0,u.jsx)(r.Z,{value:"solution",label:"Solution",children:(0,u.jsxs)(i.Z,{queryString:"code",children:[(0,u.jsx)(r.Z,{value:"go",label:"",attributes:{title:"Go Lang",className:"code_lang go m"},children:(0,u.jsx)(l.Z,{language:"go",children:c})}),(0,u.jsx)(r.Z,{value:"java",label:"",attributes:{title:"Java",className:"code_lang java m"},children:(0,u.jsx)(l.Z,{language:"java",children:a})}),(0,u.jsx)(r.Z,{value:"js",label:"",attributes:{title:"JavaScript",className:"code_lang js m"},children:(0,u.jsx)(l.Z,{language:"js",children:d})}),(0,u.jsx)(r.Z,{value:"kotlin",label:"",attributes:{title:"Kotlin",className:"code_lang kotlin m"},children:(0,u.jsx)(l.Z,{language:"kotlin",children:o})}),(0,u.jsx)(r.Z,{value:"python",label:"",attributes:{title:"Python",className:"code_lang python m"},children:(0,u.jsx)(l.Z,{language:"python",children:h})}),(0,u.jsx)(r.Z,{value:"rust",label:"",attributes:{title:"Rust",className:"code_lang rust m"},children:(0,u.jsx)(l.Z,{language:"rust",children:p})}),(0,u.jsx)(r.Z,{value:"ts",label:"",attributes:{title:"TypeScript",className:"code_lang ts m"},children:(0,u.jsx)(l.Z,{language:"ts",children:m})})]})})]})]})}function k(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,u.jsx)(n,{...e,children:(0,u.jsx)(g,{...e})}):g(e)}},65706:(e,n,t)=>{t.d(n,{Z:()=>u});const u=t.p+"assets/images/queue-989793d784cee1e81c685b3f12c127e2.svg"}}]);